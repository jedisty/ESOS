cscope 15 $HOME/work/proj_rainbow/F2FS_rainbow/f2fs-tools               0000356381
	@config.h

5 
	#F2FS_MAJOR_VERSION
 1

	)

8 
	#F2FS_MINOR_VERSION
 4

	)

11 
	#F2FS_TOOLS_DATE
 "2014-12-29"

	)

14 
	#F2FS_TOOLS_VERSION
 "1.4.0"

	)

17 
	#HAVE_BYTESWAP_H
 1

	)

21 
	#HAVE_DECL_BSWAP_64
 1

	)

24 
	#HAVE_DLFCN_H
 1

	)

27 
	#HAVE_FCNTL_H
 1

	)

30 
	#HAVE_GETMNTENT
 1

	)

33 
	#HAVE_INTTYPES_H
 1

	)

36 
	#HAVE_LINUX_FALLOC_H
 1

	)

39 
	#HAVE_LINUX_FS_H
 1

	)

42 
	#HAVE_MEMORY_H
 1

	)

45 
	#HAVE_MEMSET
 1

	)

48 
	#HAVE_MNTENT_H
 1

	)

51 
	#HAVE_STDINT_H
 1

	)

54 
	#HAVE_STDLIB_H
 1

	)

57 
	#HAVE_STRINGS_H
 1

	)

60 
	#HAVE_STRING_H
 1

	)

63 
	#HAVE_SYS_IOCTL_H
 1

	)

66 
	#HAVE_SYS_MOUNT_H
 1

	)

69 
	#HAVE_SYS_STAT_H
 1

	)

72 
	#HAVE_SYS_TYPES_H
 1

	)

75 
	#HAVE_UNISTD_H
 1

	)

79 
	#LT_OBJDIR
 ".libs/"

	)

82 
	#PACKAGE
 "f2fs-toﬁs"

	)

85 
	#PACKAGE_BUGREPORT
 "löux-f2fs-devñ@li°s.sour˚f‹ge.√t"

	)

88 
	#PACKAGE_NAME
 "F2FSÅoﬁs"

	)

91 
	#PACKAGE_STRING
 "F2FSÅoﬁ†1.4.0"

	)

94 
	#PACKAGE_TARNAME
 "f2fs-toﬁs"

	)

97 
	#PACKAGE_URL
 ""

	)

100 
	#PACKAGE_VERSION
 "1.4.0"

	)

103 
	#STDC_HEADERS
 1

	)

106 
	#VERSION
 "1.4.0"

	)

110 #i‚de‡
__˝lu•lus


	@fsck/dump.c

11 
	~<öây≥s.h
>

13 
	~"fsck.h
"

14 
	~<loˇÀ.h
>

16 
	#BUF_SZ
 80

	)

18 c⁄° *
	g£g_ty≥_«me
[
SEG_TYPE_MAX
] = {

25 
	$sô_dump
(
f2fs_sb_öfo
 *
sbi
, 
°¨t_sô
, 
íd_sô
)

27 
£g_íåy
 *
£
;

28 
£gno
;

29 
buf
[
BUF_SZ
];

30 
u32
 
‰ì_£gs
 = 0;;

31 
u64
 
vÆid_blocks
 = 0;

32 
ªt
;

33 
fd
;

35 
fd
 = 
	`›í
("dump_sô", 
O_CREAT
|
O_WRONLY
|
O_TRUNC
, 0666);

36 
	`ASSERT
(
fd
 >= 0);

38 
£gno
 = 
°¨t_sô
; segnÿ< 
íd_sô
; segno++) {

39 
£
 = 
	`gë_£g_íåy
(
sbi
, 
£gno
);

41 
	`mem£t
(
buf
, 0, 
BUF_SZ
);

42 
	`¢¥ötf
(
buf
, 
BUF_SZ
, "%5d %8d\n", 
£gno
, 
£
->
vÆid_blocks
);

44 
ªt
 = 
	`wrôe
(
fd
, 
buf
, 
	`°æí
(buf));

45 
	`ASSERT
(
ªt
 >= 0);

47 
	`DBG
(4, "SIT[0x%3x] : 0x%x\n", 
£gno
, 
£
->
vÆid_blocks
);

48 i‡(
£
->
vÆid_blocks
 == 0x0) {

49 
‰ì_£gs
++;

51 
	`ASSERT
(
£
->
vÆid_blocks
 <= 512);

52 
vÆid_blocks
 +
£
->valid_blocks;

56 
	`mem£t
(
buf
, 0, 
BUF_SZ
);

57 
	`¢¥ötf
(
buf
, 
BUF_SZ
, "valid_segs:%d\t free_segs:%d\n",

58 
	`SM_I
(
sbi
)->
maö_£gmíts
 - 
‰ì_£gs
, free_segs);

59 
ªt
 = 
	`wrôe
(
fd
, 
buf
, 
	`°æí
(buf));

60 
	`ASSERT
(
ªt
 >= 0);

62 
	`˛o£
(
fd
);

63 
	`DBG
(1, "Block†[0x%" 
PRIx64
 "] FªêSeg†[0x%x]\n", 
vÆid_blocks
, 
‰ì_£gs
);

64 
	}
}

66 
	$sß_dump
(
f2fs_sb_öfo
 *
sbi
, 
°¨t_sß
, 
íd_sß
)

68 
f2fs_summ¨y_block
 
sum_blk
;

69 
buf
[
BUF_SZ
];

70 
£gno
, 
i
, 
ªt
;

71 
fd
;

73 
fd
 = 
	`›í
("dump_sß", 
O_CREAT
|
O_WRONLY
|
O_TRUNC
, 0666);

74 
	`ASSERT
(
fd
 >= 0);

76 
	`¢¥ötf
(
buf
, 
BUF_SZ
, "Note: dump.f2fs -b blkaddr = 0x%x + segno * "

78 
sbi
->
sm_öfo
->
maö_blkaddr
);

79 
ªt
 = 
	`wrôe
(
fd
, 
buf
, 
	`°æí
(buf));

80 
	`ASSERT
(
ªt
 >= 0);

82 
£gno
 = 
°¨t_sß
; segnÿ< 
íd_sß
; segno++) {

83 
ªt
 = 
	`gë_sum_block
(
sbi
, 
£gno
, &
sum_blk
);

85 
	`mem£t
(
buf
, 0, 
BUF_SZ
);

86 
ªt
) {

87 
SEG_TYPE_CUR_NODE
:

88 
	`¢¥ötf
(
buf
, 
BUF_SZ
, "\n\n£gno: %x, CuºíàNode\n", 
£gno
);

90 
SEG_TYPE_CUR_DATA
:

91 
	`¢¥ötf
(
buf
, 
BUF_SZ
, "\n\n£gno: %x, CuºíàD©a\n", 
£gno
);

93 
SEG_TYPE_NODE
:

94 
	`¢¥ötf
(
buf
, 
BUF_SZ
, "\n\n£gno: %x, Node\n", 
£gno
);

96 
SEG_TYPE_DATA
:

97 
	`¢¥ötf
(
buf
, 
BUF_SZ
, "\n\n£gno: %x, D©a\n", 
£gno
);

100 
ªt
 = 
	`wrôe
(
fd
, 
buf
, 
	`°æí
(buf));

101 
	`ASSERT
(
ªt
 >= 0);

103 
i
 = 0; i < 
ENTRIES_IN_SUM
; i++) {

104 
	`mem£t
(
buf
, 0, 
BUF_SZ
);

105 i‡(
i
 % 10 == 0) {

106 
buf
[0] = '\n';

107 
ªt
 = 
	`wrôe
(
fd
, 
buf
, 
	`°æí
(buf));

108 
	`ASSERT
(
ªt
 >= 0);

110 
	`¢¥ötf
(
buf
, 
BUF_SZ
, "[%3d: %6x]", 
i
,

111 
	`À32_to_˝u
(
sum_blk
.
íåõs
[
i
].
nid
));

112 
ªt
 = 
	`wrôe
(
fd
, 
buf
, 
	`°æí
(buf));

113 
	`ASSERT
(
ªt
 >= 0);

116 
	`˛o£
(
fd
);

117 
	}
}

119 
	$dump_d©a_blk
(
__u64
 
off£t
, 
u32
 
blkaddr
)

121 
buf
[
F2FS_BLKSIZE
];

123 i‡(
blkaddr
 =
NULL_ADDR
)

127 i‡(
blkaddr
 =
NEW_ADDR
) {

128 
	`mem£t
(
buf
, 0, 
F2FS_BLKSIZE
);

130 
ªt
;

131 
ªt
 = 
	`dev_ªad_block
(
buf
, 
blkaddr
);

132 
	`ASSERT
(
ªt
 >= 0);

136 
	`dev_wrôe_dump
(
buf
, 
off£t
, 
F2FS_BLKSIZE
);

137 
	}
}

139 
	$dump_node_blk
(
f2fs_sb_öfo
 *
sbi
, 
¡y≥
,

140 
u32
 
nid
, 
u64
 *
ofs
)

142 
node_öfo
 
ni
;

143 
f2fs_node
 *
node_blk
;

144 
u32
 
skù
 = 0;

145 
u32
 
i
, 
idx
;

147 
¡y≥
) {

148 
TYPE_DIRECT_NODE
:

149 
skù
 = 
idx
 = 
ADDRS_PER_BLOCK
;

151 
TYPE_INDIRECT_NODE
:

152 
idx
 = 
NIDS_PER_BLOCK
;

153 
skù
 = 
idx
 * 
ADDRS_PER_BLOCK
;

155 
TYPE_DOUBLE_INDIRECT_NODE
:

156 
skù
 = 0;

157 
idx
 = 
NIDS_PER_BLOCK
;

161 i‡(
nid
 == 0) {

162 *
ofs
 +
skù
;

166 
	`gë_node_öfo
(
sbi
, 
nid
, &
ni
);

168 
node_blk
 = 
	`ˇŒoc
(
BLOCK_SZ
, 1);

169 
	`dev_ªad_block
(
node_blk
, 
ni
.
blk_addr
);

171 
i
 = 0; i < 
idx
; i++, (*
ofs
)++) {

172 
¡y≥
) {

173 
TYPE_DIRECT_NODE
:

174 
	`dump_d©a_blk
(*
ofs
 * 
F2FS_BLKSIZE
,

175 
	`À32_to_˝u
(
node_blk
->
dn
.
addr
[
i
]));

177 
TYPE_INDIRECT_NODE
:

178 
	`dump_node_blk
(
sbi
, 
TYPE_DIRECT_NODE
,

179 
	`À32_to_˝u
(
node_blk
->
ö
.
nid
[
i
]), 
ofs
);

181 
TYPE_DOUBLE_INDIRECT_NODE
:

182 
	`dump_node_blk
(
sbi
, 
TYPE_INDIRECT_NODE
,

183 
	`À32_to_˝u
(
node_blk
->
ö
.
nid
[
i
]), 
ofs
);

187 
	`‰ì
(
node_blk
);

188 
	}
}

190 
	$dump_öode_blk
(
f2fs_sb_öfo
 *
sbi
, 
u32
 
nid
,

191 
f2fs_node
 *
node_blk
)

193 
u32
 
i
 = 0;

194 
u64
 
ofs
 = 0;

198 if((
node_blk
->
i
.
i_ölöe
 & 
F2FS_INLINE_DATA
)){

199 
	`DBG
(3, "öo[0x%x] ha†ölöêd©a!\n", 
nid
);

201 
	`dev_wrôe_dump
(((*)
node_blk
Ë+ 
INLINE_DATA_OFFSET
,

202 0, 
MAX_INLINE_DATA
);

207 
i
 = 0; i < 
	`ADDRS_PER_INODE
(&
node_blk
->i); i++, 
ofs
++)

208 
	`dump_d©a_blk
(
ofs
 * 
F2FS_BLKSIZE
,

209 
	`À32_to_˝u
(
node_blk
->
i
.
i_addr
[i]));

212 
i
 = 0; i < 5; i++) {

213 i‡(
i
 == 0 || i == 1)

214 
	`dump_node_blk
(
sbi
, 
TYPE_DIRECT_NODE
,

215 
node_blk
->
i
.
i_nid
[i], &
ofs
);

216 i‡(
i
 == 2 || i == 3)

217 
	`dump_node_blk
(
sbi
, 
TYPE_INDIRECT_NODE
,

218 
node_blk
->
i
.
i_nid
[i], &
ofs
);

219 i‡(
i
 == 4)

220 
	`dump_node_blk
(
sbi
, 
TYPE_DOUBLE_INDIRECT_NODE
,

221 
node_blk
->
i
.
i_nid
[i], &
ofs
);

223 
	`ASSERT
(0);

225 
	}
}

227 
	$dump_fûe
(
f2fs_sb_öfo
 *
sbi
, 
node_öfo
 *
ni
,

228 
f2fs_node
 *
node_blk
)

230 
f2fs_öode
 *
öode
 = &
node_blk
->
i
;

231 
u32
 
imode
 = 
	`À32_to_˝u
(
öode
->
i_mode
);

232 
«me
[255] = {0};

233 
∑th
[1024] = {0};

234 
™s
[255] = {0};

235 
ªt
;

237 i‡(!
	`S_ISREG
(
imode
)) {

238 
	`MSG
(0, "NotáÑegular file\n\n");

242 
	`¥ötf
("Do you wantÅo dumpÅhis file into ./lost_found/? [Y/N] ");

243 
ªt
 = 
	`sˇnf
("%s", 
™s
);

244 
	`ASSERT
(
ªt
 >= 0);

246 i‡(!
	`°rˇ£cmp
(
™s
, "y")) {

247 
ªt
 = 
	`sy°em
("mkdir -p ./lost_found");

248 
	`ASSERT
(
ªt
 >= 0);

251 
	`°∫˝y
(
«me
, (c⁄° *)
öode
->
i_«me
,

252 
	`À32_to_˝u
(
öode
->
i_«mñí
));

253 
«me
[
	`À32_to_˝u
(
öode
->
i_«mñí
)] = 0;

254 
	`•rötf
(
∑th
, "./lo°_found/%s", 
«me
);

256 
c⁄fig
.
dump_fd
 = 
	`›í
(
∑th
, 
O_TRUNC
|
O_CREAT
|
O_RDWR
, 0666);

257 
	`ASSERT
(
c⁄fig
.
dump_fd
 >= 0);

260 
	`dump_öode_blk
(
sbi
, 
ni
->
öo
, 
node_blk
);

263 
ªt
 = 
	`·runˇã
(
c⁄fig
.
dump_fd
, 
	`À32_to_˝u
(
öode
->
i_size
));

264 
	`ASSERT
(
ªt
 >= 0);

266 
	`˛o£
(
c⁄fig
.
dump_fd
);

268 
	}
}

270 
	$dump_node
(
f2fs_sb_öfo
 *
sbi
, 
nid_t
 
nid
)

272 
node_öfo
 
ni
;

273 
f2fs_node
 *
node_blk
;

275 
	`gë_node_öfo
(
sbi
, 
nid
, &
ni
);

277 
node_blk
 = 
	`ˇŒoc
(
BLOCK_SZ
, 1);

278 
	`dev_ªad_block
(
node_blk
, 
ni
.
blk_addr
);

280 
	`DBG
(1, "NodêID [0x%x]\n", 
nid
);

281 
	`DBG
(1, "«t_íåy.block_add∏ [0x%x]\n", 
ni
.
blk_addr
);

282 
	`DBG
(1, "«t_íåy.vîsi⁄ [0x%x]\n", 
ni
.
vîsi⁄
);

283 
	`DBG
(1, "«t_íåy.öÿ [0x%x]\n", 
ni
.
öo
);

285 i‡(
ni
.
blk_addr
 == 0x0)

286 
	`MSG
(0, "InvalidÇatÉntry\n\n");

288 
	`DBG
(1, "node_blk.foŸî.öÿ[0x%x]\n", 
	`À32_to_˝u
(
node_blk
->
foŸî
.
öo
));

289 
	`DBG
(1, "node_blk.foŸî.nid [0x%x]\n", 
	`À32_to_˝u
(
node_blk
->
foŸî
.
nid
));

291 i‡(
	`À32_to_˝u
(
node_blk
->
foŸî
.
öo
Ë=
ni
.ino &&

292 
	`À32_to_˝u
(
node_blk
->
foŸî
.
nid
Ë=
ni
.nid) {

293 
	`¥öt_node_öfo
(
node_blk
);

294 
	`dump_fûe
(
sbi
, &
ni
, 
node_blk
);

296 
	`MSG
(0, "InvalidÇode block\n\n");

299 
	`‰ì
(
node_blk
);

300 
	}
}

302 
	$dump_node_‰om_blkaddr
(
u32
 
blk_addr
)

304 
f2fs_node
 *
node_blk
;

305 
ªt
;

307 
node_blk
 = 
	`ˇŒoc
(
BLOCK_SZ
, 1);

308 
	`ASSERT
(
node_blk
);

310 
ªt
 = 
	`dev_ªad_block
(
node_blk
, 
blk_addr
);

311 
	`ASSERT
(
ªt
 >= 0);

313 i‡(
c⁄fig
.
dbg_lv
 > 0)

314 
	`¥öt_node_öfo
(
node_blk
);

316 
	`¥öt_öode_öfo
(&
node_blk
->
i
, 1);

318 
	`‰ì
(
node_blk
);

319 
	}
}

321 
	$dump_d©a_off£t
(
u32
 
blk_addr
, 
ofs_ö_node
)

323 
f2fs_node
 *
node_blk
;

324 
ödúe˘_blks
 = 2 * 
NIDS_PER_BLOCK
 + 4;

325 
bidx
 = 0;

326 
node_ofs
;

327 
ªt
;

329 
node_blk
 = 
	`ˇŒoc
(
BLOCK_SZ
, 1);

330 
	`ASSERT
(
node_blk
);

332 
ªt
 = 
	`dev_ªad_block
(
node_blk
, 
blk_addr
);

333 
	`ASSERT
(
ªt
 >= 0);

335 
node_ofs
 = 
	`ofs_of_node
(
node_blk
);

337 i‡(
node_ofs
 == 0)

338 
gŸ_ô
;

340 i‡(
node_ofs
 > 0 &&Çode_ofs <= 2) {

341 
bidx
 = 
node_ofs
 - 1;

342 } i‡(
node_ofs
 <
ödúe˘_blks
) {

343 
dec
 = (
node_ofs
 - 4Ë/ (
NIDS_PER_BLOCK
 + 1);

344 
bidx
 = 
node_ofs
 - 2 - 
dec
;

346 
dec
 = (
node_ofs
 - 
ödúe˘_blks
 - 3Ë/ (
NIDS_PER_BLOCK
 + 1);

347 
bidx
 = 
node_ofs
 - 5 - 
dec
;

349 
bidx
 = bidx * 
ADDRS_PER_BLOCK
 + 
	`ADDRS_PER_INODE
(&
node_blk
->
i
);

350 
gŸ_ô
:

351 
bidx
 +
ofs_ö_node
;

353 
	`£éoˇÀ
(
LC_ALL
, "");

354 
	`MSG
(0, " - Data offset : 0x%x (4KB), %'u (bytes)\n",

355 
bidx
, bidx * 4096);

356 
	`‰ì
(
node_blk
);

357 
	}
}

359 
	$dump_node_off£t
(
u32
 
blk_addr
)

361 
f2fs_node
 *
node_blk
;

362 
ªt
;

364 
node_blk
 = 
	`ˇŒoc
(
BLOCK_SZ
, 1);

365 
	`ASSERT
(
node_blk
);

367 
ªt
 = 
	`dev_ªad_block
(
node_blk
, 
blk_addr
);

368 
	`ASSERT
(
ªt
 >= 0);

370 
	`MSG
(0, " - Nodêoff£à : 0x%x\n", 
	`ofs_of_node
(
node_blk
));

371 
	`‰ì
(
node_blk
);

372 
	}
}

374 
	$dump_öfo_‰om_blkaddr
(
f2fs_sb_öfo
 *
sbi
, 
u32
 
blk_addr
)

376 
nid_t
 
nid
;

377 
ty≥
;

378 
f2fs_summ¨y
 
sum_íåy
;

379 
node_öfo
 
ni
, 
öo_ni
;

380 
ªt
 = 0;

382 
	`MSG
(0, "\n== Dump data from blockáddress ==\n\n");

384 i‡(
blk_addr
 < 
	`SM_I
(
sbi
)->
£g0_blkaddr
) {

385 
	`MSG
(0, "\nFS Reserved Area for SEG #0: ");

386 
ªt
 = -
EINVAL
;

387 } i‡(
blk_addr
 < 
	`SIT_I
(
sbi
)->
sô_ba£_addr
) {

388 
	`MSG
(0, "\nFS Metadata Area: ");

389 
ªt
 = -
EINVAL
;

390 } i‡(
blk_addr
 < 
	`NM_I
(
sbi
)->
«t_blkaddr
) {

391 
	`MSG
(0, "\nFS SIT Area: ");

392 
ªt
 = -
EINVAL
;

393 } i‡(
blk_addr
 < 
	`SM_I
(
sbi
)->
sß_blkaddr
) {

394 
	`MSG
(0, "\nFS NAT Area: ");

395 
ªt
 = -
EINVAL
;

396 } i‡(
blk_addr
 < 
	`SM_I
(
sbi
)->
maö_blkaddr
) {

397 
	`MSG
(0, "\nFS SSA Area: ");

398 
ªt
 = -
EINVAL
;

399 } i‡(
blk_addr
 > 
	`__íd_block_addr
(
sbi
)) {

400 
	`MSG
(0, "\nOut ofáddress space: ");

401 
ªt
 = -
EINVAL
;

404 i‡(
ªt
) {

405 
	`MSG
(0, "User data is from 0x%xÅo 0x%x\n\n",

406 
	`SM_I
(
sbi
)->
maö_blkaddr
,

407 
	`__íd_block_addr
(
sbi
));

408  
ªt
;

411 
ty≥
 = 
	`gë_sum_íåy
(
sbi
, 
blk_addr
, &
sum_íåy
);

412 
nid
 = 
	`À32_to_˝u
(
sum_íåy
.nid);

414 
	`gë_node_öfo
(
sbi
, 
nid
, &
ni
);

416 
	`DBG
(1, "Note: blkaddr = main_blkaddr + segno * 512 + offset\n");

417 
	`DBG
(1, "Block_add∏ [0x%x]\n", 
blk_addr
);

418 
	`DBG
(1, " - Segnÿ [0x%x]\n", 
	`GET_SEGNO
(
sbi
, 
blk_addr
));

419 
	`DBG
(1, " - Off£à [0x%x]\n", 
	`OFFSET_IN_SEG
(
sbi
, 
blk_addr
));

420 
	`DBG
(1, "SUM.nid [0x%x]\n", 
nid
);

421 
	`DBG
(1, "SUM.ty≥ [%s]\n", 
£g_ty≥_«me
[
ty≥
]);

422 
	`DBG
(1, "SUM.vîsi⁄ [%d]\n", 
sum_íåy
.
vîsi⁄
);

423 
	`DBG
(1, "SUM.ofs_ö_nodê [0x%x]\n", 
sum_íåy
.
ofs_ö_node
);

424 
	`DBG
(1, "NAT.blkadd∏ [0x%x]\n", 
ni
.
blk_addr
);

425 
	`DBG
(1, "NAT.öÿ [0x%x]\n", 
ni
.
öo
);

427 
	`gë_node_öfo
(
sbi
, 
ni
.
öo
, &
öo_ni
);

430 i‡(
ni
.
blk_addr
 =
NULL_ADDR
 || 
öo_ni
.blk_addr == NULL_ADDR) {

431 
	`MSG
(0, "FS Userdata Area: Obsolete block from 0x%x\n",

432 
blk_addr
);

433  -
EINVAL
;

437 i‡(
c⁄fig
.
dbg_lv
 > 0)

438 
	`dump_node_‰om_blkaddr
(
öo_ni
.
blk_addr
);

440 i‡(
ty≥
 =
SEG_TYPE_CUR_DATA
 ||Åy≥ =
SEG_TYPE_DATA
) {

441 
	`MSG
(0, "FS U£rd©®Aªa: D©®block from 0x%x\n", 
blk_addr
);

442 
	`MSG
(0, " - DirectÇode block : id = 0x%x from 0x%x\n",

443 
nid
, 
ni
.
blk_addr
);

444 
	`MSG
(0, " - Inode block : id = 0x%x from 0x%x\n",

445 
ni
.
öo
, 
öo_ni
.
blk_addr
);

446 
	`dump_node_‰om_blkaddr
(
öo_ni
.
blk_addr
);

447 
	`dump_d©a_off£t
(
ni
.
blk_addr
,

448 
	`À16_to_˝u
(
sum_íåy
.
ofs_ö_node
));

450 
	`MSG
(0, "FS U£rd©®Aªa: Nodêblock from 0x%x\n", 
blk_addr
);

451 i‡(
ni
.
öo
 =ni.
nid
) {

452 
	`MSG
(0, " - Inode block : id = 0x%x from 0x%x\n",

453 
ni
.
öo
, 
öo_ni
.
blk_addr
);

454 
	`dump_node_‰om_blkaddr
(
öo_ni
.
blk_addr
);

456 
	`MSG
(0, " - Node block : id = 0x%x from 0x%x\n",

457 
nid
, 
ni
.
blk_addr
);

458 
	`MSG
(0, " - Inode block : id = 0x%x from 0x%x\n",

459 
ni
.
öo
, 
öo_ni
.
blk_addr
);

460 
	`dump_node_‰om_blkaddr
(
öo_ni
.
blk_addr
);

461 
	`dump_node_off£t
(
ni
.
blk_addr
);

466 
	}
}

	@fsck/f2fs.h

11 #i‚de‡
_F2FS_H_


12 
	#_F2FS_H_


	)

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<°dio.h
>

17 
	~<î∫o.h
>

18 
	~<f˙é.h
>

19 
	~<°rög.h
>

20 
	~<î∫o.h
>

21 
	~<m¡ít.h
>

22 
	~<löux/ty≥s.h
>

23 
	~<sys/ty≥s.h
>

24 
	~<sys/°©.h
>

25 
	~<sys/io˘l.h
>

26 
	~<sys/mou¡.h
>

27 
	~<as£π.h
>

29 
	~<f2fs_fs.h
>

31 
	#EXIT_ERR_CODE
 (-1)

	)

32 
	#vî_a·î
(
a
, 
b
Ë(
	`ty≥check
(,á) && \

33 
	`ty≥check
(, 
b
) && \

34 (()((
a
Ë- (
b
)Ë> 0))

	)

36 
	sli°_hód
 {

37 
li°_hód
 *
	m√xt
, *
	m¥ev
;

41 
	mNAT_BITMAP
,

42 
	mSIT_BITMAP


45 
	snode_öfo
 {

46 
nid_t
 
	mnid
;

47 
nid_t
 
	möo
;

48 
u32
 
	mblk_addr
;

49 
	mvîsi⁄
;

52 
	sf2fs_nm_öfo
 {

53 
block_t
 
	m«t_blkaddr
;

54 
nid_t
 
	mmax_nid
;

55 
nid_t
 
	möô_sˇn_nid
;

56 
nid_t
 
	m√xt_sˇn_nid
;

58 
	m«t_˙t
;

59 
	mf˙t
;

61 *
	m«t_bôm≠
;

62 
	mbôm≠_size
;

65 
	s£g_íåy
 {

66 
	mvÆid_blocks
;

67 *
	mcur_vÆid_m≠
;

72 
	mck±_vÆid_blocks
;

73 *
	mck±_vÆid_m≠
;

74 
	mty≥
;

75 
	m‹ig_ty≥
;

76 
	mmtime
;

79 
	s£c_íåy
 {

80 
	mvÆid_blocks
;

83 
	ssô_öfo
 {

85 
block_t
 
	msô_ba£_addr
;

86 
block_t
 
	msô_blocks
;

87 
block_t
 
	mwrôãn_vÆid_blocks
;

88 *
	msô_bôm≠
;

89 
	mbôm≠_size
;

91 *
	mdúty_£¡rõs_bôm≠
;

92 
	mdúty_£¡rõs
;

93 
	m£¡s_≥r_block
;

94 
£g_íåy
 *
	m£¡rõs
;

95 
£c_íåy
 *
	m£c_íåõs
;

97 
	mñ≠£d_time
;

98 
	mmou¡ed_time
;

99 
	mmö_mtime
;

100 
	mmax_mtime
;

103 
	scur£g_öfo
 {

104 
f2fs_summ¨y_block
 *
	msum_blk
;

105 
	mÆloc_ty≥
;

106 
	m£gno
;

107 
	m√xt_blkoff
;

108 
	mz⁄e
;

109 
	m√xt_£gno
;

112 
	sf2fs_sm_öfo
 {

113 
sô_öfo
 *
	msô_öfo
;

114 
cur£g_öfo
 *
	mcur£g_¨øy
;

116 
block_t
 
	m£g0_blkaddr
;

117 
block_t
 
	mmaö_blkaddr
;

118 
block_t
 
	msß_blkaddr
;

120 
	m£gmít_cou¡
;

121 
	mmaö_£gmíts
;

122 
	mª£rved_£gmíts
;

123 
	movp_£gmíts
;

126 
	sf2fs_sb_öfo
 {

127 
f2fs_fsck
 *
	mfsck
;

129 
f2fs_su≥r_block
 *
	møw_su≥r
;

130 
f2fs_nm_öfo
 *
	mnm_öfo
;

131 
f2fs_sm_öfo
 *
	msm_öfo
;

132 
f2fs_checkpoöt
 *
	mck±
;

133 
	mcur_˝
;

135 
li°_hód
 
	m‹ph™_öode_li°
;

136 
	mn_‹ph™s
;

139 
	mlog_£˘‹s_≥r_block
;

140 
	mlog_blocksize
;

141 
	mblocksize
;

142 
	mroŸ_öo_num
;

143 
	mnode_öo_num
;

144 
	mmëa_öo_num
;

145 
	mlog_blocks_≥r_£g
;

146 
	mblocks_≥r_£g
;

147 
	m£gs_≥r_£c
;

148 
	m£cs_≥r_z⁄e
;

149 
	mtŸÆ_£˘i⁄s
;

150 
	mtŸÆ_node_cou¡
;

151 
	mtŸÆ_vÆid_node_cou¡
;

152 
	mtŸÆ_vÆid_öode_cou¡
;

153 
	ma˘ive_logs
;

155 
block_t
 
	mu£r_block_cou¡
;

156 
block_t
 
	mtŸÆ_vÆid_block_cou¡
;

157 
block_t
 
	mÆloc_vÆid_block_cou¡
;

158 
block_t
 
	mœ°_vÆid_block_cou¡
;

159 
u32
 
	ms_√xt_gíî©i⁄
;

161 
	mcur_vi˘im_£c
;

165 
ölöe
 
f2fs_su≥r_block
 *
	$F2FS_RAW_SUPER
(
f2fs_sb_öfo
 *
sbi
)

167  (
f2fs_su≥r_block
 *)(
sbi
->
øw_su≥r
);

168 
	}
}

170 
ölöe
 
f2fs_checkpoöt
 *
	$F2FS_CKPT
(
f2fs_sb_öfo
 *
sbi
)

172  (
f2fs_checkpoöt
 *)(
sbi
->
ck±
);

173 
	}
}

175 
ölöe
 
f2fs_fsck
 *
	$F2FS_FSCK
(
f2fs_sb_öfo
 *
sbi
)

177  (
f2fs_fsck
 *)(
sbi
->
fsck
);

178 
	}
}

180 
ölöe
 
f2fs_nm_öfo
 *
	$NM_I
(
f2fs_sb_öfo
 *
sbi
)

182  (
f2fs_nm_öfo
 *)(
sbi
->
nm_öfo
);

183 
	}
}

185 
ölöe
 
f2fs_sm_öfo
 *
	$SM_I
(
f2fs_sb_öfo
 *
sbi
)

187  (
f2fs_sm_öfo
 *)(
sbi
->
sm_öfo
);

188 
	}
}

190 
ölöe
 
sô_öfo
 *
	$SIT_I
(
f2fs_sb_öfo
 *
sbi
)

192  (
sô_öfo
 *)(
	`SM_I
(
sbi
)->sit_info);

193 
	}
}

195 
ölöe
 *
	$ölöe_d©a_addr
(
f2fs_node
 *
node_blk
)

197  (*)&(
node_blk
->
i
.
i_addr
[1]);

198 
	}
}

200 
ölöe
 
	$ofs_of_node
(
f2fs_node
 *
node_blk
)

202 
Êag
 = 
	`À32_to_˝u
(
node_blk
->
foŸî
.flag);

203  
Êag
 >> 
OFFSET_BIT_SHIFT
;

204 
	}
}

206 
ölöe
 
	$__bôm≠_size
(
f2fs_sb_öfo
 *
sbi
, 
Êag
)

208 
f2fs_checkpoöt
 *
ck±
 = 
	`F2FS_CKPT
(
sbi
);

211 i‡(
Êag
 =
NAT_BITMAP
)

212  
	`À32_to_˝u
(
ck±
->
«t_vî_bôm≠_byãsize
);

213 i‡(
Êag
 =
SIT_BITMAP
)

214  
	`À32_to_˝u
(
ck±
->
sô_vî_bôm≠_byãsize
);

217 
	}
}

219 
ölöe
 *
	$__bôm≠_±r
(
f2fs_sb_öfo
 *
sbi
, 
Êag
)

221 
f2fs_checkpoöt
 *
ck±
 = 
	`F2FS_CKPT
(
sbi
);

222 
off£t
;

223 i‡(
	`À32_to_˝u
(
	`F2FS_RAW_SUPER
(
sbi
)->
˝_∑ylﬂd
) > 0) {

224 i‡(
Êag
 =
NAT_BITMAP
)

225  &
ck±
->
sô_«t_vîsi⁄_bôm≠
;

227  ((*)
ck±
 + 
F2FS_BLKSIZE
);

229 
off£t
 = (
Êag
 =
NAT_BITMAP
) ?

230 
	`À32_to_˝u
(
ck±
->
sô_vî_bôm≠_byãsize
) : 0;

231  &
ck±
->
sô_«t_vîsi⁄_bôm≠
 + 
off£t
;

233 
	}
}

235 
ölöe
 
boﬁ
 
	$is_£t_ck±_Êags
(
f2fs_checkpoöt
 *
˝
, 
f
)

237 
ck±_Êags
 = 
	`À32_to_˝u
(
˝
->ckpt_flags);

238  
ck±_Êags
 & 
f
;

239 
	}
}

241 
ölöe
 
block_t
 
	$__°¨t_˝_addr
(
f2fs_sb_öfo
 *
sbi
)

243 
block_t
 
°¨t_addr
;

244 
f2fs_checkpoöt
 *
ck±
 = 
	`F2FS_CKPT
(
sbi
);

245 
ck±_vîsi⁄
 = 
	`À64_to_˝u
(
ck±
->
checkpoöt_vî
);

247 
°¨t_addr
 = 
	`À32_to_˝u
(
	`F2FS_RAW_SUPER
(
sbi
)->
˝_blkaddr
);

253 i‡(!(
ck±_vîsi⁄
 & 1))

254 
°¨t_addr
 +
sbi
->
blocks_≥r_£g
;

256  
°¨t_addr
;

257 
	}
}

259 
ölöe
 
block_t
 
	$__°¨t_sum_addr
(
f2fs_sb_öfo
 *
sbi
)

261  
	`À32_to_˝u
(
	`F2FS_CKPT
(
sbi
)->
˝_∑ck_°¨t_sum
);

262 
	}
}

264 
ölöe
 
block_t
 
	$__íd_block_addr
(
f2fs_sb_öfo
 *
sbi
)

266 
block_t
 
íd
 = 
	`SM_I
(
sbi
)->
maö_blkaddr
;

267  
íd
 + 
	`À64_to_˝u
(
	`F2FS_RAW_SUPER
(
sbi
)->
block_cou¡
);

268 
	}
}

270 
	#GET_ZONENO_FROM_SEGNO
(
sbi
, 
£gno
) \

271 ((
£gno
 / 
sbi
->
£gs_≥r_£c
Ë/ sbi->
£cs_≥r_z⁄e
)

	)

273 
	#IS_DATASEG
(
t
) \

274 ((
t
 =
CURSEG_HOT_DATA
Ë|| (à=
CURSEG_COLD_DATA
) || \

275 (
t
 =
CURSEG_WARM_DATA
))

	)

277 
	#IS_NODESEG
(
t
) \

278 ((
t
 =
CURSEG_HOT_NODE
Ë|| (à=
CURSEG_COLD_NODE
) || \

279 (
t
 =
CURSEG_WARM_NODE
))

	)

281 
	#GET_SUM_BLKADDR
(
sbi
, 
£gno
) \

282 ((
sbi
->
sm_öfo
->
sß_blkaddr
Ë+ 
£gno
)

	)

284 
	#GET_SEGOFF_FROM_SEG0
(
sbi
, 
blk_addr
) \

285 ((
blk_addr
Ë- 
	`SM_I
(
sbi
)->
£g0_blkaddr
)

	)

287 
	#GET_SEGNO_FROM_SEG0
(
sbi
, 
blk_addr
) \

288 (
	`GET_SEGOFF_FROM_SEG0
(
sbi
, 
blk_addr
Ë>> sbi->
log_blocks_≥r_£g
)

	)

290 
	#GET_BLKOFF_FROM_SEG0
(
sbi
, 
blk_addr
) \

291 (
	`GET_SEGOFF_FROM_SEG0
(
sbi
, 
blk_addr
Ë& (sbi->
blocks_≥r_£g
 - 1))

	)

293 
	#FREE_I_START_SEGNO
(
sbi
) \

294 
	`GET_SEGNO_FROM_SEG0
(
sbi
, 
	`SM_I
(sbi)->
maö_blkaddr
)

	)

295 
	#GET_R2L_SEGNO
(
sbi
, 
£gno
Ë(£gnÿ+ 
	`FREE_I_START_SEGNO
(sbi))

	)

297 
	#START_BLOCK
(
sbi
, 
£gno
Ë(
	`SM_I
(sbi)->
maö_blkaddr
 + \

298 (
£gno
 << 
sbi
->
log_blocks_≥r_£g
))

	)

300 
ölöe
 
cur£g_öfo
 *
	$CURSEG_I
(
f2fs_sb_öfo
 *
sbi
, 
ty≥
)

302  (
cur£g_öfo
 *)(
	`SM_I
(
sbi
)->
cur£g_¨øy
 + 
ty≥
);

303 
	}
}

305 
ölöe
 
block_t
 
	$°¨t_sum_block
(
f2fs_sb_öfo
 *
sbi
)

307  
	`__°¨t_˝_addr
(
sbi
Ë+ 
	`À32_to_˝u
(
	`F2FS_CKPT
(sbi)->
˝_∑ck_°¨t_sum
);

308 
	}
}

310 
ölöe
 
block_t
 
	$sum_blk_addr
(
f2fs_sb_öfo
 *
sbi
, 
ba£
, 
ty≥
)

312  
	`__°¨t_˝_addr
(
sbi
Ë+ 
	`À32_to_˝u
(
	`F2FS_CKPT
(sbi)->
˝_∑ck_tŸÆ_block_cou¡
)

313 - (
ba£
 + 1Ë+ 
ty≥
;

314 
	}
}

317 
	#«ts_ö_cursum
(
sum
Ë(
	`À16_to_˝u
(sum->
n_«ts
))

	)

318 
	#sôs_ö_cursum
(
sum
Ë(
	`À16_to_˝u
(sum->
n_sôs
))

	)

320 
	#«t_ö_jou∫Æ
(
sum
, 
i
Ë(sum->
«t_j
.
íåõs
[i].
√
)

	)

321 
	#nid_ö_jou∫Æ
(
sum
, 
i
Ë(sum->
«t_j
.
íåõs
[i].
nid
)

	)

322 
	#sô_ö_jou∫Æ
(
sum
, 
i
Ë(sum->
sô_j
.
íåõs
[i].
£
)

	)

323 
	#£gno_ö_jou∫Æ
(
sum
, 
i
Ë(sum->
sô_j
.
íåõs
[i].
£gno
)

	)

325 
	#SIT_ENTRY_OFFSET
(
sô_i
, 
£gno
) \

326 (
£gno
 % 
sô_i
->
£¡s_≥r_block
)

	)

327 
	#SIT_BLOCK_OFFSET
(
sô_i
, 
£gno
) \

328 (
£gno
 / 
SIT_ENTRY_PER_BLOCK
)

	)

329 
	#TOTAL_SEGS
(
sbi
Ë(
	`SM_I
(sbi)->
maö_£gmíts
)

	)

331 
ölöe
 
boﬁ
 
	$IS_VALID_NID
(
f2fs_sb_öfo
 *
sbi
, 
u32
 
nid
)

333  (
nid
 <(
NAT_ENTRY_PER_BLOCK
 *

334 
	`F2FS_RAW_SUPER
(
sbi
)->
£gmít_cou¡_«t


335 << (
sbi
->
log_blocks_≥r_£g
 - 1)));

336 
	}
}

338 
ölöe
 
boﬁ
 
	$IS_VALID_BLK_ADDR
(
f2fs_sb_öfo
 *
sbi
, 
u32
 
addr
)

340 
i
;

342 i‡(
addr
 >
	`F2FS_RAW_SUPER
(
sbi
)->
block_cou¡
 ||

343 
addr
 < 
	`SM_I
(
sbi
)->
maö_blkaddr
) {

344 
	`ASSERT_MSG
("blockádd∏[0x%x]\n", 
addr
);

348 
i
 = 0; i < 
NO_CHECK_TYPE
; i++) {

349 
cur£g_öfo
 *
cur£g
 = 
	`CURSEG_I
(
sbi
, 
i
);

351 i‡(
	`START_BLOCK
(
sbi
, 
cur£g
->
£gno
) +

352 
cur£g
->
√xt_blkoff
 =
addr
)

356 
	}
}

358 
ölöe
 
u64
 
	$BLKOFF_FROM_MAIN
(
f2fs_sb_öfo
 *
sbi
, 
u64
 
blk_addr
)

360 
	`ASSERT
(
blk_addr
 >
	`SM_I
(
sbi
)->
maö_blkaddr
);

361  
blk_addr
 - 
	`SM_I
(
sbi
)->
maö_blkaddr
;

362 
	}
}

364 
ölöe
 
u32
 
	$GET_SEGNO
(
f2fs_sb_öfo
 *
sbi
, 
u64
 
blk_addr
)

366  (
u32
)(
	`BLKOFF_FROM_MAIN
(
sbi
, 
blk_addr
)

367 >> 
sbi
->
log_blocks_≥r_£g
);

368 
	}
}

370 
ölöe
 
u32
 
	$OFFSET_IN_SEG
(
f2fs_sb_öfo
 *
sbi
, 
u64
 
blk_addr
)

372  (
u32
)(
	`BLKOFF_FROM_MAIN
(
sbi
, 
blk_addr
)

373 % (1 << 
sbi
->
log_blocks_≥r_£g
));

374 
	}
}

376 
ölöe
 
	$node_öfo_‰om_øw_«t
(
node_öfo
 *
ni
,

377 
f2fs_«t_íåy
 *
øw_«t
)

379 
ni
->
öo
 = 
	`À32_to_˝u
(
øw_«t
->ino);

380 
ni
->
blk_addr
 = 
	`À32_to_˝u
(
øw_«t
->
block_addr
);

381 
ni
->
vîsi⁄
 = 
øw_«t
->version;

382 
	}
}

384 
lookup_«t_ö_jou∫Æ
(
f2fs_sb_öfo
 *
sbi
, 
u32
 
nid
, 
f2fs_«t_íåy
 *
√
);

385 
	#IS_SUM_NODE_SEG
(
foŸî
Ë(foŸî.
íåy_ty≥
 =
SUM_TYPE_NODE
)

	)

	@fsck/fsck.c

11 
	~"fsck.h
"

13 *
	gåì_m¨k
;

14 
uöt32_t
 
	gåì_m¨k_size
 = 256;

16 
ölöe
 
	$f2fs_£t_maö_bôm≠
(
f2fs_sb_öfo
 *
sbi
, 
u32
 
blk
,

17 
ty≥
)

19 
f2fs_fsck
 *
fsck
 = 
	`F2FS_FSCK
(
sbi
);

20 
£g_íåy
 *
£
;

22 
£
 = 
	`gë_£g_íåy
(
sbi
, 
	`GET_SEGNO
(sbi, 
blk
));

23 i‡(
£
->
ty≥
 !=Åype) {

24 i‡(
ty≥
 =
CURSEG_WARM_DATA
) {

25 i‡(
£
->
ty≥
 !
CURSEG_COLD_DATA
) {

26 
	`DBG
(1, "Wrong segmentÅype [0x%x] %x -> %x",

27 
	`GET_SEGNO
(
sbi
, 
blk
), 
£
->
ty≥
,

28 
CURSEG_WARM_DATA
);

29 
£
->
ty≥
 = 
CURSEG_WARM_DATA
;

32 
	`DBG
(1, "Wrong segmentÅype [0x%x] %x -> %x",

33 
	`GET_SEGNO
(
sbi
, 
blk
), 
£
->
ty≥
,Åype);

34 
£
->
ty≥
 =Åype;

37  
	`f2fs_£t_bô
(
	`BLKOFF_FROM_MAIN
(
sbi
, 
blk
), 
fsck
->
maö_¨ó_bôm≠
);

38 
	}
}

40 
ölöe
 
	$f2fs_ã°_maö_bôm≠
(
f2fs_sb_öfo
 *
sbi
, 
u32
 
blk
)

42 
f2fs_fsck
 *
fsck
 = 
	`F2FS_FSCK
(
sbi
);

44  
	`f2fs_ã°_bô
(
	`BLKOFF_FROM_MAIN
(
sbi
, 
blk
),

45 
fsck
->
maö_¨ó_bôm≠
);

46 
	}
}

48 
ölöe
 
	$f2fs_ã°_sô_bôm≠
(
f2fs_sb_öfo
 *
sbi
, 
u32
 
blk
)

50 
f2fs_fsck
 *
fsck
 = 
	`F2FS_FSCK
(
sbi
);

52  
	`f2fs_ã°_bô
(
	`BLKOFF_FROM_MAIN
(
sbi
, 
blk
), 
fsck
->
sô_¨ó_bôm≠
);

53 
	}
}

55 
	$add_öto_h¨d_lök_li°
(
f2fs_sb_öfo
 *
sbi
,

56 
u32
 
nid
, u32 
lök_˙t
)

58 
f2fs_fsck
 *
fsck
 = 
	`F2FS_FSCK
(
sbi
);

59 
h¨d_lök_node
 *
node
 = 
NULL
, *
tmp
 = NULL, *
¥ev
 = NULL;

61 
node
 = 
	`ˇŒoc
((
h¨d_lök_node
), 1);

62 
	`ASSERT
(
node
 !
NULL
);

64 
node
->
nid
 =Çid;

65 
node
->
löks
 = 
lök_˙t
;

66 
node
->
√xt
 = 
NULL
;

68 i‡(
fsck
->
h¨d_lök_li°_hód
 =
NULL
) {

69 
fsck
->
h¨d_lök_li°_hód
 = 
node
;

70 
out
;

73 
tmp
 = 
fsck
->
h¨d_lök_li°_hód
;

76 
tmp
 && (
nid
 <Åmp->nid)) {

77 
	`ASSERT
(
tmp
->
nid
 !=Çid);

78 
¥ev
 = 
tmp
;

79 
tmp
 =Åmp->
√xt
;

82 i‡(
tmp
 =
fsck
->
h¨d_lök_li°_hód
) {

83 
node
->
√xt
 = 
tmp
;

84 
fsck
->
h¨d_lök_li°_hód
 = 
node
;

86 
¥ev
->
√xt
 = 
node
;

87 
node
->
√xt
 = 
tmp
;

90 
out
:

91 
	`DBG
(2, "öo[0x%x] ha†h¨dÜök†[0x%x]\n", 
nid
, 
lök_˙t
);

93 
	}
}

95 
	$föd_™d_dec_h¨d_lök_li°
(
f2fs_sb_öfo
 *
sbi
, 
u32
 
nid
)

97 
f2fs_fsck
 *
fsck
 = 
	`F2FS_FSCK
(
sbi
);

98 
h¨d_lök_node
 *
node
 = 
NULL
, *
¥ev
 = NULL;

100 i‡(
fsck
->
h¨d_lök_li°_hód
 =
NULL
)

101  -
EINVAL
;

103 
node
 = 
fsck
->
h¨d_lök_li°_hód
;

105 
node
 && (
nid
 <Çode->nid)) {

106 
¥ev
 = 
node
;

107 
node
 =Çode->
√xt
;

110 i‡(
node
 =
NULL
 || (
nid
 !=Çode->nid))

111  -
EINVAL
;

114 
node
->
löks
 =Çode->links - 1;

117 i‡(
node
->
löks
 == 1) {

118 i‡(
fsck
->
h¨d_lök_li°_hód
 =
node
)

119 
fsck
->
h¨d_lök_li°_hód
 = 
node
->
√xt
;

121 
¥ev
->
√xt
 = 
node
->next;

122 
	`‰ì
(
node
);

125 
	}
}

127 
	$is_vÆid_sß_node_blk
(
f2fs_sb_öfo
 *
sbi
, 
u32
 
nid
,

128 
u32
 
blk_addr
)

130 
ªt
 = 0;

131 
f2fs_summ¨y
 
sum_íåy
;

133 
ªt
 = 
	`gë_sum_íåy
(
sbi
, 
blk_addr
, &
sum_íåy
);

135 i‡(
ªt
 !
SEG_TYPE_NODE
 &&Ñë !
SEG_TYPE_CUR_NODE
) {

136 
	`ASSERT_MSG
("Summary footer isÇot forÇode segment");

137  -
EINVAL
;

140 i‡(
	`À32_to_˝u
(
sum_íåy
.
nid
) !=Çid) {

141 
	`DBG
(0, "nid [0x%x]\n", 
nid
);

142 
	`DBG
(0, "èrgë blk_add∏ [0x%x]\n", 
blk_addr
);

143 
	`DBG
(0, "summary blk_addr [0x%x]\n",

144 
	`GET_SUM_BLKADDR
(
sbi
,

145 
	`GET_SEGNO
(
sbi
, 
blk_addr
)));

146 
	`DBG
(0, "segÇo / offset [0x%x / 0x%x]\n",

147 
	`GET_SEGNO
(
sbi
, 
blk_addr
),

148 
	`OFFSET_IN_SEG
(
sbi
, 
blk_addr
));

149 
	`DBG
(0, "summary_entry.nid [0x%x]\n",

150 
	`À32_to_˝u
(
sum_íåy
.
nid
));

151 
	`DBG
(0, "-->Çodêblock'†nid [0x%x]\n", 
nid
);

152 
	`ASSERT_MSG
("InvalidÇode seg summary\n");

153  -
EINVAL
;

156 
	}
}

158 
	$is_vÆid_sß_d©a_blk
(
f2fs_sb_öfo
 *
sbi
, 
u32
 
blk_addr
,

159 
u32
 
∑ª¡_nid
, 
u16
 
idx_ö_node
, 
u8
 
vîsi⁄
)

161 
ªt
 = 0;

162 
f2fs_summ¨y
 
sum_íåy
;

164 
ªt
 = 
	`gë_sum_íåy
(
sbi
, 
blk_addr
, &
sum_íåy
);

166 i‡(
ªt
 !
SEG_TYPE_DATA
 &&Ñë !
SEG_TYPE_CUR_DATA
) {

167 
	`ASSERT_MSG
("Summary footer isÇot for data segment");

168  -
EINVAL
;

171 i‡(
	`À32_to_˝u
(
sum_íåy
.
nid
Ë!
∑ª¡_nid
 ||

172 
sum_íåy
.
vîsi⁄
 != version ||

173 
	`À16_to_˝u
(
sum_íåy
.
ofs_ö_node
Ë!
idx_ö_node
) {

175 
	`DBG
(0, "summary_entry.nid [0x%x]\n",

176 
	`À32_to_˝u
(
sum_íåy
.
nid
));

177 
	`DBG
(0, "summary_entry.version [0x%x]\n",

178 
sum_íåy
.
vîsi⁄
);

179 
	`DBG
(0, "summary_entry.ofs_in_node [0x%x]\n",

180 
	`À16_to_˝u
(
sum_íåy
.
ofs_ö_node
));

181 
	`DBG
(0, "∑ª¡Çid [0x%x]\n", 
∑ª¡_nid
);

182 
	`DBG
(0, "vîsi⁄ fromÇ© [0x%x]\n", 
vîsi⁄
);

183 
	`DBG
(0, "idx i¿∑ª¡Çodê [0x%x]\n", 
idx_ö_node
);

185 
	`DBG
(0, "T¨gë d©®blockádd∏ [0x%x]\n", 
blk_addr
);

186 
	`ASSERT_MSG
("Invalid data seg summary\n");

187  -
EINVAL
;

190 
	}
}

192 
	$ßnôy_check_nid
(
f2fs_sb_öfo
 *
sbi
, 
u32
 
nid
,

193 
f2fs_node
 *
node_blk
,

194 
FILE_TYPE
 
·y≥
, 
NODE_TYPE
 
¡y≥
,

195 
node_öfo
 *
ni
)

197 
f2fs_fsck
 *
fsck
 = 
	`F2FS_FSCK
(
sbi
);

198 
ªt
;

200 i‡(!
	`IS_VALID_NID
(
sbi
, 
nid
)) {

201 
	`ASSERT_MSG
("nid i†nŸ vÆid. [0x%x]", 
nid
);

202  -
EINVAL
;

205 
	`gë_node_öfo
(
sbi
, 
nid
, 
ni
);

206 i‡(
ni
->
blk_addr
 =
NEW_ADDR
) {

207 
	`ASSERT_MSG
("nid i†NEW_ADDR. [0x%x]", 
nid
);

208  -
EINVAL
;

211 i‡(!
	`IS_VALID_BLK_ADDR
(
sbi
, 
ni
->
blk_addr
)) {

212 
	`ASSERT_MSG
("blkaddª†i†nŸ vÆid. [0x%x]", 
ni
->
blk_addr
);

213  -
EINVAL
;

216 i‡(
	`is_vÆid_sß_node_blk
(
sbi
, 
nid
, 
ni
->
blk_addr
)) {

217 
	`ASSERT_MSG
("summ¨yÇodêblock i†nŸ vÆid. [0x%x]", 
nid
);

218  -
EINVAL
;

221 
ªt
 = 
	`dev_ªad_block
(
node_blk
, 
ni
->
blk_addr
);

222 
	`ASSERT
(
ªt
 >= 0);

224 i‡(
¡y≥
 =
TYPE_INODE
 &&

225 
node_blk
->
foŸî
.
nid
 !node_blk->foŸî.
öo
) {

226 
	`ASSERT_MSG
("nid[0x%x] footer.nid[0x%x] footer.ino[0x%x]",

227 
nid
, 
	`À32_to_˝u
(
node_blk
->
foŸî
.nid),

228 
	`À32_to_˝u
(
node_blk
->
foŸî
.
öo
));

229  -
EINVAL
;

231 i‡(
¡y≥
 !
TYPE_INODE
 &&

232 
node_blk
->
foŸî
.
nid
 =node_blk->foŸî.
öo
) {

233 
	`ASSERT_MSG
("nid[0x%x] footer.nid[0x%x] footer.ino[0x%x]",

234 
nid
, 
	`À32_to_˝u
(
node_blk
->
foŸî
.nid),

235 
	`À32_to_˝u
(
node_blk
->
foŸî
.
öo
));

236  -
EINVAL
;

239 i‡(
	`À32_to_˝u
(
node_blk
->
foŸî
.
nid
) !=Çid) {

240 
	`ASSERT_MSG
("nid[0x%x] blk_addr[0x%x] footer.nid[0x%x]",

241 
nid
, 
ni
->
blk_addr
,

242 
	`À32_to_˝u
(
node_blk
->
foŸî
.
nid
));

243  -
EINVAL
;

246 i‡(
¡y≥
 =
TYPE_XATTR
) {

247 
u32
 
Êag
 = 
	`À32_to_˝u
(
node_blk
->
foŸî
.flag);

249 i‡((
Êag
 >> 
OFFSET_BIT_SHIFT
Ë!
XATTR_NODE_OFFSET
) {

250 
	`ASSERT_MSG
("xnid[0x%x] has wrong ofs:[0x%x]",

251 
nid
, 
Êag
);

252  -
EINVAL
;

256 i‡((
¡y≥
 =
TYPE_INODE
 && 
·y≥
 =
F2FS_FT_DIR
) ||

257 (
¡y≥
 =
TYPE_XATTR
 && 
·y≥
 =
F2FS_FT_XATTR
)) {

259 i‡(
	`f2fs_ã°_maö_bôm≠
(
sbi
, 
ni
->
blk_addr
) != 0) {

260 
	`ASSERT_MSG
("DuplicatedÇode blk.Çid[0x%x][0x%x]\n",

261 
nid
, 
ni
->
blk_addr
);

262  -
EINVAL
;

267 i‡(
·y≥
 !
F2FS_FT_ORPHAN
 ||

268 
	`f2fs_ã°_bô
(
nid
, 
fsck
->
«t_¨ó_bôm≠
) != 0)

269 
	`f2fs_˛ór_bô
(
nid
, 
fsck
->
«t_¨ó_bôm≠
);

271 
	`ASSERT_MSG
("orphan or xattrÇid is duplicated [0x%x]\n",

272 
nid
);

274 i‡(
	`f2fs_ã°_sô_bôm≠
(
sbi
, 
ni
->
blk_addr
) == 0)

275 
	`ASSERT_MSG
("SIT bitmap is 0x0. blk_addr[0x%x]",

276 
ni
->
blk_addr
);

278 i‡(
	`f2fs_ã°_maö_bôm≠
(
sbi
, 
ni
->
blk_addr
) == 0) {

279 
fsck
->
chk
.
vÆid_blk_˙t
++;

280 
fsck
->
chk
.
vÆid_node_˙t
++;

283 
	}
}

285 
	$fsck_chk_x©å_blk
(
f2fs_sb_öfo
 *
sbi
, 
u32
 
öo
,

286 
u32
 
x_nid
, u32 *
blk_˙t
)

288 
f2fs_node
 *
node_blk
 = 
NULL
;

289 
node_öfo
 
ni
;

290 
ªt
 = 0;

292 i‡(
x_nid
 == 0x0)

295 
node_blk
 = (
f2fs_node
 *)
	`ˇŒoc
(
BLOCK_SZ
, 1);

296 
	`ASSERT
(
node_blk
 !
NULL
);

299 i‡(
	`ßnôy_check_nid
(
sbi
, 
x_nid
, 
node_blk
,

300 
F2FS_FT_XATTR
, 
TYPE_XATTR
, &
ni
)) {

301 
ªt
 = -
EINVAL
;

302 
out
;

305 *
blk_˙t
 = *blk_cnt + 1;

306 
	`f2fs_£t_maö_bôm≠
(
sbi
, 
ni
.
blk_addr
, 
CURSEG_COLD_NODE
);

307 
	`DBG
(2, "öo[0x%x] x_nid[0x%x]\n", 
öo
, 
x_nid
);

308 
out
:

309 
	`‰ì
(
node_blk
);

310  
ªt
;

311 
	}
}

313 
	$fsck_chk_node_blk
(
f2fs_sb_öfo
 *
sbi
, 
f2fs_öode
 *
öode
,

314 
u32
 
nid
, 
FILE_TYPE
 
·y≥
, 
NODE_TYPE
 
¡y≥
,

315 
u32
 *
blk_˙t
)

317 
node_öfo
 
ni
;

318 
f2fs_node
 *
node_blk
 = 
NULL
;

320 
node_blk
 = (
f2fs_node
 *)
	`ˇŒoc
(
BLOCK_SZ
, 1);

321 
	`ASSERT
(
node_blk
 !
NULL
);

323 i‡(
	`ßnôy_check_nid
(
sbi
, 
nid
, 
node_blk
, 
·y≥
, 
¡y≥
, &
ni
))

324 
îr
;

326 i‡(
¡y≥
 =
TYPE_INODE
) {

327 
	`fsck_chk_öode_blk
(
sbi
, 
nid
, 
·y≥
, 
node_blk
, 
blk_˙t
, &
ni
);

329 
¡y≥
) {

330 
TYPE_DIRECT_NODE
:

331 
	`f2fs_£t_maö_bôm≠
(
sbi
, 
ni
.
blk_addr
,

332 
CURSEG_WARM_NODE
);

333 
	`fsck_chk_dnode_blk
(
sbi
, 
öode
, 
nid
, 
·y≥
, 
node_blk
,

334 
blk_˙t
, &
ni
);

336 
TYPE_INDIRECT_NODE
:

337 
	`f2fs_£t_maö_bôm≠
(
sbi
, 
ni
.
blk_addr
,

338 
CURSEG_COLD_NODE
);

339 
	`fsck_chk_idnode_blk
(
sbi
, 
öode
, 
·y≥
, 
node_blk
,

340 
blk_˙t
);

342 
TYPE_DOUBLE_INDIRECT_NODE
:

343 
	`f2fs_£t_maö_bôm≠
(
sbi
, 
ni
.
blk_addr
,

344 
CURSEG_COLD_NODE
);

345 
	`fsck_chk_didnode_blk
(
sbi
, 
öode
, 
·y≥
, 
node_blk
,

346 
blk_˙t
);

349 
	`ASSERT
(0);

352 
	`‰ì
(
node_blk
);

354 
îr
:

355 
	`‰ì
(
node_blk
);

356  -
EINVAL
;

357 
	}
}

360 
	$fsck_chk_öode_blk
(
f2fs_sb_öfo
 *
sbi
, 
u32
 
nid
,

361 
FILE_TYPE
 
·y≥
, 
f2fs_node
 *
node_blk
,

362 
u32
 *
blk_˙t
, 
node_öfo
 *
ni
)

364 
f2fs_fsck
 *
fsck
 = 
	`F2FS_FSCK
(
sbi
);

365 
u32
 
chûd_˙t
 = 0, 
chûd_fûes
 = 0;

366 
NODE_TYPE
 
¡y≥
;

367 
u32
 
i_löks
 = 
	`À32_to_˝u
(
node_blk
->
i
.i_links);

368 
u64
 
i_blocks
 = 
	`À64_to_˝u
(
node_blk
->
i
.i_blocks);

369 
idx
 = 0;

370 
√ed_fix
 = 0;

371 
ªt
;

373 i‡(
	`f2fs_ã°_maö_bôm≠
(
sbi
, 
ni
->
blk_addr
) == 0)

374 
fsck
->
chk
.
vÆid_öode_˙t
++;

376 i‡(
·y≥
 =
F2FS_FT_DIR
) {

377 
	`f2fs_£t_maö_bôm≠
(
sbi
, 
ni
->
blk_addr
, 
CURSEG_HOT_NODE
);

379 i‡(
	`f2fs_ã°_maö_bôm≠
(
sbi
, 
ni
->
blk_addr
) == 0) {

380 
	`f2fs_£t_maö_bôm≠
(
sbi
, 
ni
->
blk_addr
,

381 
CURSEG_WARM_NODE
);

382 i‡(
i_löks
 > 1) {

384 
	`add_öto_h¨d_lök_li°
(
sbi
, 
nid
, 
i_löks
);

385 
fsck
->
chk
.
mu…i_h¨d_lök_fûes
++;

388 
	`DBG
(3, "[0x%x] ha†h¨dÜök†[0x%x]\n", 
nid
, 
i_löks
);

389 i‡(
	`föd_™d_dec_h¨d_lök_li°
(
sbi
, 
nid
)) {

390 
	`ASSERT_MSG
("[0x%x]Çeeds more i_links=0x%x",

391 
nid
, 
i_löks
);

392 i‡(
c⁄fig
.
fix_⁄
) {

393 
node_blk
->
i
.
i_löks
 =

394 
	`˝u_to_À32
(
i_löks
 + 1);

395 
√ed_fix
 = 1;

396 
	`FIX_MSG
("File: 0x%x "

398 
nid
, 
i_löks
, i_links + 1);

400 
check
;

407 i‡(
	`fsck_chk_x©å_blk
(
sbi
, 
nid
,

408 
	`À32_to_˝u
(
node_blk
->
i
.
i_x©å_nid
), 
blk_˙t
) &&

409 
c⁄fig
.
fix_⁄
) {

410 
node_blk
->
i
.
i_x©å_nid
 = 0;

411 
√ed_fix
 = 1;

412 
	`FIX_MSG
("Remove xattr block: 0x%x, x_nid = 0x%x",

413 
nid
, 
	`À32_to_˝u
(
node_blk
->
i
.
i_x©å_nid
));

416 i‡(
·y≥
 =
F2FS_FT_CHRDEV
 || fty≥ =
F2FS_FT_BLKDEV
 ||

417 
·y≥
 =
F2FS_FT_FIFO
 || fty≥ =
F2FS_FT_SOCK
)

418 
check
;

420 if((
node_blk
->
i
.
i_ölöe
 & 
F2FS_INLINE_DATA
)) {

421 i‡(
	`À32_to_˝u
(
node_blk
->
i
.
i_addr
[0]) != 0) {

423 
	`FIX_MSG
("inline_data has wrong 0'th block = %x",

424 
	`À32_to_˝u
(
node_blk
->
i
.
i_addr
[0]));

425 
node_blk
->
i
.
i_addr
[0] = 0;

426 
node_blk
->
i
.
i_blocks
 = 
	`˝u_to_À64
(*
blk_˙t
);

427 
√ed_fix
 = 1;

429 i‡(!(
node_blk
->
i
.
i_ölöe
 & 
F2FS_DATA_EXIST
)) {

430 
buf
[
MAX_INLINE_DATA
];

431 
	`mem£t
(
buf
, 0, 
MAX_INLINE_DATA
);

433 i‡(
	`memcmp
(
buf
, &
node_blk
->
i
.
i_addr
[1],

434 
MAX_INLINE_DATA
)) {

435 
	`FIX_MSG
("inline_data has DATA_EXIST");

436 
node_blk
->
i
.
i_ölöe
 |
F2FS_DATA_EXIST
;

437 
√ed_fix
 = 1;

440 
	`DBG
(3, "öo[0x%x] ha†ölöêd©a!\n", 
nid
);

441 
check
;

443 if((
node_blk
->
i
.
i_ölöe
 & 
F2FS_INLINE_DENTRY
)) {

444 
	`DBG
(3, "öo[0x%x] ha†ölöêdíåy!\n", 
nid
);

445 
ªt
 = 
	`fsck_chk_ölöe_díåõs
(
sbi
, 
node_blk
,

446 &
chûd_˙t
, &
chûd_fûes
);

447 i‡(
ªt
 < 0) {

449 
√ed_fix
 = 1;

451 
check
;

455 
idx
 = 0; idx < 
	`ADDRS_PER_INODE
(&
node_blk
->
i
); idx++) {

456 i‡(
	`À32_to_˝u
(
node_blk
->
i
.
i_addr
[
idx
]) != 0) {

457 
ªt
 = 
	`fsck_chk_d©a_blk
(
sbi
,

458 
	`À32_to_˝u
(
node_blk
->
i
.
i_addr
[
idx
]),

459 &
chûd_˙t
, &
chûd_fûes
,

460 (
i_blocks
 =*
blk_˙t
),

461 
·y≥
, 
nid
, 
idx
, 
ni
->
vîsi⁄
);

462 i‡(!
ªt
) {

463 *
blk_˙t
 = *blk_cnt + 1;

464 } i‡(
c⁄fig
.
fix_⁄
) {

465 
node_blk
->
i
.
i_addr
[
idx
] = 0;

466 
√ed_fix
 = 1;

467 
	`FIX_MSG
("[0x%x] i_addr[%d] = 0", 
nid
, 
idx
);

473 
idx
 = 0; idx < 5; idx++) {

474 i‡(
idx
 == 0 || idx == 1)

475 
¡y≥
 = 
TYPE_DIRECT_NODE
;

476 i‡(
idx
 == 2 || idx == 3)

477 
¡y≥
 = 
TYPE_INDIRECT_NODE
;

478 i‡(
idx
 == 4)

479 
¡y≥
 = 
TYPE_DOUBLE_INDIRECT_NODE
;

481 
	`ASSERT
(0);

483 i‡(
	`À32_to_˝u
(
node_blk
->
i
.
i_nid
[
idx
]) != 0) {

484 
ªt
 = 
	`fsck_chk_node_blk
(
sbi
, &
node_blk
->
i
,

485 
	`À32_to_˝u
(
node_blk
->
i
.
i_nid
[
idx
]),

486 
·y≥
, 
¡y≥
, 
blk_˙t
);

487 i‡(!
ªt
) {

488 *
blk_˙t
 = *blk_cnt + 1;

489 } i‡(
c⁄fig
.
fix_⁄
) {

490 
node_blk
->
i
.
i_nid
[
idx
] = 0;

491 
√ed_fix
 = 1;

492 
	`FIX_MSG
("[0x%x] i_nid[%d] = 0", 
nid
, 
idx
);

496 
check
:

497 i‡(
·y≥
 =
F2FS_FT_DIR
)

498 
	`DBG
(1, "Directory Inode: 0x%x [%s] depth: %d has %d files\n\n",

499 
	`À32_to_˝u
(
node_blk
->
foŸî
.
öo
),

500 
node_blk
->
i
.
i_«me
,

501 
	`À32_to_˝u
(
node_blk
->
i
.
i_cuºít_dïth
),

502 
chûd_fûes
);

503 i‡(
·y≥
 =
F2FS_FT_ORPHAN
)

504 
	`DBG
(1, "Orphan Inode: 0x%x [%s] i_blocks: %u\n\n",

505 
	`À32_to_˝u
(
node_blk
->
foŸî
.
öo
),

506 
node_blk
->
i
.
i_«me
,

507 (
u32
)
i_blocks
);

509 i‡(
i_blocks
 !*
blk_˙t
) {

510 
	`ASSERT_MSG
("öo: 0x%x ha†i_blocks: %08"
PRIx64
", "

512 
nid
, 
i_blocks
, *
blk_˙t
);

513 i‡(
c⁄fig
.
fix_⁄
) {

514 
node_blk
->
i
.
i_blocks
 = 
	`˝u_to_À64
(*
blk_˙t
);

515 
√ed_fix
 = 1;

516 
	`FIX_MSG
("[0x%x] i_blocks=0x%08"
PRIx64
" -> 0x%x",

517 
nid
, 
i_blocks
, *
blk_˙t
);

520 i‡(
·y≥
 =
F2FS_FT_DIR
 && 
i_löks
 !
chûd_˙t
) {

521 
	`ASSERT_MSG
("ino: 0x%x has i_links: %u butÑealÜinks: %u",

522 
nid
, 
i_löks
, 
chûd_˙t
);

523 i‡(
c⁄fig
.
fix_⁄
) {

524 
node_blk
->
i
.
i_löks
 = 
	`˝u_to_À32
(
chûd_˙t
);

525 
√ed_fix
 = 1;

526 
	`FIX_MSG
("Dir: 0x%x i_links= 0x%x -> 0x%x",

527 
nid
, 
i_löks
, 
chûd_˙t
);

531 i‡(
·y≥
 =
F2FS_FT_ORPHAN
 && 
i_löks
)

532 
	`ASSERT_MSG
("ino: 0x%x is orphan inode, but has i_links: %u",

533 
nid
, 
i_löks
);

534 i‡(
√ed_fix
) {

535 
ªt
 = 
	`dev_wrôe_block
(
node_blk
, 
ni
->
blk_addr
);

536 
	`ASSERT
(
ªt
 >= 0);

538 
	}
}

540 
	$fsck_chk_dnode_blk
(
f2fs_sb_öfo
 *
sbi
, 
f2fs_öode
 *
öode
,

541 
u32
 
nid
, 
FILE_TYPE
 
·y≥
, 
f2fs_node
 *
node_blk
,

542 
u32
 *
blk_˙t
, 
node_öfo
 *
ni
)

544 
idx
, 
ªt
;

545 
u32
 
chûd_˙t
 = 0, 
chûd_fûes
 = 0;

547 
idx
 = 0; idx < 
ADDRS_PER_BLOCK
; idx++) {

548 i‡(
	`À32_to_˝u
(
node_blk
->
dn
.
addr
[
idx
]) == 0x0)

550 
ªt
 = 
	`fsck_chk_d©a_blk
(
sbi
,

551 
	`À32_to_˝u
(
node_blk
->
dn
.
addr
[
idx
]),

552 &
chûd_˙t
, &
chûd_fûes
,

553 
	`À64_to_˝u
(
öode
->
i_blocks
Ë=*
blk_˙t
, 
·y≥
,

554 
nid
, 
idx
, 
ni
->
vîsi⁄
);

555 i‡(!
ªt
)

556 *
blk_˙t
 = *blk_cnt + 1;

559 
	}
}

561 
	$fsck_chk_idnode_blk
(
f2fs_sb_öfo
 *
sbi
, 
f2fs_öode
 *
öode
,

562 
FILE_TYPE
 
·y≥
, 
f2fs_node
 *
node_blk
, 
u32
 *
blk_˙t
)

564 
ªt
;

565 
i
 = 0;

567 
i
 = 0 ; i < 
NIDS_PER_BLOCK
; i++) {

568 i‡(
	`À32_to_˝u
(
node_blk
->
ö
.
nid
[
i
]) == 0x0)

570 
ªt
 = 
	`fsck_chk_node_blk
(
sbi
, 
öode
,

571 
	`À32_to_˝u
(
node_blk
->
ö
.
nid
[
i
]),

572 
·y≥
, 
TYPE_DIRECT_NODE
, 
blk_˙t
);

573 i‡(!
ªt
)

574 *
blk_˙t
 = *blk_cnt + 1;

575 i‡(
ªt
 =-
EINVAL
)

576 
	`¥ötf
("delete in.nid[i] = 0;\n");

579 
	}
}

581 
	$fsck_chk_didnode_blk
(
f2fs_sb_öfo
 *
sbi
, 
f2fs_öode
 *
öode
,

582 
FILE_TYPE
 
·y≥
, 
f2fs_node
 *
node_blk
, 
u32
 *
blk_˙t
)

584 
i
 = 0;

585 
ªt
 = 0;

587 
i
 = 0; i < 
NIDS_PER_BLOCK
; i++) {

588 i‡(
	`À32_to_˝u
(
node_blk
->
ö
.
nid
[
i
]) == 0x0)

590 
ªt
 = 
	`fsck_chk_node_blk
(
sbi
, 
öode
,

591 
	`À32_to_˝u
(
node_blk
->
ö
.
nid
[
i
]),

592 
·y≥
, 
TYPE_INDIRECT_NODE
, 
blk_˙t
);

593 i‡(!
ªt
)

594 *
blk_˙t
 = *blk_cnt + 1;

595 i‡(
ªt
 =-
EINVAL
)

596 
	`¥ötf
("delete in.nid[i] = 0;\n");

599 
	}
}

601 
	$¥öt_díåy
(
__u32
 
dïth
, 
__u8
 *
«me
,

602 *
bôm≠
,

603 
f2fs_dú_íåy
 *
díåy
,

604 
max
, 
idx
, 
œ°_blk
)

606 
œ°_de
 = 0;

607 
√xt_idx
 = 0;

608 
«me_Àn
;

609 
i
;

610 
bô_off£t
;

612 i‡(
c⁄fig
.
dbg_lv
 != -1)

615 
«me_Àn
 = 
	`À16_to_˝u
(
díåy
[
idx
].name_len);

616 
√xt_idx
 = 
idx
 + (
«me_Àn
 + 
F2FS_SLOT_LEN
 - 1) / F2FS_SLOT_LEN;

618 
bô_off£t
 = 
	`föd_√xt_bô
(
bôm≠
, 
max
, 
√xt_idx
);

619 i‡(
bô_off£t
 >
max
 && 
œ°_blk
)

620 
œ°_de
 = 1;

622 i‡(
åì_m¨k_size
 <
dïth
) {

623 
åì_m¨k_size
 *= 2;

624 
åì_m¨k
 = 
	`ªÆloc
—ªe_m¨k, 
åì_m¨k_size
);

627 i‡(
œ°_de
)

628 
åì_m¨k
[
dïth
] = '`';

630 
åì_m¨k
[
dïth
] = '|';

632 i‡(
åì_m¨k
[
dïth
 - 1] == '`')

633 
åì_m¨k
[
dïth
 - 1] = ' ';

636 
i
 = 1; i < 
dïth
; i++)

637 
	`¥ötf
("%¯ ", 
åì_m¨k
[
i
]);

638 
	`¥ötf
("%c-- %†0x%x\n", 
œ°_de
 ? '`' : '|',

639 
«me
, 
	`À32_to_˝u
(
díåy
[
idx
].
öo
));

640 
	}
}

642 
__chk_díåõs
(
f2fs_sb_öfo
 *
sbi
, 
u32
 *
chûd_˙t
,

643 
u32
* 
chûd_fûes
,

644 *
bôm≠
,

645 
f2fs_dú_íåy
 *
díåy
,

646 
__u8
 (*
fûíames
)[
F2FS_SLOT_LEN
],

647 
max
, 
œ°_blk
)

649 
f2fs_fsck
 *
	gfsck
 = 
F2FS_FSCK
(
sbi
);

650 
FILE_TYPE
 
	g·y≥
;

651 
	gdíåõs
 = 0;

652 
u32
 
	gblk_˙t
;

653 
u8
 *
	g«me
;

654 
u32
 
	ghash_code
;

655 
u16
 
	g«me_Àn
;;

656 
	gªt
 = 0;

657 
	gfixed
 = 0;

658 
	gi
;

660 
	gi
 = 0; i < 
	gmax
;) {

661 i‡(
ã°_bô
(
i
, 
bôm≠
) == 0) {

662 
i
++;

665 i‡(!
IS_VALID_NID
(
sbi
, 
À32_to_˝u
(
díåy
[
i
].
öo
))) {

666 
DBG
(1, "Bad dentry 0x%x with invalid NID/ino 0x%x",

667 
i
, 
À32_to_˝u
(
díåy
[i].
öo
));

668 i‡(
	gc⁄fig
.
	gfix_⁄
) {

669 
FIX_MSG
("Clear bad dentry 0x%x with bad ino 0x%x",

670 
i
, 
À32_to_˝u
(
díåy
[i].
öo
));

671 
˛ór_bô
(
i
, 
bôm≠
);

672 
	gi
++;

673 
	gfixed
 = 1;

677 
	g·y≥
 = 
díåy
[
i
].
fûe_ty≥
;

678 i‡((
	g·y≥
 <
F2FS_FT_UNKNOWN
 || 
·y≥
 > 
F2FS_FT_LAST_FILE_TYPE
Ë&& 
c⁄fig
.
fix_⁄
) {

679 
DBG
(1, "Bad dentry 0x%x with unexpected ftype 0x%x",

680 
i
, 
·y≥
);

681 i‡(
	gc⁄fig
.
	gfix_⁄
) {

682 
FIX_MSG
("Clear bad dentry 0x%x with bad ftype 0x%x",

683 
i
, 
·y≥
);

684 
˛ór_bô
(
i
, 
bôm≠
);

685 
	gi
++;

686 
	gfixed
 = 1;

690 
	g«me_Àn
 = 
À16_to_˝u
(
díåy
[
i
].
«me_Àn
);

691 
	g«me
 = 
ˇŒoc
(
«me_Àn
 + 1, 1);

692 
mem˝y
(
«me
, 
fûíames
[
i
], 
«me_Àn
);

693 
	ghash_code
 = 
f2fs_díåy_hash
((c⁄° *)
«me
,

694 
«me_Àn
);

697 i‡(
À32_to_˝u
(
díåy
[
i
].
hash_code
) != hash_code) {

698 
díåy
[
i
].
hash_code
 = hash_code;

699 
	gfixed
 = 1;

700 
FIX_MSG
("hash_code[%d] o‡%s", 
i
, 
«me
);

704 i‡(
	g·y≥
 =
F2FS_FT_DIR
) {

705 *
chûd_˙t
 = *child_cnt + 1;

706 i‡((
	g«me
[0] ='.' && 
«me_Àn
 == 1) ||

707 (
«me
[0] == '.' &&Çame[1] == '.' &&

708 
«me_Àn
 == 2)) {

709 
i
++;

710 
‰ì
(
«me
);

715 
DBG
(1, "[%3u]-[0x%x]Çame[%s]Üen[0x%x] ino[0x%x]Åype[0x%x]\n",

716 
fsck
->
díåy_dïth
, 
i
, 
«me
, 
«me_Àn
,

717 
À32_to_˝u
(
díåy
[
i
].
öo
),

718 
díåy
[
i
].
fûe_ty≥
);

720 
¥öt_díåy
(
fsck
->
díåy_dïth
, 
«me
, 
bôm≠
,

721 
díåy
, 
max
, 
i
, 
œ°_blk
);

723 
	gblk_˙t
 = 1;

724 
	gªt
 = 
fsck_chk_node_blk
(
sbi
,

725 
NULL
, 
À32_to_˝u
(
díåy
[
i
].
öo
),

726 
·y≥
, 
TYPE_INODE
, &
blk_˙t
);

728 i‡(
	gªt
 && 
	gc⁄fig
.
	gfix_⁄
) {

729 
	gj
;

730 
	g¶Ÿs
 = (
«me_Àn
 + 
F2FS_SLOT_LEN
 - 1) /

731 
F2FS_SLOT_LEN
;

732 
	gj
 = 0; j < 
	g¶Ÿs
; j++)

733 
˛ór_bô
(
i
 + 
j
, 
bôm≠
);

734 
FIX_MSG
("Unlink [0x%x] - %sÜen[0x%x],Åype[0x%x]",

735 
À32_to_˝u
(
díåy
[
i
].
öo
),

736 
«me
, 
«me_Àn
,

737 
díåy
[
i
].
fûe_ty≥
);

738 
	gi
 +
¶Ÿs
;

739 
‰ì
(
«me
);

740 
	gfixed
 = 1;

744 
	gi
 +(
«me_Àn
 + 
F2FS_SLOT_LEN
 - 1) / F2FS_SLOT_LEN;

745 
	gdíåõs
++;

746 *
	gchûd_fûes
 = *
chûd_fûes
 + 1;

747 
‰ì
(
«me
);

749  
	gfixed
 ? -1 : 
díåõs
;

752 
	$fsck_chk_ölöe_díåõs
(
f2fs_sb_öfo
 *
sbi
,

753 
f2fs_node
 *
node_blk
, 
u32
 *
chûd_˙t
, u32 *
chûd_fûes
)

755 
f2fs_fsck
 *
fsck
 = 
	`F2FS_FSCK
(
sbi
);

756 
f2fs_ölöe_díåy
 *
de_blk
;

757 
díåõs
;

759 
de_blk
 = 
	`ölöe_d©a_addr
(
node_blk
);

760 
	`ASSERT
(
de_blk
 !
NULL
);

762 
fsck
->
díåy_dïth
++;

763 
díåõs
 = 
	`__chk_díåõs
(
sbi
, 
chûd_˙t
, 
chûd_fûes
,

764 (*)
de_blk
->
díåy_bôm≠
,

765 
de_blk
->
díåy
, de_blk->
fûíame
,

766 
NR_INLINE_DENTRY
, 1);

767 i‡(
díåõs
 < 0) {

768 
	`DBG
(1, "[%3d] Inline Dentry Block Fixed hash_codes\n\n",

769 
fsck
->
díåy_dïth
);

771 
	`DBG
(1, "[%3d] Inline Dentry Block Done : "

773 
fsck
->
díåy_dïth
, 
díåõs
,

774 ()
NR_INLINE_DENTRY
, 
F2FS_NAME_LEN
);

776 
fsck
->
díåy_dïth
--;

777  
díåõs
;

778 
	}
}

780 
	$fsck_chk_díåy_blk
(
f2fs_sb_öfo
 *
sbi
, 
u32
 
blk_addr
,

781 
u32
 *
chûd_˙t
, u32 *
chûd_fûes
, 
œ°_blk
)

783 
f2fs_fsck
 *
fsck
 = 
	`F2FS_FSCK
(
sbi
);

784 
f2fs_díåy_block
 *
de_blk
;

785 
díåõs
, 
ªt
;

787 
de_blk
 = (
f2fs_díåy_block
 *)
	`ˇŒoc
(
BLOCK_SZ
, 1);

788 
	`ASSERT
(
de_blk
 !
NULL
);

790 
ªt
 = 
	`dev_ªad_block
(
de_blk
, 
blk_addr
);

791 
	`ASSERT
(
ªt
 >= 0);

793 
fsck
->
díåy_dïth
++;

794 
díåõs
 = 
	`__chk_díåõs
(
sbi
, 
chûd_˙t
, 
chûd_fûes
,

795 (*)
de_blk
->
díåy_bôm≠
,

796 
de_blk
->
díåy
, de_blk->
fûíame
,

797 
NR_DENTRY_IN_BLOCK
, 
œ°_blk
);

799 i‡(
díåõs
 < 0) {

800 
ªt
 = 
	`dev_wrôe_block
(
de_blk
, 
blk_addr
);

801 
	`ASSERT
(
ªt
 >= 0);

802 
	`DBG
(1, "[%3d] Dentry Block [0x%x] Fixed hash_codes\n\n",

803 
fsck
->
díåy_dïth
, 
blk_addr
);

805 
	`DBG
(1, "[%3d] Dentry Block [0x%x] Done : "

807 
fsck
->
díåy_dïth
, 
blk_addr
, 
díåõs
,

808 
NR_DENTRY_IN_BLOCK
, 
F2FS_NAME_LEN
);

810 
fsck
->
díåy_dïth
--;

811 
	`‰ì
(
de_blk
);

813 
	}
}

815 
	$fsck_chk_d©a_blk
(
f2fs_sb_öfo
 *
sbi
, 
u32
 
blk_addr
,

816 
u32
 *
chûd_˙t
, u32 *
chûd_fûes
, 
œ°_blk
,

817 
FILE_TYPE
 
·y≥
, 
u32
 
∑ª¡_nid
, 
u16
 
idx_ö_node
, 
u8
 
vî
)

819 
f2fs_fsck
 *
fsck
 = 
	`F2FS_FSCK
(
sbi
);

822 i‡(
blk_addr
 =
NEW_ADDR
) {

823 
fsck
->
chk
.
vÆid_blk_˙t
++;

827 i‡(!
	`IS_VALID_BLK_ADDR
(
sbi
, 
blk_addr
)) {

828 
	`ASSERT_MSG
("blkaddª†i†nŸ vÆid. [0x%x]", 
blk_addr
);

829  -
EINVAL
;

832 i‡(
	`is_vÆid_sß_d©a_blk
(
sbi
, 
blk_addr
, 
∑ª¡_nid
,

833 
idx_ö_node
, 
vî
)) {

834 
	`ASSERT_MSG
("summary data block isÇot valid. [0x%x]",

835 
∑ª¡_nid
);

836  -
EINVAL
;

839 i‡(
	`f2fs_ã°_sô_bôm≠
(
sbi
, 
blk_addr
) == 0)

840 
	`ASSERT_MSG
("SIT bôm≠ i†0x0. blk_addr[0x%x]", 
blk_addr
);

842 i‡(
	`f2fs_ã°_maö_bôm≠
(
sbi
, 
blk_addr
) != 0)

843 
	`ASSERT_MSG
("Duplicated data [0x%x].Önid[0x%x] idx[0x%x]",

844 
blk_addr
, 
∑ª¡_nid
, 
idx_ö_node
);

847 
fsck
->
chk
.
vÆid_blk_˙t
++;

849 i‡(
·y≥
 =
F2FS_FT_DIR
) {

850 
	`f2fs_£t_maö_bôm≠
(
sbi
, 
blk_addr
, 
CURSEG_HOT_DATA
);

851  
	`fsck_chk_díåy_blk
(
sbi
, 
blk_addr
, 
chûd_˙t
,

852 
chûd_fûes
, 
œ°_blk
);

854 
	`f2fs_£t_maö_bôm≠
(
sbi
, 
blk_addr
, 
CURSEG_WARM_DATA
);

857 
	}
}

859 
	$fsck_chk_‹ph™_node
(
f2fs_sb_öfo
 *
sbi
)

861 
u32
 
blk_˙t
 = 0;

862 
block_t
 
°¨t_blk
, 
‹ph™_blkaddr
, 
i
, 
j
;

863 
f2fs_‹ph™_block
 *
‹ph™_blk
;

864 
f2fs_checkpoöt
 *
ck±
 = 
	`F2FS_CKPT
(
sbi
);

866 i‡(!
	`is_£t_ck±_Êags
(
ck±
, 
CP_ORPHAN_PRESENT_FLAG
))

869 
°¨t_blk
 = 
	`__°¨t_˝_addr
(
sbi
) + 1 +

870 
	`À32_to_˝u
(
	`F2FS_RAW_SUPER
(
sbi
)->
˝_∑ylﬂd
);

871 
‹ph™_blkaddr
 = 
	`__°¨t_sum_addr
(
sbi
) - 1;

872 
‹ph™_blk
 = 
	`ˇŒoc
(
BLOCK_SZ
, 1);

874 
i
 = 0; i < 
‹ph™_blkaddr
; i++) {

875 
ªt
 = 
	`dev_ªad_block
(
‹ph™_blk
, 
°¨t_blk
 + 
i
);

877 
	`ASSERT
(
ªt
 >= 0);

879 
j
 = 0; j < 
	`À32_to_˝u
(
‹ph™_blk
->
íåy_cou¡
); j++) {

880 
nid_t
 
öo
 = 
	`À32_to_˝u
(
‹ph™_blk
->öo[
j
]);

881 
	`DBG
(1, "[%3d] inÿ[0x%x]\n", 
i
, 
öo
);

882 i‡(
c⁄fig
.
fix_⁄
) {

883 
	`FIX_MSG
("Discard orphan inodes: ino [0x%x]",

884 
öo
);

887 
blk_˙t
 = 1;

888 
	`fsck_chk_node_blk
(
sbi
, 
NULL
, 
öo
,

889 
F2FS_FT_ORPHAN
, 
TYPE_INODE
, &
blk_˙t
);

891 
	`mem£t
(
‹ph™_blk
, 0, 
BLOCK_SZ
);

893 
	`‰ì
(
‹ph™_blk
);

894 
	}
}

896 
	$fsck_öô
(
f2fs_sb_öfo
 *
sbi
)

898 
f2fs_fsck
 *
fsck
 = 
	`F2FS_FSCK
(
sbi
);

899 
f2fs_sm_öfo
 *
sm_i
 = 
	`SM_I
(
sbi
);

910 
fsck
->
ƒ_maö_blks
 = 
sm_i
->
maö_£gmíts
 << 
sbi
->
log_blocks_≥r_£g
;

911 
fsck
->
maö_¨ó_bôm≠_sz
 = (fsck->
ƒ_maö_blks
 + 7) / 8;

912 
fsck
->
maö_¨ó_bôm≠
 = 
	`ˇŒoc
(fsck->
maö_¨ó_bôm≠_sz
, 1);

913 
	`ASSERT
(
fsck
->
maö_¨ó_bôm≠
 !
NULL
);

915 
	`buûd_«t_¨ó_bôm≠
(
sbi
);

917 
	`buûd_sô_¨ó_bôm≠
(
sbi
);

919 
åì_m¨k
 = 
	`ˇŒoc
(
åì_m¨k_size
, 1);

920 
	`ASSERT
(
åì_m¨k
 !
NULL
);

921 
	}
}

923 
	$fix_«t_íåõs
(
f2fs_sb_öfo
 *
sbi
)

925 
f2fs_fsck
 *
fsck
 = 
	`F2FS_FSCK
(
sbi
);

926 
u32
 
i
;

928 
i
 = 0; i < 
fsck
->
ƒ_«t_íåõs
; i++)

929 i‡(
	`f2fs_ã°_bô
(
i
, 
fsck
->
«t_¨ó_bôm≠
) != 0)

930 
	`nuŒify_«t_íåy
(
sbi
, 
i
);

931 
	}
}

933 
	$fix_checkpoöt
(
f2fs_sb_öfo
 *
sbi
)

935 
f2fs_fsck
 *
fsck
 = 
	`F2FS_FSCK
(
sbi
);

936 
f2fs_su≥r_block
 *
øw_sb
 = 
sbi
->
øw_su≥r
;

937 
f2fs_checkpoöt
 *
ckp
 = 
	`F2FS_CKPT
(
sbi
);

938 
˝_blk_no
;

939 
u32
 
i
;

940 
ªt
;

941 
u_öt32_t
 
¸c
 = 0;

943 
ckp
->
ck±_Êags
 = 
	`˝u_to_À32
(
CP_UMOUNT_FLAG
);

944 
ckp
->
˝_∑ck_tŸÆ_block_cou¡
 =

945 
	`˝u_to_À32
(8 + 
	`À32_to_˝u
(
øw_sb
->
˝_∑ylﬂd
));

946 
ckp
->
˝_∑ck_°¨t_sum
 = 
	`˝u_to_À32
(1 +

947 
	`À32_to_˝u
(
øw_sb
->
˝_∑ylﬂd
));

949 
ckp
->
‰ì_£gmít_cou¡
 = 
	`˝u_to_À32
(
fsck
->
chk
.
‰ì_£gs
);

950 
ckp
->
vÆid_block_cou¡
 = 
	`˝u_to_À32
(
fsck
->
chk
.
vÆid_blk_˙t
);

951 
ckp
->
vÆid_node_cou¡
 = 
	`˝u_to_À32
(
fsck
->
chk
.
vÆid_node_˙t
);

952 
ckp
->
vÆid_öode_cou¡
 = 
	`˝u_to_À32
(
fsck
->
chk
.
vÆid_öode_˙t
);

954 
¸c
 = 
	`f2fs_ˇl_¸c32
(
F2FS_SUPER_MAGIC
, 
ckp
, 
CHECKSUM_OFFSET
);

955 *((
__À32
 *)((*)
ckp
 + 
CHECKSUM_OFFSET
)) =

956 
	`˝u_to_À32
(
¸c
);

958 
˝_blk_no
 = 
	`À32_to_˝u
(
øw_sb
->
˝_blkaddr
);

959 i‡(
sbi
->
cur_˝
 == 2)

960 
˝_blk_no
 +1 << 
	`À32_to_˝u
(
øw_sb
->
log_blocks_≥r_£g
);

962 
ªt
 = 
	`dev_wrôe_block
(
ckp
, 
˝_blk_no
++);

963 
	`ASSERT
(
ªt
 >= 0);

965 
i
 = 0; i < 
	`À32_to_˝u
(
øw_sb
->
˝_∑ylﬂd
); i++) {

966 
ªt
 = 
	`dev_wrôe_block
(((*)
ckp
Ë+ 
i
 * 
F2FS_BLKSIZE
,

967 
˝_blk_no
++);

968 
	`ASSERT
(
ªt
 >= 0);

971 
i
 = 0; i < 
NO_CHECK_TYPE
; i++) {

972 
cur£g_öfo
 *
cur£g
 = 
	`CURSEG_I
(
sbi
, 
i
);

974 
ªt
 = 
	`dev_wrôe_block
(
cur£g
->
sum_blk
, 
˝_blk_no
++);

975 
	`ASSERT
(
ªt
 >= 0);

978 
ªt
 = 
	`dev_wrôe_block
(
ckp
, 
˝_blk_no
++);

979 
	`ASSERT
(
ªt
 >= 0);

980 
	}
}

982 
	$check_cur£g_off£t
(
f2fs_sb_öfo
 *
sbi
)

984 
i
;

986 
i
 = 0; i < 
NO_CHECK_TYPE
; i++) {

987 
cur£g_öfo
 *
cur£g
 = 
	`CURSEG_I
(
sbi
, 
i
);

988 
£g_íåy
 *
£
;

990 
£
 = 
	`gë_£g_íåy
(
sbi
, 
cur£g
->
£gno
);

991 i‡(
	`f2fs_ã°_bô
(
cur£g
->
√xt_blkoff
,

992 (c⁄° *)
£
->
cur_vÆid_m≠
) == 1) {

993 
	`ASSERT_MSG
("Nexàblock off£ài†nŸ fªe,Åy≥:%d", 
i
);

994  -
EINVAL
;

998 
	}
}

1000 
	$check_sô_ty≥s
(
f2fs_sb_öfo
 *
sbi
)

1002 
i
;

1003 
îr
 = 0;

1005 
i
 = 0; i < 
	`TOTAL_SEGS
(
sbi
); i++) {

1006 
£g_íåy
 *
£
;

1008 
£
 = 
	`gë_£g_íåy
(
sbi
, 
i
);

1009 i‡(
£
->
‹ig_ty≥
 !£->
ty≥
) {

1010 i‡(
£
->
‹ig_ty≥
 =
CURSEG_COLD_DATA
) {

1011 
£
->
ty≥
 = se->
‹ig_ty≥
;

1013 
	`FIX_MSG
("Wrong segmentÅype [0x%x] %x -> %x",

1014 
i
, 
£
->
‹ig_ty≥
, se->
ty≥
);

1015 
îr
 = -
EINVAL
;

1019  
îr
;

1020 
	}
}

1022 
	$fsck_vîify
(
f2fs_sb_öfo
 *
sbi
)

1024 
i
 = 0;

1025 
ªt
 = 0;

1026 
u32
 
ƒ_uƒef_nid
 = 0;

1027 
f2fs_fsck
 *
fsck
 = 
	`F2FS_FSCK
(
sbi
);

1028 
h¨d_lök_node
 *
node
 = 
NULL
;

1030 
	`¥ötf
("\n");

1032 
i
 = 0; i < 
fsck
->
ƒ_«t_íåõs
; i++) {

1033 i‡(
	`f2fs_ã°_bô
(
i
, 
fsck
->
«t_¨ó_bôm≠
) != 0) {

1034 
	`¥ötf
("NID[0x%x] i†uƒóchabÀ\n", 
i
);

1035 
ƒ_uƒef_nid
++;

1039 i‡(
fsck
->
h¨d_lök_li°_hód
 !
NULL
) {

1040 
node
 = 
fsck
->
h¨d_lök_li°_hód
;

1041 
node
) {

1042 
	`¥ötf
("NID[0x%x] has [0x%x] more unreachableÜinks\n",

1043 
node
->
nid
,Çode->
löks
);

1044 
node
 =Çode->
√xt
;

1046 
c⁄fig
.
bug_⁄
 = 1;

1049 
	`¥ötf
("[FSCK] UnreachableÇatÉntries ");

1050 i‡(
ƒ_uƒef_nid
 == 0x0) {

1051 
	`¥ötf
(" [Ok..] [0x%x]\n", 
ƒ_uƒef_nid
);

1053 
	`¥ötf
(" [Faû] [0x%x]\n", 
ƒ_uƒef_nid
);

1054 
ªt
 = 
EXIT_ERR_CODE
;

1055 
c⁄fig
.
bug_⁄
 = 1;

1058 
	`¥ötf
("[FSCK] SIT valid block bitmap checking ");

1059 i‡(
	`memcmp
(
fsck
->
sô_¨ó_bôm≠
, fsck->
maö_¨ó_bôm≠
,

1060 
fsck
->
sô_¨ó_bôm≠_sz
) == 0x0) {

1061 
	`¥ötf
("[Ok..]\n");

1063 
	`¥ötf
("[Fail]\n");

1064 
ªt
 = 
EXIT_ERR_CODE
;

1065 
c⁄fig
.
bug_⁄
 = 1;

1068 
	`¥ötf
("[FSCK] HardÜink checking forÑegular file ");

1069 i‡(
fsck
->
h¨d_lök_li°_hód
 =
NULL
) {

1070 
	`¥ötf
(" [Ok..] [0x%x]\n", 
fsck
->
chk
.
mu…i_h¨d_lök_fûes
);

1072 
	`¥ötf
(" [Faû] [0x%x]\n", 
fsck
->
chk
.
mu…i_h¨d_lök_fûes
);

1073 
ªt
 = 
EXIT_ERR_CODE
;

1074 
c⁄fig
.
bug_⁄
 = 1;

1077 
	`¥ötf
("[FSCK] valid_block_count matching with CP ");

1078 i‡(
sbi
->
tŸÆ_vÆid_block_cou¡
 =
fsck
->
chk
.
vÆid_blk_˙t
) {

1079 
	`¥ötf
(" [Ok..] [0x%x]\n", (
u32
)
fsck
->
chk
.
vÆid_blk_˙t
);

1081 
	`¥ötf
(" [Faû] [0x%x]\n", (
u32
)
fsck
->
chk
.
vÆid_blk_˙t
);

1082 
ªt
 = 
EXIT_ERR_CODE
;

1083 
c⁄fig
.
bug_⁄
 = 1;

1086 
	`¥ötf
("[FSCK] valid_node_count matcing with CP (deÜookup) ");

1087 i‡(
sbi
->
tŸÆ_vÆid_node_cou¡
 =
fsck
->
chk
.
vÆid_node_˙t
) {

1088 
	`¥ötf
(" [Ok..] [0x%x]\n", 
fsck
->
chk
.
vÆid_node_˙t
);

1090 
	`¥ötf
(" [Faû] [0x%x]\n", 
fsck
->
chk
.
vÆid_node_˙t
);

1091 
ªt
 = 
EXIT_ERR_CODE
;

1092 
c⁄fig
.
bug_⁄
 = 1;

1095 
	`¥ötf
("[FSCK] valid_node_count matcing with CP (natÜookup) ");

1096 i‡(
sbi
->
tŸÆ_vÆid_node_cou¡
 =
fsck
->
chk
.
vÆid_«t_íåy_˙t
) {

1097 
	`¥ötf
(" [Ok..] [0x%x]\n", 
fsck
->
chk
.
vÆid_«t_íåy_˙t
);

1099 
	`¥ötf
(" [Faû] [0x%x]\n", 
fsck
->
chk
.
vÆid_«t_íåy_˙t
);

1100 
ªt
 = 
EXIT_ERR_CODE
;

1101 
c⁄fig
.
bug_⁄
 = 1;

1104 
	`¥ötf
("[FSCK] valid_inode_count matched with CP ");

1105 i‡(
sbi
->
tŸÆ_vÆid_öode_cou¡
 =
fsck
->
chk
.
vÆid_öode_˙t
) {

1106 
	`¥ötf
(" [Ok..] [0x%x]\n", 
fsck
->
chk
.
vÆid_öode_˙t
);

1108 
	`¥ötf
(" [Faû] [0x%x]\n", 
fsck
->
chk
.
vÆid_öode_˙t
);

1109 
ªt
 = 
EXIT_ERR_CODE
;

1110 
c⁄fig
.
bug_⁄
 = 1;

1113 
	`¥ötf
("[FSCK] free segment_count matched with CP ");

1114 i‡(
	`À32_to_˝u
(
	`F2FS_CKPT
(
sbi
)->
‰ì_£gmít_cou¡
) ==

1115 
fsck
->
chk
.
sô_‰ì_£gs
) {

1116 
	`¥ötf
(" [Ok..] [0x%x]\n", 
fsck
->
chk
.
sô_‰ì_£gs
);

1118 
	`¥ötf
(" [Faû] [0x%x]\n", 
fsck
->
chk
.
sô_‰ì_£gs
);

1119 
ªt
 = 
EXIT_ERR_CODE
;

1120 
c⁄fig
.
bug_⁄
 = 1;

1123 
	`¥ötf
("[FSCK]Çext block offset is free ");

1124 i‡(
	`check_cur£g_off£t
(
sbi
) == 0) {

1125 
	`¥ötf
(" [Ok..]\n");

1127 
	`¥ötf
(" [Fail]\n");

1128 
ªt
 = 
EXIT_ERR_CODE
;

1129 
c⁄fig
.
bug_⁄
 = 1;

1132 
	`¥ötf
("[FSCK] SITÅypes ");

1133 i‡(
	`check_sô_ty≥s
(
sbi
) == 0) {

1134 
	`¥ötf
(" [Ok..]\n");

1136 
	`¥ötf
(" [Fail]\n");

1137 
ªt
 = 
EXIT_ERR_CODE
;

1138 
c⁄fig
.
bug_⁄
 = 1;

1141 
	`¥ötf
("[FSCK] other corrupted bugs ");

1142 i‡(
c⁄fig
.
bug_⁄
 == 0) {

1143 
	`¥ötf
(" [Ok..]\n");

1145 
	`¥ötf
(" [Fail]\n");

1146 
ªt
 = 
EXIT_ERR_CODE
;

1150 i‡(
c⁄fig
.
bug_⁄
 && c⁄fig.
fix_⁄
) {

1151 
	`fix_«t_íåõs
(
sbi
);

1152 
	`ªwrôe_sô_¨ó_bôm≠
(
sbi
);

1153 
	`fix_checkpoöt
(
sbi
);

1155  
ªt
;

1156 
	}
}

1158 
	$fsck_‰ì
(
f2fs_sb_öfo
 *
sbi
)

1160 
f2fs_fsck
 *
fsck
 = 
	`F2FS_FSCK
(
sbi
);

1161 i‡(
fsck
->
maö_¨ó_bôm≠
)

1162 
	`‰ì
(
fsck
->
maö_¨ó_bôm≠
);

1164 i‡(
fsck
->
«t_¨ó_bôm≠
)

1165 
	`‰ì
(
fsck
->
«t_¨ó_bôm≠
);

1167 i‡(
fsck
->
sô_¨ó_bôm≠
)

1168 
	`‰ì
(
fsck
->
sô_¨ó_bôm≠
);

1170 i‡(
åì_m¨k
)

1171 
	`‰ì
(
åì_m¨k
);

1172 
	}
}

	@fsck/fsck.h

11 #i‚de‡
_FSCK_H_


12 
	#_FSCK_H_


	)

14 
	~"f2fs.h
"

17 
	s‹ph™_öfo
 {

18 
u32
 
	mƒ_öodes
;

19 
u32
 *
	möo_li°
;

22 
	sf2fs_fsck
 {

23 
f2fs_sb_öfo
 
	msbi
;

25 
‹ph™_öfo
 
	m‹ph™i
;

26 
	schk_ªsu…
 {

27 
u64
 
	mvÆid_blk_˙t
;

28 
u32
 
	mvÆid_«t_íåy_˙t
;

29 
u32
 
	mvÆid_node_˙t
;

30 
u32
 
	mvÆid_öode_˙t
;

31 
u32
 
	mmu…i_h¨d_lök_fûes
;

32 
u64
 
	msô_vÆid_blocks
;

33 
u32
 
	msô_‰ì_£gs
;

34 
u32
 
	m‰ì_£gs
;

35 } 
	mchk
;

37 
h¨d_lök_node
 *
	mh¨d_lök_li°_hód
;

39 *
	mmaö_£g_ußge
;

40 *
	mmaö_¨ó_bôm≠
;

41 *
	m«t_¨ó_bôm≠
;

42 *
	msô_¨ó_bôm≠
;

44 
u64
 
	mmaö_¨ó_bôm≠_sz
;

45 
u32
 
	m«t_¨ó_bôm≠_sz
;

46 
u32
 
	msô_¨ó_bôm≠_sz
;

48 
u64
 
	mƒ_maö_blks
;

49 
u32
 
	mƒ_«t_íåõs
;

51 
u32
 
	mdíåy_dïth
;

54 
	#BLOCK_SZ
 4096

	)

55 
	sblock
 {

56 
	mbuf
[
BLOCK_SZ
];

59 
	eNODE_TYPE
 {

60 
	mTYPE_INODE
 = 37,

61 
	mTYPE_DIRECT_NODE
 = 43,

62 
	mTYPE_INDIRECT_NODE
 = 53,

63 
	mTYPE_DOUBLE_INDIRECT_NODE
 = 67,

64 
	mTYPE_XATTR
 = 77

67 
	sh¨d_lök_node
 {

68 
u32
 
	mnid
;

69 
u32
 
	mlöks
;

70 
h¨d_lök_node
 *
	m√xt
;

73 
	e£g_ty≥
 {

74 
	mSEG_TYPE_DATA
,

75 
	mSEG_TYPE_CUR_DATA
,

76 
	mSEG_TYPE_NODE
,

77 
	mSEG_TYPE_CUR_NODE
,

78 
	mSEG_TYPE_MAX
,

81 
fsck_chk_‹ph™_node
(
f2fs_sb_öfo
 *);

82 
fsck_chk_node_blk
(
f2fs_sb_öfo
 *, 
f2fs_öode
 *, 
u32
,

83 
FILE_TYPE
, 
NODE_TYPE
, 
u32
 *);

84 
fsck_chk_öode_blk
(
f2fs_sb_öfo
 *, 
u32
, 
FILE_TYPE
,

85 
f2fs_node
 *, 
u32
 *, 
node_öfo
 *);

86 
fsck_chk_dnode_blk
(
f2fs_sb_öfo
 *, 
f2fs_öode
 *,

87 
u32
, 
FILE_TYPE
, 
f2fs_node
 *, u32 *,

88 
node_öfo
 *);

89 
fsck_chk_idnode_blk
(
f2fs_sb_öfo
 *, 
f2fs_öode
 *,

90 
FILE_TYPE
, 
f2fs_node
 *, 
u32
 *);

91 
fsck_chk_didnode_blk
(
f2fs_sb_öfo
 *, 
f2fs_öode
 *,

92 
FILE_TYPE
, 
f2fs_node
 *, 
u32
 *);

93 
fsck_chk_d©a_blk
(
f2fs_sb_öfo
 *
sbi
, 
u32
, u32 *, u32 *,

94 , 
FILE_TYPE
, 
u32
, 
u16
, 
u8
);

95 
fsck_chk_díåy_blk
(
f2fs_sb_öfo
 *, 
u32
, u32 *, u32 *, );

96 
fsck_chk_ölöe_díåõs
(
f2fs_sb_öfo
 *, 
f2fs_node
 *,

97 
u32
 *, u32 *);

99 
¥öt_node_öfo
(
f2fs_node
 *);

100 
¥öt_öode_öfo
(
f2fs_öode
 *, );

101 
£g_íåy
 *
gë_£g_íåy
(
f2fs_sb_öfo
 *, );

102 
gë_sum_block
(
f2fs_sb_öfo
 *, ,

103 
f2fs_summ¨y_block
 *);

104 
gë_sum_íåy
(
f2fs_sb_öfo
 *, 
u32
, 
f2fs_summ¨y
 *);

105 
gë_node_öfo
(
f2fs_sb_öfo
 *, 
nid_t
, 
node_öfo
 *);

106 
nuŒify_«t_íåy
(
f2fs_sb_öfo
 *, 
u32
);

107 
ªwrôe_sô_¨ó_bôm≠
(
f2fs_sb_öfo
 *);

108 
buûd_«t_¨ó_bôm≠
(
f2fs_sb_öfo
 *);

109 
buûd_sô_¨ó_bôm≠
(
f2fs_sb_öfo
 *);

110 
fsck_öô
(
f2fs_sb_öfo
 *);

111 
fsck_vîify
(
f2fs_sb_öfo
 *);

112 
fsck_‰ì
(
f2fs_sb_öfo
 *);

113 
f2fs_do_mou¡
(
f2fs_sb_öfo
 *);

114 
f2fs_do_umou¡
(
f2fs_sb_öfo
 *);

117 
	sdump_›ti⁄
 {

118 
nid_t
 
	mnid
;

119 
	m°¨t_sô
;

120 
	míd_sô
;

121 
	m°¨t_sß
;

122 
	míd_sß
;

123 
öt32_t
 
	mblk_addr
;

126 
sô_dump
(
f2fs_sb_öfo
 *, , );

127 
sß_dump
(
f2fs_sb_öfo
 *, , );

128 
dump_node
(
f2fs_sb_öfo
 *, 
nid_t
);

129 
dump_öfo_‰om_blkaddr
(
f2fs_sb_öfo
 *, 
u32
);

	@fsck/main.c

11 
	~"fsck.h
"

12 
	~<libgí.h
>

14 
f2fs_fsck
 
	ggfsck
;

16 
	$fsck_ußge
()

18 
	`MSG
(0, "\nUsage: fsck.f2fs [options] device\n");

19 
	`MSG
(0, "[options]:\n");

20 
	`MSG
(0, " -a check/fixÖotential corruption,Ñeported by f2fs\n");

21 
	`MSG
(0, " -d debugÜevel [default:0]\n");

22 
	`MSG
(0, " -f check/fixÉntireÖartition\n");

23 
	`MSG
(0, " -t show directoryÅree [-d -1]\n");

24 
	`exô
(1);

25 
	}
}

27 
	$dump_ußge
()

29 
	`MSG
(0, "\nUsage: dump.f2fs [options] device\n");

30 
	`MSG
(0, "[options]:\n");

31 
	`MSG
(0, " -d debugÜevel [default:0]\n");

32 
	`MSG
(0, " -i inodeÇo (hex)\n");

33 
	`MSG
(0, " -s [SIT dump segno from #1~#2 (decimal), foráll 0~-1]\n");

34 
	`MSG
(0, " -a [SSA dump segno from #1~#2 (decimal), foráll 0~-1]\n");

35 
	`MSG
(0, " -b blk_addr (in 4KB)\n");

37 
	`exô
(1);

38 
	}
}

40 
	$f2fs_∑r£_›ti⁄s
(
¨gc
, *
¨gv
[])

42 
›ti⁄
 = 0;

43 *
¥og
 = 
	`ba£«me
(
¨gv
[0]);

45 i‡(!
	`°rcmp
("fsck.f2fs", 
¥og
)) {

46 c⁄° *
›ti⁄_°rög
 = "ad:ft";

48 
c⁄fig
.
func
 = 
FSCK
;

49 (
›ti⁄
 = 
	`gë›t
(
¨gc
, 
¨gv
, 
›ti⁄_°rög
)Ë!
EOF
) {

50 
›ti⁄
) {

52 
c⁄fig
.
auto_fix
 = 1;

53 
	`MSG
(0, "Info: FixÅheÑeported corruption.\n");

56 
c⁄fig
.
dbg_lv
 = 
	`©oi
(
›èrg
);

57 
	`MSG
(0, "Info: DebugÜevel = %d\n",

58 
c⁄fig
.
dbg_lv
);

61 
c⁄fig
.
fix_⁄
 = 1;

62 
	`MSG
(0, "Info: ForceÅo fix corruption\n");

65 
c⁄fig
.
dbg_lv
 = -1;

68 
	`MSG
(0, "\tEº‹: Unknow¿›ti⁄ %c\n", 
›ti⁄
);

69 
	`fsck_ußge
();

73 } i‡(!
	`°rcmp
("dump.f2fs", 
¥og
)) {

74 c⁄° *
›ti⁄_°rög
 = "d:i:s:a:b:";

75 
dump_›ti⁄
 
dump_›t
 = {

76 .
nid
 = 3,

77 .
°¨t_sô
 = -1,

78 .
íd_sô
 = -1,

79 .
°¨t_sß
 = -1,

80 .
íd_sß
 = -1,

81 .
blk_addr
 = -1,

84 
c⁄fig
.
func
 = 
DUMP
;

85 (
›ti⁄
 = 
	`gë›t
(
¨gc
, 
¨gv
, 
›ti⁄_°rög
)Ë!
EOF
) {

86 
ªt
 = 0;

88 
›ti⁄
) {

90 
c⁄fig
.
dbg_lv
 = 
	`©oi
(
›èrg
);

91 
	`MSG
(0, "Info: DebugÜevel = %d\n",

92 
c⁄fig
.
dbg_lv
);

95 i‡(
	`°∫cmp
(
›èrg
, "0x", 2))

96 
ªt
 = 
	`ssˇnf
(
›èrg
, "%d",

97 &
dump_›t
.
nid
);

99 
ªt
 = 
	`ssˇnf
(
›èrg
, "%x",

100 &
dump_›t
.
nid
);

103 
ªt
 = 
	`ssˇnf
(
›èrg
, "%d~%d",

104 &
dump_›t
.
°¨t_sô
,

105 &
dump_›t
.
íd_sô
);

108 
ªt
 = 
	`ssˇnf
(
›èrg
, "%d~%d",

109 &
dump_›t
.
°¨t_sß
,

110 &
dump_›t
.
íd_sß
);

113 i‡(
	`°∫cmp
(
›èrg
, "0x", 2))

114 
ªt
 = 
	`ssˇnf
(
›èrg
, "%d",

115 &
dump_›t
.
blk_addr
);

117 
ªt
 = 
	`ssˇnf
(
›èrg
, "%x",

118 &
dump_›t
.
blk_addr
);

121 
	`MSG
(0, "\tEº‹: Unknow¿›ti⁄ %c\n", 
›ti⁄
);

122 
	`dump_ußge
();

125 
	`ASSERT
(
ªt
 >= 0);

128 
c⁄fig
.
¥iv©e
 = &
dump_›t
;

131 i‡((
›töd
 + 1Ë!
¨gc
) {

132 
	`MSG
(0, "\tError: DeviceÇot specified\n");

133 i‡(
c⁄fig
.
func
 =
FSCK
)

134 
	`fsck_ußge
();

135 i‡(
c⁄fig
.
func
 =
DUMP
)

136 
	`dump_ußge
();

138 
c⁄fig
.
devi˚_«me
 = 
¨gv
[
›töd
];

139 
	}
}

141 
	$do_fsck
(
f2fs_sb_öfo
 *
sbi
)

143 
u32
 
blk_˙t
;

145 
	`fsck_öô
(
sbi
);

147 
	`fsck_chk_‹ph™_node
(
sbi
);

150 
blk_˙t
 = 1;

151 
	`fsck_chk_node_blk
(
sbi
, 
NULL
, sbi->
roŸ_öo_num
,

152 
F2FS_FT_DIR
, 
TYPE_INODE
, &
blk_˙t
);

153 
	`fsck_vîify
(
sbi
);

154 
	`fsck_‰ì
(
sbi
);

155 
	}
}

157 
	$do_dump
(
f2fs_sb_öfo
 *
sbi
)

159 
dump_›ti⁄
 *
›t
 = (dump_›ti⁄ *)
c⁄fig
.
¥iv©e
;

161 
	`fsck_öô
(
sbi
);

163 i‡(
›t
->
íd_sô
 == -1)

164 
›t
->
íd_sô
 = 
	`SM_I
(
sbi
)->
maö_£gmíts
;

165 i‡(
›t
->
íd_sß
 == -1)

166 
›t
->
íd_sß
 = 
	`SM_I
(
sbi
)->
maö_£gmíts
;

167 i‡(
›t
->
°¨t_sô
 != -1)

168 
	`sô_dump
(
sbi
, 
›t
->
°¨t_sô
, o±->
íd_sô
);

169 i‡(
›t
->
°¨t_sß
 != -1)

170 
	`sß_dump
(
sbi
, 
›t
->
°¨t_sß
, o±->
íd_sß
);

171 i‡(
›t
->
blk_addr
 != -1) {

172 
	`dump_öfo_‰om_blkaddr
(
sbi
, 
›t
->
blk_addr
);

173 
˛ónup
;

175 
	`dump_node
(
sbi
, 
›t
->
nid
);

176 
˛ónup
:

177 
	`fsck_‰ì
(
sbi
);

178 
	}
}

180 
	$maö
(
¨gc
, **
¨gv
)

182 
f2fs_sb_öfo
 *
sbi
;

183 
ªt
 = 0;

185 
	`f2fs_öô_c⁄figuøti⁄
(&
c⁄fig
);

187 
	`f2fs_∑r£_›ti⁄s
(
¨gc
, 
¨gv
);

189 i‡(
	`f2fs_dev_is_umou¡ed
(&
c⁄fig
) < 0)

193 i‡(
	`f2fs_gë_devi˚_öfo
(&
c⁄fig
) < 0)

195 
fsck_agaö
:

196 
	`mem£t
(&
gfsck
, 0, (gfsck));

197 
gfsck
.
sbi
.
fsck
 = &gfsck;

198 
sbi
 = &
gfsck
.sbi;

200 
ªt
 = 
	`f2fs_do_mou¡
(
sbi
);

201 i‡(
ªt
 == 1) {

202 
	`‰ì
(
sbi
->
ck±
);

203 
	`‰ì
(
sbi
->
øw_su≥r
);

204 
out
;

205 } i‡(
ªt
 < 0)

208 
c⁄fig
.
func
) {

209 
FSCK
:

210 
	`do_fsck
(
sbi
);

212 
DUMP
:

213 
	`do_dump
(
sbi
);

217 
	`f2fs_do_umou¡
(
sbi
);

218 
out
:

219 i‡(
c⁄fig
.
func
 =
FSCK
 && c⁄fig.
bug_⁄
) {

220 i‡(
c⁄fig
.
fix_⁄
 =0 && c⁄fig.
auto_fix
 == 0) {

221 
™s
[255] = {0};

222 
ªåy
:

223 
	`¥ötf
("Do you wantÅo fixÅhisÖartition? [Y/N] ");

224 
ªt
 = 
	`sˇnf
("%s", 
™s
);

225 
	`ASSERT
(
ªt
 >= 0);

226 i‡(!
	`°rˇ£cmp
(
™s
, "y"))

227 
c⁄fig
.
fix_⁄
 = 1;

228 i‡(!
	`°rˇ£cmp
(
™s
, "n"))

229 
c⁄fig
.
fix_⁄
 = 0;

231 
ªåy
;

233 i‡(
c⁄fig
.
fix_⁄
)

234 
fsck_agaö
;

237 
	`f2fs_föÆize_devi˚
(&
c⁄fig
);

239 
	`¥ötf
("\nDone.\n");

241 
	}
}

	@fsck/mount.c

11 
	~"fsck.h
"

12 
	~<loˇÀ.h
>

14 
	$¥öt_öode_öfo
(
f2fs_öode
 *
öode
, 
«me
)

16 
i
 = 0;

17 
«mñí
 = 
	`À32_to_˝u
(
öode
->
i_«mñí
);

19 i‡(
«me
 && 
«mñí
) {

20 
öode
->
i_«me
[
«mñí
] = '\0';

21 
	`MSG
(0, " - Fûê«mê : %s\n", 
öode
->
i_«me
);

22 
	`£éoˇÀ
(
LC_ALL
, "");

23 
	`MSG
(0, " - File size : %'llu (bytes)\n",

24 
	`À64_to_˝u
(
öode
->
i_size
));

28 
	`DISP_u32
(
öode
, 
i_mode
);

29 
	`DISP_u32
(
öode
, 
i_uid
);

30 
	`DISP_u32
(
öode
, 
i_gid
);

31 
	`DISP_u32
(
öode
, 
i_löks
);

32 
	`DISP_u64
(
öode
, 
i_size
);

33 
	`DISP_u64
(
öode
, 
i_blocks
);

35 
	`DISP_u64
(
öode
, 
i_©ime
);

36 
	`DISP_u32
(
öode
, 
i_©ime_n£c
);

37 
	`DISP_u64
(
öode
, 
i_˘ime
);

38 
	`DISP_u32
(
öode
, 
i_˘ime_n£c
);

39 
	`DISP_u64
(
öode
, 
i_mtime
);

40 
	`DISP_u32
(
öode
, 
i_mtime_n£c
);

42 
	`DISP_u32
(
öode
, 
i_gíî©i⁄
);

43 
	`DISP_u32
(
öode
, 
i_cuºít_dïth
);

44 
	`DISP_u32
(
öode
, 
i_x©å_nid
);

45 
	`DISP_u32
(
öode
, 
i_Êags
);

46 
	`DISP_u32
(
öode
, 
i_ölöe
);

47 
	`DISP_u32
(
öode
, 
i_pöo
);

49 i‡(
«mñí
) {

50 
	`DISP_u32
(
öode
, 
i_«mñí
);

51 
öode
->
i_«me
[
«mñí
] = '\0';

52 
	`DISP_utf
(
öode
, 
i_«me
);

55 
	`¥ötf
("i_ext: fofs:%x blkaddr:%xÜen:%x\n",

56 
öode
->
i_ext
.
fofs
,

57 
öode
->
i_ext
.
blk_addr
,

58 
öode
->
i_ext
.
Àn
);

60 
	`DISP_u32
(
öode
, 
i_addr
[0]);

61 
	`DISP_u32
(
öode
, 
i_addr
[1]);

62 
	`DISP_u32
(
öode
, 
i_addr
[2]);

63 
	`DISP_u32
(
öode
, 
i_addr
[3]);

65 
i
 = 4; i < 
	`ADDRS_PER_INODE
(
öode
); i++) {

66 i‡(
öode
->
i_addr
[
i
] != 0x0) {

67 
	`¥ötf
("i_addr[0x%x]Öoints data block\r\t\t[0x%4x]\n",

68 
i
, 
öode
->
i_addr
[i]);

73 
	`DISP_u32
(
öode
, 
i_nid
[0]);

74 
	`DISP_u32
(
öode
, 
i_nid
[1]);

75 
	`DISP_u32
(
öode
, 
i_nid
[2]);

76 
	`DISP_u32
(
öode
, 
i_nid
[3]);

77 
	`DISP_u32
(
öode
, 
i_nid
[4]);

79 
	`¥ötf
("\n");

80 
	}
}

82 
	$¥öt_node_öfo
(
f2fs_node
 *
node_block
)

84 
nid_t
 
öo
 = 
	`À32_to_˝u
(
node_block
->
foŸî
.ino);

85 
nid_t
 
nid
 = 
	`À32_to_˝u
(
node_block
->
foŸî
.nid);

87 i‡(
öo
 =
nid
) {

88 
	`DBG
(0, "NodêID [0x%x:%u] i†öode\n", 
nid
,Çid);

89 
	`¥öt_öode_öfo
(&
node_block
->
i
, 0);

91 
i
;

92 
u32
 *
dump_blk
 = (u32 *)
node_block
;

93 
	`DBG
(0, "Node ID [0x%x:%u] is directÇode or indirectÇode.\n",

94 
nid
,Çid);

95 
i
 = 0; i <= 10; i++)

96 
	`MSG
(0, "[%d]\t\t\t[0x%8x : %d]\n",

97 
i
, 
dump_blk
[i], dump_blk[i]);

99 
	}
}

101 
	$¥öt_øw_sb_öfo
(
f2fs_sb_öfo
 *
sbi
)

103 
f2fs_su≥r_block
 *
sb
 = 
	`F2FS_RAW_SUPER
(
sbi
);

105 i‡(!
c⁄fig
.
dbg_lv
)

108 
	`¥ötf
("\n");

109 
	`¥ötf
("+--------------------------------------------------------+\n");

110 
	`¥ötf
("| Super block |\n");

111 
	`¥ötf
("+--------------------------------------------------------+\n");

113 
	`DISP_u32
(
sb
, 
magic
);

114 
	`DISP_u32
(
sb
, 
maj‹_vî
);

115 
	`DISP_u32
(
sb
, 
mö‹_vî
);

116 
	`DISP_u32
(
sb
, 
log_£˘‹size
);

117 
	`DISP_u32
(
sb
, 
log_£˘‹s_≥r_block
);

119 
	`DISP_u32
(
sb
, 
log_blocksize
);

120 
	`DISP_u32
(
sb
, 
log_blocks_≥r_£g
);

121 
	`DISP_u32
(
sb
, 
£gs_≥r_£c
);

122 
	`DISP_u32
(
sb
, 
£cs_≥r_z⁄e
);

123 
	`DISP_u32
(
sb
, 
checksum_off£t
);

124 
	`DISP_u64
(
sb
, 
block_cou¡
);

126 
	`DISP_u32
(
sb
, 
£˘i⁄_cou¡
);

127 
	`DISP_u32
(
sb
, 
£gmít_cou¡
);

128 
	`DISP_u32
(
sb
, 
£gmít_cou¡_ck±
);

129 
	`DISP_u32
(
sb
, 
£gmít_cou¡_sô
);

130 
	`DISP_u32
(
sb
, 
£gmít_cou¡_«t
);

132 
	`DISP_u32
(
sb
, 
£gmít_cou¡_sß
);

133 
	`DISP_u32
(
sb
, 
£gmít_cou¡_maö
);

134 
	`DISP_u32
(
sb
, 
£gmít0_blkaddr
);

136 
	`DISP_u32
(
sb
, 
˝_blkaddr
);

137 
	`DISP_u32
(
sb
, 
sô_blkaddr
);

138 
	`DISP_u32
(
sb
, 
«t_blkaddr
);

139 
	`DISP_u32
(
sb
, 
sß_blkaddr
);

140 
	`DISP_u32
(
sb
, 
maö_blkaddr
);

142 
	`DISP_u32
(
sb
, 
roŸ_öo
);

143 
	`DISP_u32
(
sb
, 
node_öo
);

144 
	`DISP_u32
(
sb
, 
mëa_öo
);

145 
	`DISP_u32
(
sb
, 
˝_∑ylﬂd
);

146 
	`DISP
("%s", 
sb
, 
vîsi⁄
);

147 
	`¥ötf
("\n");

148 
	}
}

150 
	$¥öt_ck±_öfo
(
f2fs_sb_öfo
 *
sbi
)

152 
f2fs_checkpoöt
 *
˝
 = 
	`F2FS_CKPT
(
sbi
);

154 i‡(!
c⁄fig
.
dbg_lv
)

157 
	`¥ötf
("\n");

158 
	`¥ötf
("+--------------------------------------------------------+\n");

159 
	`¥ötf
("| Checkpoint |\n");

160 
	`¥ötf
("+--------------------------------------------------------+\n");

162 
	`DISP_u64
(
˝
, 
checkpoöt_vî
);

163 
	`DISP_u64
(
˝
, 
u£r_block_cou¡
);

164 
	`DISP_u64
(
˝
, 
vÆid_block_cou¡
);

165 
	`DISP_u32
(
˝
, 
rsvd_£gmít_cou¡
);

166 
	`DISP_u32
(
˝
, 
ovî¥ov_£gmít_cou¡
);

167 
	`DISP_u32
(
˝
, 
‰ì_£gmít_cou¡
);

169 
	`DISP_u32
(
˝
, 
Æloc_ty≥
[
CURSEG_HOT_NODE
]);

170 
	`DISP_u32
(
˝
, 
Æloc_ty≥
[
CURSEG_WARM_NODE
]);

171 
	`DISP_u32
(
˝
, 
Æloc_ty≥
[
CURSEG_COLD_NODE
]);

172 
	`DISP_u32
(
˝
, 
cur_node_£gno
[0]);

173 
	`DISP_u32
(
˝
, 
cur_node_£gno
[1]);

174 
	`DISP_u32
(
˝
, 
cur_node_£gno
[2]);

176 
	`DISP_u32
(
˝
, 
cur_node_blkoff
[0]);

177 
	`DISP_u32
(
˝
, 
cur_node_blkoff
[1]);

178 
	`DISP_u32
(
˝
, 
cur_node_blkoff
[2]);

181 
	`DISP_u32
(
˝
, 
Æloc_ty≥
[
CURSEG_HOT_DATA
]);

182 
	`DISP_u32
(
˝
, 
Æloc_ty≥
[
CURSEG_WARM_DATA
]);

183 
	`DISP_u32
(
˝
, 
Æloc_ty≥
[
CURSEG_COLD_DATA
]);

184 
	`DISP_u32
(
˝
, 
cur_d©a_£gno
[0]);

185 
	`DISP_u32
(
˝
, 
cur_d©a_£gno
[1]);

186 
	`DISP_u32
(
˝
, 
cur_d©a_£gno
[2]);

188 
	`DISP_u32
(
˝
, 
cur_d©a_blkoff
[0]);

189 
	`DISP_u32
(
˝
, 
cur_d©a_blkoff
[1]);

190 
	`DISP_u32
(
˝
, 
cur_d©a_blkoff
[2]);

192 
	`DISP_u32
(
˝
, 
ck±_Êags
);

193 
	`DISP_u32
(
˝
, 
˝_∑ck_tŸÆ_block_cou¡
);

194 
	`DISP_u32
(
˝
, 
˝_∑ck_°¨t_sum
);

195 
	`DISP_u32
(
˝
, 
vÆid_node_cou¡
);

196 
	`DISP_u32
(
˝
, 
vÆid_öode_cou¡
);

197 
	`DISP_u32
(
˝
, 
√xt_‰ì_nid
);

198 
	`DISP_u32
(
˝
, 
sô_vî_bôm≠_byãsize
);

199 
	`DISP_u32
(
˝
, 
«t_vî_bôm≠_byãsize
);

200 
	`DISP_u32
(
˝
, 
checksum_off£t
);

201 
	`DISP_u64
(
˝
, 
ñ≠£d_time
);

203 
	`DISP_u32
(
˝
, 
sô_«t_vîsi⁄_bôm≠
[0]);

204 
	`¥ötf
("\n\n");

205 
	}
}

207 
	$ßnôy_check_øw_su≥r
(
f2fs_su≥r_block
 *
øw_su≥r
)

209 
blocksize
;

211 i‡(
F2FS_SUPER_MAGIC
 !
	`À32_to_˝u
(
øw_su≥r
->
magic
)) {

215 i‡(
F2FS_BLKSIZE
 !
PAGE_CACHE_SIZE
) {

219 
blocksize
 = 1 << 
	`À32_to_˝u
(
øw_su≥r
->
log_blocksize
);

220 i‡(
F2FS_BLKSIZE
 !
blocksize
) {

224 i‡(
F2FS_LOG_SECTOR_SIZE
 !
	`À32_to_˝u
(
øw_su≥r
->
log_£˘‹size
)) {

228 i‡(
F2FS_LOG_SECTORS_PER_BLOCK
 !=

229 
	`À32_to_˝u
(
øw_su≥r
->
log_£˘‹s_≥r_block
)) {

234 
	}
}

236 
	$vÆid©e_su≥r_block
(
f2fs_sb_öfo
 *
sbi
, 
block
)

238 
u64
 
off£t
;

240 
sbi
->
øw_su≥r
 = 
	`mÆloc
((
f2fs_su≥r_block
));

242 i‡(
block
 == 0)

243 
off£t
 = 
F2FS_SUPER_OFFSET
;

245 
off£t
 = 
F2FS_BLKSIZE
 + 
F2FS_SUPER_OFFSET
;

247 i‡(
	`dev_ªad
(
sbi
->
øw_su≥r
, 
off£t
, (
f2fs_su≥r_block
)))

250 i‡(!
	`ßnôy_check_øw_su≥r
(
sbi
->
øw_su≥r
)) {

252 i‡(
c⁄fig
.
kd
 >= 0) {

253 
	`dev_ªad_vîsi⁄
(
c⁄fig
.
vîsi⁄
, 0, 
VERSION_LEN
);

254 
	`gë_kî√l_vîsi⁄
(
c⁄fig
.
vîsi⁄
);

256 
	`mem£t
(
c⁄fig
.
vîsi⁄
, 0, 
VERSION_LEN
);

260 
	`mem˝y
(
c⁄fig
.
sb_vîsi⁄
, 
sbi
->
øw_su≥r
->
vîsi⁄
, 
VERSION_LEN
);

261 
	`gë_kî√l_vîsi⁄
(
c⁄fig
.
sb_vîsi⁄
);

262 
	`mem˝y
(
c⁄fig
.
öô_vîsi⁄
, 
sbi
->
øw_su≥r
->öô_vîsi⁄, 
VERSION_LEN
);

263 
	`gë_kî√l_vîsi⁄
(
c⁄fig
.
öô_vîsi⁄
);

265 
	`MSG
(0, "Info: MKFS vîsi⁄\¿ \"%s\"\n", 
c⁄fig
.
öô_vîsi⁄
);

266 
	`MSG
(0, "Info: FSCK version\n from \"%s\"\nÅo \"%s\"\n",

267 
c⁄fig
.
sb_vîsi⁄
, c⁄fig.
vîsi⁄
);

268 i‡(
	`memcmp
(
c⁄fig
.
sb_vîsi⁄
, c⁄fig.
vîsi⁄
, 
VERSION_LEN
)) {

269 
ªt
;

271 
	`mem˝y
(
sbi
->
øw_su≥r
->
vîsi⁄
,

272 
c⁄fig
.
vîsi⁄
, 
VERSION_LEN
);

273 
ªt
 = 
	`dev_wrôe
(
sbi
->
øw_su≥r
, 
off£t
,

274 (
f2fs_su≥r_block
));

275 
	`ASSERT
(
ªt
 >= 0);

277 
c⁄fig
.
auto_fix
 = 0;

278 
c⁄fig
.
fix_⁄
 = 1;

283 
	`‰ì
(
sbi
->
øw_su≥r
);

284 
	`MSG
(0, "\tC™'àfödá vÆid F2FS su≥rblockáà0x%x\n", 
block
);

286  -
EINVAL
;

287 
	}
}

289 
	$öô_sb_öfo
(
f2fs_sb_öfo
 *
sbi
)

291 
f2fs_su≥r_block
 *
øw_su≥r
 = 
sbi
->raw_super;

293 
sbi
->
log_£˘‹s_≥r_block
 =

294 
	`À32_to_˝u
(
øw_su≥r
->
log_£˘‹s_≥r_block
);

295 
sbi
->
log_blocksize
 = 
	`À32_to_˝u
(
øw_su≥r
->log_blocksize);

296 
sbi
->
blocksize
 = 1 << sbi->
log_blocksize
;

297 
sbi
->
log_blocks_≥r_£g
 = 
	`À32_to_˝u
(
øw_su≥r
->log_blocks_per_seg);

298 
sbi
->
blocks_≥r_£g
 = 1 << sbi->
log_blocks_≥r_£g
;

299 
sbi
->
£gs_≥r_£c
 = 
	`À32_to_˝u
(
øw_su≥r
->segs_per_sec);

300 
sbi
->
£cs_≥r_z⁄e
 = 
	`À32_to_˝u
(
øw_su≥r
->secs_per_zone);

301 
sbi
->
tŸÆ_£˘i⁄s
 = 
	`À32_to_˝u
(
øw_su≥r
->
£˘i⁄_cou¡
);

302 
sbi
->
tŸÆ_node_cou¡
 =

303 (
	`À32_to_˝u
(
øw_su≥r
->
£gmít_cou¡_«t
) / 2)

304 * 
sbi
->
blocks_≥r_£g
 * 
NAT_ENTRY_PER_BLOCK
;

305 
sbi
->
roŸ_öo_num
 = 
	`À32_to_˝u
(
øw_su≥r
->
roŸ_öo
);

306 
sbi
->
node_öo_num
 = 
	`À32_to_˝u
(
øw_su≥r
->
node_öo
);

307 
sbi
->
mëa_öo_num
 = 
	`À32_to_˝u
(
øw_su≥r
->
mëa_öo
);

308 
sbi
->
cur_vi˘im_£c
 = 
NULL_SEGNO
;

310 
	}
}

312 *
	$vÆid©e_checkpoöt
(
f2fs_sb_öfo
 *
sbi
, 
block_t
 
˝_addr
,

313 *
vîsi⁄
)

315 *
˝_∑ge_1
, *
˝_∑ge_2
;

316 
f2fs_checkpoöt
 *
˝_block
;

317 
blk_size
 = 
sbi
->
blocksize
;

318 
cur_vîsi⁄
 = 0, 
¥e_vîsi⁄
 = 0;

319 
¸c
 = 0;

320 
size_t
 
¸c_off£t
;

323 
˝_∑ge_1
 = 
	`mÆloc
(
PAGE_SIZE
);

324 i‡(
	`dev_ªad_block
(
˝_∑ge_1
, 
˝_addr
) < 0)

325  
NULL
;

327 
˝_block
 = (
f2fs_checkpoöt
 *)
˝_∑ge_1
;

328 
¸c_off£t
 = 
	`À32_to_˝u
(
˝_block
->
checksum_off£t
);

329 i‡(
¸c_off£t
 >
blk_size
)

330 
övÆid_˝1
;

332 
¸c
 = *(*)((*)
˝_block
 + 
¸c_off£t
);

333 i‡(
	`f2fs_¸c_vÆid
(
¸c
, 
˝_block
, 
¸c_off£t
))

334 
övÆid_˝1
;

336 
¥e_vîsi⁄
 = 
	`À64_to_˝u
(
˝_block
->
checkpoöt_vî
);

339 
˝_∑ge_2
 = 
	`mÆloc
(
PAGE_SIZE
);

340 
˝_addr
 +
	`À32_to_˝u
(
˝_block
->
˝_∑ck_tŸÆ_block_cou¡
) - 1;

342 i‡(
	`dev_ªad_block
(
˝_∑ge_2
, 
˝_addr
) < 0)

343 
övÆid_˝2
;

345 
˝_block
 = (
f2fs_checkpoöt
 *)
˝_∑ge_2
;

346 
¸c_off£t
 = 
	`À32_to_˝u
(
˝_block
->
checksum_off£t
);

347 i‡(
¸c_off£t
 >
blk_size
)

348 
övÆid_˝2
;

350 
¸c
 = *(*)((*)
˝_block
 + 
¸c_off£t
);

351 i‡(
	`f2fs_¸c_vÆid
(
¸c
, 
˝_block
, 
¸c_off£t
))

352 
övÆid_˝2
;

354 
cur_vîsi⁄
 = 
	`À64_to_˝u
(
˝_block
->
checkpoöt_vî
);

356 i‡(
cur_vîsi⁄
 =
¥e_vîsi⁄
) {

357 *
vîsi⁄
 = 
cur_vîsi⁄
;

358 
	`‰ì
(
˝_∑ge_2
);

359  
˝_∑ge_1
;

362 
övÆid_˝2
:

363 
	`‰ì
(
˝_∑ge_2
);

364 
övÆid_˝1
:

365 
	`‰ì
(
˝_∑ge_1
);

366  
NULL
;

367 
	}
}

369 
	$gë_vÆid_checkpoöt
(
f2fs_sb_öfo
 *
sbi
)

371 
f2fs_su≥r_block
 *
øw_sb
 = 
sbi
->
øw_su≥r
;

372 *
˝1
, *
˝2
, *
cur_∑ge
;

373 
blk_size
 = 
sbi
->
blocksize
;

374 
˝1_vîsi⁄
 = 0, 
˝2_vîsi⁄
 = 0;

375 
˝_°¨t_blk_no
;

376 
˝_blks
 = 1 + 
	`À32_to_˝u
(
	`F2FS_RAW_SUPER
(
sbi
)->
˝_∑ylﬂd
);

377 
ªt
;

379 
sbi
->
ck±
 = 
	`mÆloc
(
˝_blks
 * 
blk_size
);

380 i‡(!
sbi
->
ck±
)

381  -
ENOMEM
;

386 
˝_°¨t_blk_no
 = 
	`À32_to_˝u
(
øw_sb
->
˝_blkaddr
);

387 
˝1
 = 
	`vÆid©e_checkpoöt
(
sbi
, 
˝_°¨t_blk_no
, &
˝1_vîsi⁄
);

390 
˝_°¨t_blk_no
 +1 << 
	`À32_to_˝u
(
øw_sb
->
log_blocks_≥r_£g
);

391 
˝2
 = 
	`vÆid©e_checkpoöt
(
sbi
, 
˝_°¨t_blk_no
, &
˝2_vîsi⁄
);

393 i‡(
˝1
 && 
˝2
) {

394 i‡(
	`vî_a·î
(
˝2_vîsi⁄
, 
˝1_vîsi⁄
)) {

395 
cur_∑ge
 = 
˝2
;

396 
sbi
->
cur_˝
 = 2;

398 
cur_∑ge
 = 
˝1
;

399 
sbi
->
cur_˝
 = 1;

401 } i‡(
˝1
) {

402 
cur_∑ge
 = 
˝1
;

403 
sbi
->
cur_˝
 = 1;

404 } i‡(
˝2
) {

405 
cur_∑ge
 = 
˝2
;

406 
sbi
->
cur_˝
 = 2;

408 
	`‰ì
(
˝1
);

409 
	`‰ì
(
˝2
);

410 
Áû_no_˝
;

413 
	`mem˝y
(
sbi
->
ck±
, 
cur_∑ge
, 
blk_size
);

415 i‡(
˝_blks
 > 1) {

416 
i
;

417 
˝_blk_no
;

419 
˝_blk_no
 = 
	`À32_to_˝u
(
øw_sb
->
˝_blkaddr
);

420 i‡(
cur_∑ge
 =
˝2
)

421 
˝_blk_no
 += 1 <<

422 
	`À32_to_˝u
(
øw_sb
->
log_blocks_≥r_£g
);

424 
i
 = 1; i < 
˝_blks
; i++) {

425 *
ck±
 = (*)
sbi
->ckpt;

426 
ªt
 = 
	`dev_ªad_block
(
cur_∑ge
, 
˝_blk_no
 + 
i
);

427 
	`ASSERT
(
ªt
 >= 0);

428 
	`mem˝y
(
ck±
 + 
i
 * 
blk_size
, 
cur_∑ge
, blk_size);

431 
	`‰ì
(
˝1
);

432 
	`‰ì
(
˝2
);

435 
Áû_no_˝
:

436 
	`‰ì
(
sbi
->
ck±
);

437  -
EINVAL
;

438 
	}
}

440 
	$ßnôy_check_ck±
(
f2fs_sb_öfo
 *
sbi
)

442 
tŸÆ
, 
fsmëa
;

443 
f2fs_su≥r_block
 *
øw_su≥r
 = 
	`F2FS_RAW_SUPER
(
sbi
);

444 
f2fs_checkpoöt
 *
ck±
 = 
	`F2FS_CKPT
(
sbi
);

446 
tŸÆ
 = 
	`À32_to_˝u
(
øw_su≥r
->
£gmít_cou¡
);

447 
fsmëa
 = 
	`À32_to_˝u
(
øw_su≥r
->
£gmít_cou¡_ck±
);

448 
fsmëa
 +
	`À32_to_˝u
(
øw_su≥r
->
£gmít_cou¡_sô
);

449 
fsmëa
 +
	`À32_to_˝u
(
øw_su≥r
->
£gmít_cou¡_«t
);

450 
fsmëa
 +
	`À32_to_˝u
(
ck±
->
rsvd_£gmít_cou¡
);

451 
fsmëa
 +
	`À32_to_˝u
(
øw_su≥r
->
£gmít_cou¡_sß
);

453 i‡(
fsmëa
 >
tŸÆ
)

457 
	}
}

459 
	$öô_node_m™agî
(
f2fs_sb_öfo
 *
sbi
)

461 
f2fs_su≥r_block
 *
sb_øw
 = 
	`F2FS_RAW_SUPER
(
sbi
);

462 
f2fs_nm_öfo
 *
nm_i
 = 
	`NM_I
(
sbi
);

463 *
vîsi⁄_bôm≠
;

464 
«t_£gs
, 
«t_blocks
;

466 
nm_i
->
«t_blkaddr
 = 
	`À32_to_˝u
(
sb_øw
->nat_blkaddr);

469 
«t_£gs
 = 
	`À32_to_˝u
(
sb_øw
->
£gmít_cou¡_«t
) >> 1;

470 
«t_blocks
 = 
«t_£gs
 << 
	`À32_to_˝u
(
sb_øw
->
log_blocks_≥r_£g
);

471 
nm_i
->
max_nid
 = 
NAT_ENTRY_PER_BLOCK
 * 
«t_blocks
;

472 
nm_i
->
f˙t
 = 0;

473 
nm_i
->
«t_˙t
 = 0;

474 
nm_i
->
öô_sˇn_nid
 = 
	`À32_to_˝u
(
sbi
->
ck±
->
√xt_‰ì_nid
);

475 
nm_i
->
√xt_sˇn_nid
 = 
	`À32_to_˝u
(
sbi
->
ck±
->
√xt_‰ì_nid
);

477 
nm_i
->
bôm≠_size
 = 
	`__bôm≠_size
(
sbi
, 
NAT_BITMAP
);

479 
nm_i
->
«t_bôm≠
 = 
	`mÆloc
“m_i->
bôm≠_size
);

480 i‡(!
nm_i
->
«t_bôm≠
)

481  -
ENOMEM
;

482 
vîsi⁄_bôm≠
 = 
	`__bôm≠_±r
(
sbi
, 
NAT_BITMAP
);

483 i‡(!
vîsi⁄_bôm≠
)

484  -
EFAULT
;

487 
	`mem˝y
(
nm_i
->
«t_bôm≠
, 
vîsi⁄_bôm≠
,Çm_i->
bôm≠_size
);

489 
	}
}

491 
	$buûd_node_m™agî
(
f2fs_sb_öfo
 *
sbi
)

493 
îr
;

494 
sbi
->
nm_öfo
 = 
	`mÆloc
((
f2fs_nm_öfo
));

495 i‡(!
sbi
->
nm_öfo
)

496  -
ENOMEM
;

498 
îr
 = 
	`öô_node_m™agî
(
sbi
);

499 i‡(
îr
)

500  
îr
;

503 
	}
}

505 
	$buûd_sô_öfo
(
f2fs_sb_öfo
 *
sbi
)

507 
f2fs_su≥r_block
 *
øw_sb
 = 
	`F2FS_RAW_SUPER
(
sbi
);

508 
f2fs_checkpoöt
 *
ck±
 = 
	`F2FS_CKPT
(
sbi
);

509 
sô_öfo
 *
sô_i
;

510 
sô_£gs
, 
°¨t
;

511 *
§c_bôm≠
, *
d°_bôm≠
;

512 
bôm≠_size
;

514 
sô_i
 = 
	`mÆloc
((
sô_öfo
));

515 i‡(!
sô_i
)

516  -
ENOMEM
;

518 
	`SM_I
(
sbi
)->
sô_öfo
 = 
sô_i
;

520 
sô_i
->
£¡rõs
 = 
	`ˇŒoc
(
	`TOTAL_SEGS
(
sbi
Ë* (
£g_íåy
), 1);

522 
°¨t
 = 0; sèπ < 
	`TOTAL_SEGS
(
sbi
); start++) {

523 
sô_i
->
£¡rõs
[
°¨t
].
cur_vÆid_m≠


524 
	`ˇŒoc
(
SIT_VBLOCK_MAP_SIZE
, 1);

525 
sô_i
->
£¡rõs
[
°¨t
].
ck±_vÆid_m≠


526 
	`ˇŒoc
(
SIT_VBLOCK_MAP_SIZE
, 1);

527 i‡(!
sô_i
->
£¡rõs
[
°¨t
].
cur_vÆid_m≠


528 || !
sô_i
->
£¡rõs
[
°¨t
].
ck±_vÆid_m≠
)

529  -
ENOMEM
;

532 
sô_£gs
 = 
	`À32_to_˝u
(
øw_sb
->
£gmít_cou¡_sô
) >> 1;

533 
bôm≠_size
 = 
	`__bôm≠_size
(
sbi
, 
SIT_BITMAP
);

534 
§c_bôm≠
 = 
	`__bôm≠_±r
(
sbi
, 
SIT_BITMAP
);

536 
d°_bôm≠
 = 
	`mÆloc
(
bôm≠_size
);

537 
	`mem˝y
(
d°_bôm≠
, 
§c_bôm≠
, 
bôm≠_size
);

539 
sô_i
->
sô_ba£_addr
 = 
	`À32_to_˝u
(
øw_sb
->
sô_blkaddr
);

540 
sô_i
->
sô_blocks
 = 
sô_£gs
 << 
sbi
->
log_blocks_≥r_£g
;

541 
sô_i
->
wrôãn_vÆid_blocks
 = 
	`À64_to_˝u
(
ck±
->
vÆid_block_cou¡
);

542 
sô_i
->
sô_bôm≠
 = 
d°_bôm≠
;

543 
sô_i
->
bôm≠_size
 = bitmap_size;

544 
sô_i
->
dúty_£¡rõs
 = 0;

545 
sô_i
->
£¡s_≥r_block
 = 
SIT_ENTRY_PER_BLOCK
;

546 
sô_i
->
ñ≠£d_time
 = 
	`À64_to_˝u
(
ck±
->elapsed_time);

548 
	}
}

550 
	$ª£t_cur£g
(
f2fs_sb_öfo
 *
sbi
, 
ty≥
)

552 
cur£g_öfo
 *
cur£g
 = 
	`CURSEG_I
(
sbi
, 
ty≥
);

553 
summ¨y_foŸî
 *
sum_foŸî
;

554 
£g_íåy
 *
£
;

556 
sum_foŸî
 = &(
cur£g
->
sum_blk
->
foŸî
);

557 
	`mem£t
(
sum_foŸî
, 0, (
summ¨y_foŸî
));

558 i‡(
	`IS_DATASEG
(
ty≥
))

559 
	`SET_SUM_TYPE
(
sum_foŸî
, 
SUM_TYPE_DATA
);

560 i‡(
	`IS_NODESEG
(
ty≥
))

561 
	`SET_SUM_TYPE
(
sum_foŸî
, 
SUM_TYPE_NODE
);

562 
£
 = 
	`gë_£g_íåy
(
sbi
, 
cur£g
->
£gno
);

563 
£
->
ty≥
 =Åype;

564 
	}
}

566 
	$ªad_com∑˘ed_summ¨õs
(
f2fs_sb_öfo
 *
sbi
)

568 
cur£g_öfo
 *
cur£g
;

569 
i
, 
j
, 
off£t
;

570 
block_t
 
°¨t
;

571 *
kaddr
;

572 
ªt
;

574 
°¨t
 = 
	`°¨t_sum_block
(
sbi
);

576 
kaddr
 = (*)
	`mÆloc
(
PAGE_SIZE
);

577 
ªt
 = 
	`dev_ªad_block
(
kaddr
, 
°¨t
++);

578 
	`ASSERT
(
ªt
 >= 0);

580 
cur£g
 = 
	`CURSEG_I
(
sbi
, 
CURSEG_HOT_DATA
);

581 
	`mem˝y
(&
cur£g
->
sum_blk
->
n_«ts
, 
kaddr
, 
SUM_JOURNAL_SIZE
);

583 
cur£g
 = 
	`CURSEG_I
(
sbi
, 
CURSEG_COLD_DATA
);

584 
	`mem˝y
(&
cur£g
->
sum_blk
->
n_sôs
, 
kaddr
 + 
SUM_JOURNAL_SIZE
,

585 
SUM_JOURNAL_SIZE
);

587 
off£t
 = 2 * 
SUM_JOURNAL_SIZE
;

588 
i
 = 
CURSEG_HOT_DATA
; i <
CURSEG_COLD_DATA
; i++) {

589 
blk_off
;

590 
cur£g_öfo
 *
cur£g
 = 
	`CURSEG_I
(
sbi
, 
i
);

592 
	`ª£t_cur£g
(
sbi
, 
i
);

594 i‡(
cur£g
->
Æloc_ty≥
 =
SSR
)

595 
blk_off
 = 
sbi
->
blocks_≥r_£g
;

597 
blk_off
 = 
cur£g
->
√xt_blkoff
;

599 
j
 = 0; j < 
blk_off
; j++) {

600 
f2fs_summ¨y
 *
s
;

601 
s
 = (
f2fs_summ¨y
 *)(
kaddr
 + 
off£t
);

602 
cur£g
->
sum_blk
->
íåõs
[
j
] = *
s
;

603 
off£t
 +
SUMMARY_SIZE
;

604 i‡(
off£t
 + 
SUMMARY_SIZE
 <=

605 
PAGE_CACHE_SIZE
 - 
SUM_FOOTER_SIZE
)

607 
	`mem£t
(
kaddr
, 0, 
PAGE_SIZE
);

608 
ªt
 = 
	`dev_ªad_block
(
kaddr
, 
°¨t
++);

609 
	`ASSERT
(
ªt
 >= 0);

610 
off£t
 = 0;

613 
	`‰ì
(
kaddr
);

614 
	}
}

616 
	$ª°‹e_node_summ¨y
(
f2fs_sb_öfo
 *
sbi
,

617 
£gno
, 
f2fs_summ¨y_block
 *
sum_blk
)

619 
f2fs_node
 *
node_blk
;

620 
f2fs_summ¨y
 *
sum_íåy
;

621 
block_t
 
addr
;

622 
i
;

623 
ªt
;

625 
node_blk
 = 
	`mÆloc
(
F2FS_BLKSIZE
);

626 
	`ASSERT
(
node_blk
);

629 
addr
 = 
	`START_BLOCK
(
sbi
, 
£gno
);

630 
sum_íåy
 = &
sum_blk
->
íåõs
[0];

632 
i
 = 0; i < 
sbi
->
blocks_≥r_£g
; i++, 
sum_íåy
++) {

633 
ªt
 = 
	`dev_ªad_block
(
node_blk
, 
addr
);

634 
	`ASSERT
(
ªt
 >= 0);

635 
sum_íåy
->
nid
 = 
node_blk
->
foŸî
.nid;

636 
addr
++;

638 
	`‰ì
(
node_blk
);

639 
	}
}

641 
	$ªad_n‹mÆ_summ¨õs
(
f2fs_sb_öfo
 *
sbi
, 
ty≥
)

643 
f2fs_checkpoöt
 *
ck±
 = 
	`F2FS_CKPT
(
sbi
);

644 
f2fs_summ¨y_block
 *
sum_blk
;

645 
cur£g_öfo
 *
cur£g
;

646 
£gno
 = 0;

647 
block_t
 
blk_addr
 = 0;

648 
ªt
;

650 i‡(
	`IS_DATASEG
(
ty≥
)) {

651 
£gno
 = 
	`À32_to_˝u
(
ck±
->
cur_d©a_£gno
[
ty≥
]);

652 i‡(
	`is_£t_ck±_Êags
(
ck±
, 
CP_UMOUNT_FLAG
))

653 
blk_addr
 = 
	`sum_blk_addr
(
sbi
, 
NR_CURSEG_TYPE
, 
ty≥
);

655 
blk_addr
 = 
	`sum_blk_addr
(
sbi
, 
NR_CURSEG_DATA_TYPE
, 
ty≥
);

657 
£gno
 = 
	`À32_to_˝u
(
ck±
->
cur_node_£gno
[
ty≥
 -

658 
CURSEG_HOT_NODE
]);

659 i‡(
	`is_£t_ck±_Êags
(
ck±
, 
CP_UMOUNT_FLAG
))

660 
blk_addr
 = 
	`sum_blk_addr
(
sbi
, 
NR_CURSEG_NODE_TYPE
,

661 
ty≥
 - 
CURSEG_HOT_NODE
);

663 
blk_addr
 = 
	`GET_SUM_BLKADDR
(
sbi
, 
£gno
);

666 
sum_blk
 = (
f2fs_summ¨y_block
 *)
	`mÆloc
(
PAGE_SIZE
);

667 
ªt
 = 
	`dev_ªad_block
(
sum_blk
, 
blk_addr
);

668 
	`ASSERT
(
ªt
 >= 0);

670 i‡(
	`IS_NODESEG
(
ty≥
Ë&& !
	`is_£t_ck±_Êags
(
ck±
, 
CP_UMOUNT_FLAG
))

671 
	`ª°‹e_node_summ¨y
(
sbi
, 
£gno
, 
sum_blk
);

673 
cur£g
 = 
	`CURSEG_I
(
sbi
, 
ty≥
);

674 
	`mem˝y
(
cur£g
->
sum_blk
, sum_blk, 
PAGE_CACHE_SIZE
);

675 
	`ª£t_cur£g
(
sbi
, 
ty≥
);

676 
	`‰ì
(
sum_blk
);

677 
	}
}

679 
	$ª°‹e_cur£g_summ¨õs
(
f2fs_sb_öfo
 *
sbi
)

681 
ty≥
 = 
CURSEG_HOT_DATA
;

683 i‡(
	`is_£t_ck±_Êags
(
	`F2FS_CKPT
(
sbi
), 
CP_COMPACT_SUM_FLAG
)) {

684 
	`ªad_com∑˘ed_summ¨õs
(
sbi
);

685 
ty≥
 = 
CURSEG_HOT_NODE
;

688 ; 
ty≥
 <
CURSEG_COLD_NODE
;Åype++)

689 
	`ªad_n‹mÆ_summ¨õs
(
sbi
, 
ty≥
);

690 
	}
}

692 
	$buûd_cur£g
(
f2fs_sb_öfo
 *
sbi
)

694 
f2fs_checkpoöt
 *
ck±
 = 
	`F2FS_CKPT
(
sbi
);

695 
cur£g_öfo
 *
¨øy
;

696 
blk_off
;

697 
£gno
;

698 
i
;

700 
¨øy
 = 
	`mÆloc
((*¨øyË* 
NR_CURSEG_TYPE
);

701 
	`ASSERT
(
¨øy
);

703 
	`SM_I
(
sbi
)->
cur£g_¨øy
 = 
¨øy
;

705 
i
 = 0; i < 
NR_CURSEG_TYPE
; i++) {

706 
¨øy
[
i
].
sum_blk
 = 
	`mÆloc
(
PAGE_CACHE_SIZE
);

707 
	`ASSERT
(
¨øy
[
i
].
sum_blk
);

708 i‡(
i
 <
CURSEG_COLD_DATA
) {

709 
blk_off
 = 
	`À16_to_˝u
(
ck±
->
cur_d©a_blkoff
[
i
]);

710 
£gno
 = 
	`À32_to_˝u
(
ck±
->
cur_d©a_£gno
[
i
]);

712 i‡(
i
 > 
CURSEG_COLD_DATA
) {

713 
blk_off
 = 
	`À16_to_˝u
(
ck±
->
cur_node_blkoff
[
i
 -

714 
CURSEG_HOT_NODE
]);

715 
£gno
 = 
	`À32_to_˝u
(
ck±
->
cur_node_£gno
[
i
 -

716 
CURSEG_HOT_NODE
]);

718 
¨øy
[
i
].
£gno
 = segno;

719 
¨øy
[
i
].
z⁄e
 = 
	`GET_ZONENO_FROM_SEGNO
(
sbi
, 
£gno
);

720 
¨øy
[
i
].
√xt_£gno
 = 
NULL_SEGNO
;

721 
¨øy
[
i
].
√xt_blkoff
 = 
blk_off
;

722 
¨øy
[
i
].
Æloc_ty≥
 = 
ck±
->alloc_type[i];

724 
	`ª°‹e_cur£g_summ¨õs
(
sbi
);

725 
	}
}

727 
ölöe
 
	$check_£g_ønge
(
f2fs_sb_öfo
 *
sbi
, 
£gno
)

729 
íd_£gno
 = 
	`SM_I
(
sbi
)->
£gmít_cou¡
 - 1;

730 
	`ASSERT
(
£gno
 <
íd_£gno
);

731 
	}
}

733 
f2fs_sô_block
 *
	$gë_cuºít_sô_∑ge
(
f2fs_sb_öfo
 *
sbi
,

734 
£gno
)

736 
sô_öfo
 *
sô_i
 = 
	`SIT_I
(
sbi
);

737 
off£t
 = 
	`SIT_BLOCK_OFFSET
(
sô_i
, 
£gno
);

738 
block_t
 
blk_addr
 = 
sô_i
->
sô_ba£_addr
 + 
off£t
;

739 
f2fs_sô_block
 *
sô_blk
 = 
	`ˇŒoc
(
BLOCK_SZ
, 1);

740 
ªt
;

742 
	`check_£g_ønge
(
sbi
, 
£gno
);

745 i‡(
	`f2fs_ã°_bô
(
off£t
, 
sô_i
->
sô_bôm≠
))

746 
blk_addr
 +
sô_i
->
sô_blocks
;

748 
ªt
 = 
	`dev_ªad_block
(
sô_blk
, 
blk_addr
);

749 
	`ASSERT
(
ªt
 >= 0);

751  
sô_blk
;

752 
	}
}

754 
	$ªwrôe_cuºít_sô_∑ge
(
f2fs_sb_öfo
 *
sbi
,

755 
£gno
, 
f2fs_sô_block
 *
sô_blk
)

757 
sô_öfo
 *
sô_i
 = 
	`SIT_I
(
sbi
);

758 
off£t
 = 
	`SIT_BLOCK_OFFSET
(
sô_i
, 
£gno
);

759 
block_t
 
blk_addr
 = 
sô_i
->
sô_ba£_addr
 + 
off£t
;

760 
ªt
;

763 i‡(
	`f2fs_ã°_bô
(
off£t
, 
sô_i
->
sô_bôm≠
))

764 
blk_addr
 +
sô_i
->
sô_blocks
;

766 
ªt
 = 
	`dev_wrôe_block
(
sô_blk
, 
blk_addr
);

767 
	`ASSERT
(
ªt
 >= 0);

768 
	}
}

770 
	$check_block_cou¡
(
f2fs_sb_öfo
 *
sbi
,

771 
£gno
, 
f2fs_sô_íåy
 *
øw_sô
)

773 
f2fs_sm_öfo
 *
sm_öfo
 = 
	`SM_I
(
sbi
);

774 
íd_£gno
 = 
sm_öfo
->
£gmít_cou¡
 - 1;

775 
vÆid_blocks
 = 0;

776 
i
;

779 i‡(
	`GET_SIT_VBLOCKS
(
øw_sô
Ë> 
sbi
->
blocks_≥r_£g
)

780 
	`ASSERT_MSG
("Invalid SIT vblocks: segno=0x%x, %u",

781 
£gno
, 
	`GET_SIT_VBLOCKS
(
øw_sô
));

784 i‡(
£gno
 > 
íd_£gno
)

785 
	`ASSERT_MSG
("InvÆid SEGNO: 0x%x", 
£gno
);

788 
i
 = 0; i < 
SIT_VBLOCK_MAP_SIZE
; i++)

789 
vÆid_blocks
 +
	`gë_bôs_ö_byã
(
øw_sô
->
vÆid_m≠
[
i
]);

791 i‡(
	`GET_SIT_VBLOCKS
(
øw_sô
Ë!
vÆid_blocks
)

792 
	`ASSERT_MSG
("Wrong SIT valid blocks: segno=0x%x, %u vs. %u",

793 
£gno
, 
	`GET_SIT_VBLOCKS
(
øw_sô
), 
vÆid_blocks
);

795 i‡(
	`GET_SIT_TYPE
(
øw_sô
Ë>
NO_CHECK_TYPE
)

796 
	`ASSERT_MSG
("Wrong SITÅype: segno=0x%x, %u",

797 
£gno
, 
	`GET_SIT_TYPE
(
øw_sô
));

798 
	}
}

800 
	$£g_öfo_‰om_øw_sô
(
£g_íåy
 *
£
,

801 
f2fs_sô_íåy
 *
øw_sô
)

803 
£
->
vÆid_blocks
 = 
	`GET_SIT_VBLOCKS
(
øw_sô
);

804 
£
->
ck±_vÆid_blocks
 = 
	`GET_SIT_VBLOCKS
(
øw_sô
);

805 
	`mem˝y
(
£
->
cur_vÆid_m≠
, 
øw_sô
->
vÆid_m≠
, 
SIT_VBLOCK_MAP_SIZE
);

806 
	`mem˝y
(
£
->
ck±_vÆid_m≠
, 
øw_sô
->
vÆid_m≠
, 
SIT_VBLOCK_MAP_SIZE
);

807 
£
->
ty≥
 = 
	`GET_SIT_TYPE
(
øw_sô
);

808 
£
->
‹ig_ty≥
 = 
	`GET_SIT_TYPE
(
øw_sô
);

809 
£
->
mtime
 = 
	`À64_to_˝u
(
øw_sô
->mtime);

810 
	}
}

812 
£g_íåy
 *
	$gë_£g_íåy
(
f2fs_sb_öfo
 *
sbi
,

813 
£gno
)

815 
sô_öfo
 *
sô_i
 = 
	`SIT_I
(
sbi
);

816  &
sô_i
->
£¡rõs
[
£gno
];

817 
	}
}

819 
	$gë_sum_block
(
f2fs_sb_öfo
 *
sbi
, 
£gno
,

820 
f2fs_summ¨y_block
 *
sum_blk
)

822 
f2fs_checkpoöt
 *
ck±
 = 
	`F2FS_CKPT
(
sbi
);

823 
cur£g_öfo
 *
cur£g
;

824 
ty≥
, 
ªt
;

825 
u64
 
sß_blk
;

827 
sß_blk
 = 
	`GET_SUM_BLKADDR
(
sbi
, 
£gno
);

828 
ty≥
 = 0;Åy≥ < 
NR_CURSEG_NODE_TYPE
;Åype++) {

829 i‡(
£gno
 =
ck±
->
cur_node_£gno
[
ty≥
]) {

830 
cur£g
 = 
	`CURSEG_I
(
sbi
, 
CURSEG_HOT_NODE
 + 
ty≥
);

831 i‡(!
	`IS_SUM_NODE_SEG
(
cur£g
->
sum_blk
->
foŸî
)) {

832 
	`ASSERT_MSG
("segno [0x%x] indicatesá data "

834 
£gno
);

835  -
EINVAL
;

837 
	`mem˝y
(
sum_blk
, 
cur£g
->sum_blk, 
BLOCK_SZ
);

838  
SEG_TYPE_CUR_NODE
;

842 
ty≥
 = 0;Åy≥ < 
NR_CURSEG_DATA_TYPE
;Åype++) {

843 i‡(
£gno
 =
ck±
->
cur_d©a_£gno
[
ty≥
]) {

844 
cur£g
 = 
	`CURSEG_I
(
sbi
, 
ty≥
);

845 i‡(
	`IS_SUM_NODE_SEG
(
cur£g
->
sum_blk
->
foŸî
)) {

846 
	`ASSERT_MSG
("segno [0x%x] indicatesáÇode "

848 
£gno
);

849  -
EINVAL
;

851 
	`DBG
(2, "segno [0x%x] is current data seg[0x%x]\n",

852 
£gno
, 
ty≥
);

853 
	`mem˝y
(
sum_blk
, 
cur£g
->sum_blk, 
BLOCK_SZ
);

854  
SEG_TYPE_CUR_DATA
;

858 
ªt
 = 
	`dev_ªad_block
(
sum_blk
, 
sß_blk
);

859 
	`ASSERT
(
ªt
 >= 0);

861 i‡(
	`IS_SUM_NODE_SEG
(
sum_blk
->
foŸî
))

862  
SEG_TYPE_NODE
;

864  
SEG_TYPE_DATA
;

866 
	}
}

868 
	$gë_sum_íåy
(
f2fs_sb_öfo
 *
sbi
, 
u32
 
blk_addr
,

869 
f2fs_summ¨y
 *
sum_íåy
)

871 
f2fs_summ¨y_block
 *
sum_blk
;

872 
u32
 
£gno
, 
off£t
;

873 
ªt
;

875 
£gno
 = 
	`GET_SEGNO
(
sbi
, 
blk_addr
);

876 
off£t
 = 
	`OFFSET_IN_SEG
(
sbi
, 
blk_addr
);

878 
sum_blk
 = 
	`ˇŒoc
(
BLOCK_SZ
, 1);

880 
ªt
 = 
	`gë_sum_block
(
sbi
, 
£gno
, 
sum_blk
);

881 
	`mem˝y
(
sum_íåy
, &(
sum_blk
->
íåõs
[
off£t
]),

882 (
f2fs_summ¨y
));

883 
	`‰ì
(
sum_blk
);

884  
ªt
;

885 
	}
}

887 
	$gë_«t_íåy
(
f2fs_sb_öfo
 *
sbi
, 
nid_t
 
nid
,

888 
f2fs_«t_íåy
 *
øw_«t
)

890 
f2fs_nm_öfo
 *
nm_i
 = 
	`NM_I
(
sbi
);

891 
f2fs_«t_block
 *
«t_block
;

892 
pgoff_t
 
block_off
;

893 
pgoff_t
 
block_addr
;

894 
£g_off
, 
íåy_off
;

895 
ªt
;

897 i‡(
	`lookup_«t_ö_jou∫Æ
(
sbi
, 
nid
, 
øw_«t
) >= 0)

900 
«t_block
 = (
f2fs_«t_block
 *)
	`ˇŒoc
(
BLOCK_SZ
, 1);

902 
block_off
 = 
nid
 / 
NAT_ENTRY_PER_BLOCK
;

903 
íåy_off
 = 
nid
 % 
NAT_ENTRY_PER_BLOCK
;

905 
£g_off
 = 
block_off
 >> 
sbi
->
log_blocks_≥r_£g
;

906 
block_addr
 = (
pgoff_t
)(
nm_i
->
«t_blkaddr
 +

907 (
£g_off
 << 
sbi
->
log_blocks_≥r_£g
 << 1) +

908 (
block_off
 & ((1 << 
sbi
->
log_blocks_≥r_£g
) - 1)));

910 i‡(
	`f2fs_ã°_bô
(
block_off
, 
nm_i
->
«t_bôm≠
))

911 
block_addr
 +
sbi
->
blocks_≥r_£g
;

913 
ªt
 = 
	`dev_ªad_block
(
«t_block
, 
block_addr
);

914 
	`ASSERT
(
ªt
 >= 0);

916 
	`mem˝y
(
øw_«t
, &
«t_block
->
íåõs
[
íåy_off
],

917 (
f2fs_«t_íåy
));

918 
	`‰ì
(
«t_block
);

919 
	}
}

921 
	$gë_node_öfo
(
f2fs_sb_öfo
 *
sbi
, 
nid_t
 
nid
, 
node_öfo
 *
ni
)

923 
f2fs_«t_íåy
 
øw_«t
;

924 
	`gë_«t_íåy
(
sbi
, 
nid
, &
øw_«t
);

925 
ni
->
nid
 =Çid;

926 
	`node_öfo_‰om_øw_«t
(
ni
, &
øw_«t
);

927 
	}
}

929 
	$buûd_sô_íåõs
(
f2fs_sb_öfo
 *
sbi
)

931 
sô_öfo
 *
sô_i
 = 
	`SIT_I
(
sbi
);

932 
cur£g_öfo
 *
cur£g
 = 
	`CURSEG_I
(
sbi
, 
CURSEG_COLD_DATA
);

933 
f2fs_summ¨y_block
 *
sum
 = 
cur£g
->
sum_blk
;

934 
£gno
;

936 
£gno
 = 0; segnÿ< 
	`TOTAL_SEGS
(
sbi
); segno++) {

937 
£g_íåy
 *
£
 = &
sô_i
->
£¡rõs
[
£gno
];

938 
f2fs_sô_block
 *
sô_blk
;

939 
f2fs_sô_íåy
 
sô
;

940 
i
;

942 
i
 = 0; i < 
	`sôs_ö_cursum
(
sum
); i++) {

943 i‡(
	`À32_to_˝u
(
	`£gno_ö_jou∫Æ
(
sum
, 
i
)Ë=
£gno
) {

944 
sô
 = 
	`sô_ö_jou∫Æ
(
sum
, 
i
);

945 
gŸ_ô
;

948 
sô_blk
 = 
	`gë_cuºít_sô_∑ge
(
sbi
, 
£gno
);

949 
sô
 = 
sô_blk
->
íåõs
[
	`SIT_ENTRY_OFFSET
(
sô_i
, 
£gno
)];

950 
	`‰ì
(
sô_blk
);

951 
gŸ_ô
:

952 
	`check_block_cou¡
(
sbi
, 
£gno
, &
sô
);

953 
	`£g_öfo_‰om_øw_sô
(
£
, &
sô
);

956 
	}
}

958 
	$buûd_£gmít_m™agî
(
f2fs_sb_öfo
 *
sbi
)

960 
f2fs_su≥r_block
 *
øw_su≥r
 = 
	`F2FS_RAW_SUPER
(
sbi
);

961 
f2fs_checkpoöt
 *
ck±
 = 
	`F2FS_CKPT
(
sbi
);

962 
f2fs_sm_öfo
 *
sm_öfo
;

964 
sm_öfo
 = 
	`mÆloc
((
f2fs_sm_öfo
));

965 i‡(!
sm_öfo
)

966  -
ENOMEM
;

969 
sbi
->
sm_öfo
 = sm_info;

970 
sm_öfo
->
£g0_blkaddr
 = 
	`À32_to_˝u
(
øw_su≥r
->
£gmít0_blkaddr
);

971 
sm_öfo
->
maö_blkaddr
 = 
	`À32_to_˝u
(
øw_su≥r
->main_blkaddr);

972 
sm_öfo
->
£gmít_cou¡
 = 
	`À32_to_˝u
(
øw_su≥r
->segment_count);

973 
sm_öfo
->
ª£rved_£gmíts
 = 
	`À32_to_˝u
(
ck±
->
rsvd_£gmít_cou¡
);

974 
sm_öfo
->
ovp_£gmíts
 = 
	`À32_to_˝u
(
ck±
->
ovî¥ov_£gmít_cou¡
);

975 
sm_öfo
->
maö_£gmíts
 = 
	`À32_to_˝u
(
øw_su≥r
->
£gmít_cou¡_maö
);

976 
sm_öfo
->
sß_blkaddr
 = 
	`À32_to_˝u
(
øw_su≥r
->ssa_blkaddr);

978 
	`buûd_sô_öfo
(
sbi
);

980 
	`buûd_cur£g
(
sbi
);

982 
	`buûd_sô_íåõs
(
sbi
);

985 
	}
}

987 
	$buûd_sô_¨ó_bôm≠
(
f2fs_sb_öfo
 *
sbi
)

989 
f2fs_fsck
 *
fsck
 = 
	`F2FS_FSCK
(
sbi
);

990 
f2fs_sm_öfo
 *
sm_i
 = 
	`SM_I
(
sbi
);

991 
£gno
 = 0;

992 *
±r
 = 
NULL
;

993 
u32
 
sum_vblocks
 = 0;

994 
u32
 
‰ì_£gs
 = 0;

995 
£g_íåy
 *
£
;

997 
fsck
->
sô_¨ó_bôm≠_sz
 = 
sm_i
->
maö_£gmíts
 * 
SIT_VBLOCK_MAP_SIZE
;

998 
fsck
->
sô_¨ó_bôm≠
 = 
	`ˇŒoc
(1, fsck->
sô_¨ó_bôm≠_sz
);

999 
±r
 = 
fsck
->
sô_¨ó_bôm≠
;

1001 
	`ASSERT
(
fsck
->
sô_¨ó_bôm≠_sz
 =fsck->
maö_¨ó_bôm≠_sz
);

1003 
£gno
 = 0; segnÿ< 
	`TOTAL_SEGS
(
sbi
); segno++) {

1004 
£
 = 
	`gë_£g_íåy
(
sbi
, 
£gno
);

1006 
	`mem˝y
(
±r
, 
£
->
cur_vÆid_m≠
, 
SIT_VBLOCK_MAP_SIZE
);

1007 
±r
 +
SIT_VBLOCK_MAP_SIZE
;

1009 i‡(
£
->
vÆid_blocks
 == 0x0) {

1010 i‡(
sbi
->
ck±
->
cur_node_£gno
[0] =
£gno
 ||

1011 
sbi
->
ck±
->
cur_d©a_£gno
[0] =
£gno
 ||

1012 
sbi
->
ck±
->
cur_node_£gno
[1] =
£gno
 ||

1013 
sbi
->
ck±
->
cur_d©a_£gno
[1] =
£gno
 ||

1014 
sbi
->
ck±
->
cur_node_£gno
[2] =
£gno
 ||

1015 
sbi
->
ck±
->
cur_d©a_£gno
[2] =
£gno
) {

1018 
‰ì_£gs
++;

1021 
sum_vblocks
 +
£
->
vÆid_blocks
;

1024 
fsck
->
chk
.
sô_vÆid_blocks
 = 
sum_vblocks
;

1025 
fsck
->
chk
.
sô_‰ì_£gs
 = 
‰ì_£gs
;

1027 
	`DBG
(1, "Blocks [0x%x : %d] Free Segs [0x%x : %d]\n\n",

1028 
sum_vblocks
, sum_vblocks,

1029 
‰ì_£gs
, free_segs);

1030 
	}
}

1032 
	$ªwrôe_sô_¨ó_bôm≠
(
f2fs_sb_öfo
 *
sbi
)

1034 
f2fs_fsck
 *
fsck
 = 
	`F2FS_FSCK
(
sbi
);

1035 
cur£g_öfo
 *
cur£g
 = 
	`CURSEG_I
(
sbi
, 
CURSEG_COLD_DATA
);

1036 
sô_öfo
 *
sô_i
 = 
	`SIT_I
(
sbi
);

1037 
£gno
 = 0;

1038 
f2fs_summ¨y_block
 *
sum
 = 
cur£g
->
sum_blk
;

1039 *
±r
 = 
NULL
;

1042 
sum
->
n_sôs
 = 0;

1044 
fsck
->
chk
.
‰ì_£gs
 = 0;

1046 
±r
 = 
fsck
->
maö_¨ó_bôm≠
;

1048 
£gno
 = 0; segnÿ< 
	`TOTAL_SEGS
(
sbi
); segno++) {

1049 
f2fs_sô_block
 *
sô_blk
;

1050 
f2fs_sô_íåy
 *
sô
;

1051 
£g_íåy
 *
£
;

1052 
u16
 
vÆid_blocks
 = 0;

1053 
u16
 
ty≥
;

1054 
i
;

1056 
sô_blk
 = 
	`gë_cuºít_sô_∑ge
(
sbi
, 
£gno
);

1057 
sô
 = &
sô_blk
->
íåõs
[
	`SIT_ENTRY_OFFSET
(
sô_i
, 
£gno
)];

1058 
	`mem˝y
(
sô
->
vÆid_m≠
, 
±r
, 
SIT_VBLOCK_MAP_SIZE
);

1061 
i
 = 0; i < 
SIT_VBLOCK_MAP_SIZE
; i++)

1062 
vÆid_blocks
 +
	`gë_bôs_ö_byã
(
sô
->
vÆid_m≠
[
i
]);

1064 
£
 = 
	`gë_£g_íåy
(
sbi
, 
£gno
);

1065 
ty≥
 = 
£
->type;

1066 i‡(
ty≥
 >
NO_CHECK_TYPE
) {

1067 
	`ASSERT_MSG
("InvalideÅypeánd valid blocks=%x,%x",

1068 
£gno
, 
vÆid_blocks
);

1069 
ty≥
 = 0;

1071 
sô
->
vblocks
 = 
	`˝u_to_À16
((
ty≥
 << 
SIT_VBLOCKS_SHIFT
) |

1072 
vÆid_blocks
);

1073 
	`ªwrôe_cuºít_sô_∑ge
(
sbi
, 
£gno
, 
sô_blk
);

1074 
	`‰ì
(
sô_blk
);

1076 i‡(
vÆid_blocks
 == 0 &&

1077 
sbi
->
ck±
->
cur_node_£gno
[0] !
£gno
 &&

1078 
sbi
->
ck±
->
cur_d©a_£gno
[0] !
£gno
 &&

1079 
sbi
->
ck±
->
cur_node_£gno
[1] !
£gno
 &&

1080 
sbi
->
ck±
->
cur_d©a_£gno
[1] !
£gno
 &&

1081 
sbi
->
ck±
->
cur_node_£gno
[2] !
£gno
 &&

1082 
sbi
->
ck±
->
cur_d©a_£gno
[2] !
£gno
)

1083 
fsck
->
chk
.
‰ì_£gs
++;

1085 
±r
 +
SIT_VBLOCK_MAP_SIZE
;

1087 
	}
}

1089 
	$lookup_«t_ö_jou∫Æ
(
f2fs_sb_öfo
 *
sbi
, 
u32
 
nid
,

1090 
f2fs_«t_íåy
 *
øw_«t
)

1092 
cur£g_öfo
 *
cur£g
 = 
	`CURSEG_I
(
sbi
, 
CURSEG_HOT_DATA
);

1093 
f2fs_summ¨y_block
 *
sum
 = 
cur£g
->
sum_blk
;

1094 
i
 = 0;

1096 
i
 = 0; i < 
	`«ts_ö_cursum
(
sum
); i++) {

1097 i‡(
	`À32_to_˝u
(
	`nid_ö_jou∫Æ
(
sum
, 
i
)Ë=
nid
) {

1098 
	`mem˝y
(
øw_«t
, &
	`«t_ö_jou∫Æ
(
sum
, 
i
),

1099 (
f2fs_«t_íåy
));

1100 
	`DBG
(3, "==> FoundÇid [0x%x] i¿«àˇche\n", 
nid
);

1101  
i
;

1105 
	}
}

1107 
	$nuŒify_«t_íåy
(
f2fs_sb_öfo
 *
sbi
, 
u32
 
nid
)

1109 
cur£g_öfo
 *
cur£g
 = 
	`CURSEG_I
(
sbi
, 
CURSEG_HOT_DATA
);

1110 
f2fs_summ¨y_block
 *
sum
 = 
cur£g
->
sum_blk
;

1111 
f2fs_nm_öfo
 *
nm_i
 = 
	`NM_I
(
sbi
);

1112 
f2fs_«t_block
 *
«t_block
;

1113 
pgoff_t
 
block_off
;

1114 
pgoff_t
 
block_addr
;

1115 
£g_off
, 
íåy_off
;

1116 
ªt
;

1117 
i
 = 0;

1120 
i
 = 0; i < 
	`«ts_ö_cursum
(
sum
); i++) {

1121 i‡(
	`À32_to_˝u
(
	`nid_ö_jou∫Æ
(
sum
, 
i
)Ë=
nid
) {

1122 
	`mem£t
(&
	`«t_ö_jou∫Æ
(
sum
, 
i
), 0,

1123 (
f2fs_«t_íåy
));

1124 
	`FIX_MSG
("Removênid [0x%x] i¿«àjou∫Æ\n", 
nid
);

1128 
«t_block
 = (
f2fs_«t_block
 *)
	`ˇŒoc
(
BLOCK_SZ
, 1);

1130 
block_off
 = 
nid
 / 
NAT_ENTRY_PER_BLOCK
;

1131 
íåy_off
 = 
nid
 % 
NAT_ENTRY_PER_BLOCK
;

1133 
£g_off
 = 
block_off
 >> 
sbi
->
log_blocks_≥r_£g
;

1134 
block_addr
 = (
pgoff_t
)(
nm_i
->
«t_blkaddr
 +

1135 (
£g_off
 << 
sbi
->
log_blocks_≥r_£g
 << 1) +

1136 (
block_off
 & ((1 << 
sbi
->
log_blocks_≥r_£g
) - 1)));

1138 i‡(
	`f2fs_ã°_bô
(
block_off
, 
nm_i
->
«t_bôm≠
))

1139 
block_addr
 +
sbi
->
blocks_≥r_£g
;

1141 
ªt
 = 
	`dev_ªad_block
(
«t_block
, 
block_addr
);

1142 
	`ASSERT
(
ªt
 >= 0);

1144 
	`mem£t
(&
«t_block
->
íåõs
[
íåy_off
], 0,

1145 (
f2fs_«t_íåy
));

1147 
ªt
 = 
	`dev_wrôe_block
(
«t_block
, 
block_addr
);

1148 
	`ASSERT
(
ªt
 >= 0);

1149 
	`‰ì
(
«t_block
);

1150 
	}
}

1152 
	$buûd_«t_¨ó_bôm≠
(
f2fs_sb_öfo
 *
sbi
)

1154 
f2fs_fsck
 *
fsck
 = 
	`F2FS_FSCK
(
sbi
);

1155 
f2fs_su≥r_block
 *
øw_sb
 = 
	`F2FS_RAW_SUPER
(
sbi
);

1156 
f2fs_nm_öfo
 *
nm_i
 = 
	`NM_I
(
sbi
);

1157 
f2fs_«t_block
 *
«t_block
;

1158 
u32
 
nid
, 
ƒ_«t_blks
;

1159 
pgoff_t
 
block_off
;

1160 
pgoff_t
 
block_addr
;

1161 
£g_off
;

1162 
ªt
;

1163 
i
;

1165 
«t_block
 = (
f2fs_«t_block
 *)
	`ˇŒoc
(
BLOCK_SZ
, 1);

1166 
	`ASSERT
(
«t_block
);

1169 
ƒ_«t_blks
 = (
	`À32_to_˝u
(
øw_sb
->
£gmít_cou¡_«t
) / 2) <<

1170 
sbi
->
log_blocks_≥r_£g
;

1172 
fsck
->
ƒ_«t_íåõs
 = 
ƒ_«t_blks
 * 
NAT_ENTRY_PER_BLOCK
;

1173 
fsck
->
«t_¨ó_bôm≠_sz
 = (fsck->
ƒ_«t_íåõs
 + 7) / 8;

1174 
fsck
->
«t_¨ó_bôm≠
 = 
	`ˇŒoc
(fsck->
«t_¨ó_bôm≠_sz
, 1);

1175 
	`ASSERT
(
fsck
->
«t_¨ó_bôm≠
 !
NULL
);

1177 
block_off
 = 0; block_of‡< 
ƒ_«t_blks
; block_off++) {

1179 
£g_off
 = 
block_off
 >> 
sbi
->
log_blocks_≥r_£g
;

1180 
block_addr
 = (
pgoff_t
)(
nm_i
->
«t_blkaddr
 +

1181 (
£g_off
 << 
sbi
->
log_blocks_≥r_£g
 << 1) +

1182 (
block_off
 & ((1 << 
sbi
->
log_blocks_≥r_£g
) - 1)));

1184 i‡(
	`f2fs_ã°_bô
(
block_off
, 
nm_i
->
«t_bôm≠
))

1185 
block_addr
 +
sbi
->
blocks_≥r_£g
;

1187 
ªt
 = 
	`dev_ªad_block
(
«t_block
, 
block_addr
);

1188 
	`ASSERT
(
ªt
 >= 0);

1190 
nid
 = 
block_off
 * 
NAT_ENTRY_PER_BLOCK
;

1191 
i
 = 0; i < 
NAT_ENTRY_PER_BLOCK
; i++) {

1192 
f2fs_«t_íåy
 
øw_«t
;

1193 
node_öfo
 
ni
;

1194 
ni
.
nid
 =Çid + 
i
;

1196 i‡((
nid
 + 
i
Ë=
	`F2FS_NODE_INO
(
sbi
) ||

1197 (
nid
 + 
i
Ë=
	`F2FS_META_INO
(
sbi
)) {

1198 
	`ASSERT
(
«t_block
->
íåõs
[
i
].
block_addr
 != 0x0);

1202 i‡(
	`lookup_«t_ö_jou∫Æ
(
sbi
, 
nid
 + 
i
,

1203 &
øw_«t
) >= 0) {

1204 
	`node_öfo_‰om_øw_«t
(&
ni
, &
øw_«t
);

1205 i‡(
ni
.
blk_addr
 != 0x0) {

1206 
	`f2fs_£t_bô
(
nid
 + 
i
,

1207 
fsck
->
«t_¨ó_bôm≠
);

1208 
fsck
->
chk
.
vÆid_«t_íåy_˙t
++;

1209 
	`DBG
(3, "nid[0x%x] inÇat cache\n",

1210 
nid
 + 
i
);

1213 
	`node_öfo_‰om_øw_«t
(&
ni
,

1214 &
«t_block
->
íåõs
[
i
]);

1215 i‡(
ni
.
blk_addr
 == 0)

1217 
	`ASSERT
(
nid
 + 
i
 != 0x0);

1219 
	`DBG
(3, "nid[0x%8x]áddr[0x%16x] ino[0x%8x]\n",

1220 
nid
 + 
i
, 
ni
.
blk_addr
,Çi.
öo
);

1221 
	`f2fs_£t_bô
(
nid
 + 
i
, 
fsck
->
«t_¨ó_bôm≠
);

1222 
fsck
->
chk
.
vÆid_«t_íåy_˙t
++;

1226 
	`‰ì
(
«t_block
);

1228 
	`DBG
(1, "validÇatÉntries (block_addr != 0x0) [0x%8x : %u]\n",

1229 
fsck
->
chk
.
vÆid_«t_íåy_˙t
,

1230 
fsck
->
chk
.
vÆid_«t_íåy_˙t
);

1231 
	}
}

1233 
	$f2fs_do_mou¡
(
f2fs_sb_öfo
 *
sbi
)

1235 
ªt
;

1237 
sbi
->
a˘ive_logs
 = 
NR_CURSEG_TYPE
;

1238 
ªt
 = 
	`vÆid©e_su≥r_block
(
sbi
, 0);

1239 i‡(
ªt
) {

1240 
ªt
 = 
	`vÆid©e_su≥r_block
(
sbi
, 1);

1241 i‡(
ªt
)

1245 
	`¥öt_øw_sb_öfo
(
sbi
);

1247 
	`öô_sb_öfo
(
sbi
);

1249 
ªt
 = 
	`gë_vÆid_checkpoöt
(
sbi
);

1250 i‡(
ªt
) {

1251 
	`ERR_MSG
("Can't find valid checkpoint\n");

1255 i‡(
	`ßnôy_check_ck±
(
sbi
)) {

1256 
	`ERR_MSG
("Checkpoint isÖolluted\n");

1260 
	`¥öt_ck±_öfo
(
sbi
);

1262 i‡(
c⁄fig
.
auto_fix
) {

1263 
u32
 
Êag
 = 
	`À32_to_˝u
(
sbi
->
ck±
->
ck±_Êags
);

1265 i‡(
Êag
 & 
CP_FSCK_FLAG
)

1266 
c⁄fig
.
fix_⁄
 = 1;

1271 
c⁄fig
.
bug_⁄
 = 0;

1273 
sbi
->
tŸÆ_vÆid_node_cou¡
 = 
	`À32_to_˝u
(sbi->
ck±
->
vÆid_node_cou¡
);

1274 
sbi
->
tŸÆ_vÆid_öode_cou¡
 =

1275 
	`À32_to_˝u
(
sbi
->
ck±
->
vÆid_öode_cou¡
);

1276 
sbi
->
u£r_block_cou¡
 = 
	`À64_to_˝u
(sbi->
ck±
->user_block_count);

1277 
sbi
->
tŸÆ_vÆid_block_cou¡
 =

1278 
	`À64_to_˝u
(
sbi
->
ck±
->
vÆid_block_cou¡
);

1279 
sbi
->
œ°_vÆid_block_cou¡
 = sbi->
tŸÆ_vÆid_block_cou¡
;

1280 
sbi
->
Æloc_vÆid_block_cou¡
 = 0;

1282 i‡(
	`buûd_£gmít_m™agî
(
sbi
)) {

1283 
	`ERR_MSG
("build_segment_manager failed\n");

1287 i‡(
	`buûd_node_m™agî
(
sbi
)) {

1288 
	`ERR_MSG
("build_segment_manager failed\n");

1293 
	}
}

1295 
	$f2fs_do_umou¡
(
f2fs_sb_öfo
 *
sbi
)

1297 
sô_öfo
 *
sô_i
 = 
	`SIT_I
(
sbi
);

1298 
f2fs_sm_öfo
 *
sm_i
 = 
	`SM_I
(
sbi
);

1299 
f2fs_nm_öfo
 *
nm_i
 = 
	`NM_I
(
sbi
);

1300 
i
;

1303 
	`‰ì
(
nm_i
->
«t_bôm≠
);

1304 
	`‰ì
(
sbi
->
nm_öfo
);

1307 
i
 = 0; i < 
	`TOTAL_SEGS
(
sbi
); i++) {

1308 
	`‰ì
(
sô_i
->
£¡rõs
[
i
].
cur_vÆid_m≠
);

1309 
	`‰ì
(
sô_i
->
£¡rõs
[
i
].
ck±_vÆid_m≠
);

1311 
	`‰ì
(
sô_i
->
sô_bôm≠
);

1312 
	`‰ì
(
sm_i
->
sô_öfo
);

1315 
i
 = 0; i < 
NR_CURSEG_TYPE
; i++)

1316 
	`‰ì
(
sm_i
->
cur£g_¨øy
[
i
].
sum_blk
);

1318 
	`‰ì
(
sm_i
->
cur£g_¨øy
);

1319 
	`‰ì
(
sbi
->
sm_öfo
);

1321 
	`‰ì
(
sbi
->
ck±
);

1322 
	`‰ì
(
sbi
->
øw_su≥r
);

1323 
	}
}

	@include/f2fs_fs.h

12 #i‚de‡
__F2FS_FS_H__


13 
	#__F2FS_FS_H__


	)

15 
	~<öây≥s.h
>

16 
	~<löux/ty≥s.h
>

17 
	~<sys/ty≥s.h
>

19 #ifde‡
HAVE_CONFIG_H


20 
	~<c⁄fig.h
>

23 
u_öt64_t
 
	tu64
;

24 
u_öt32_t
 
	tu32
;

25 
u_öt16_t
 
	tu16
;

26 
u_öt8_t
 
	tu8
;

27 
u32
 
	tblock_t
;

28 
u32
 
	tnid_t
;

29 
u8
 
	tboﬁ
;

30 
	tpgoff_t
;

32 #i‡
HAVE_BYTESWAP_H


33 
	~<byãsw≠.h
>

43 
ölöe
 
uöt16_t
 
	$bsw≠_16
(
uöt16_t
 
vÆ
)

45  ((
vÆ
 & (
uöt16_t
)0x00ffU) << 8)

46 | ((
vÆ
 & (
uöt16_t
)0xff00U) >> 8);

47 
	}
}

57 
ölöe
 
uöt32_t
 
	$bsw≠_32
(
uöt32_t
 
vÆ
)

59  ((
vÆ
 & (
uöt32_t
)0x000000ffUL) << 24)

60 | ((
vÆ
 & (
uöt32_t
)0x0000ff00UL) << 8)

61 | ((
vÆ
 & (
uöt32_t
)0x00ff0000UL) >> 8)

62 | ((
vÆ
 & (
uöt32_t
)0xff000000UL) >> 24);

63 
	}
}

66 #i‡
deföed
 
HAVE_DECL_BSWAP_64
 && !HAVE_DECL_BSWAP_64

76 
ölöe
 
uöt64_t
 
	$bsw≠_64
(
uöt64_t
 
vÆ
)

78  ((
vÆ
 & (
uöt64_t
)0x00000000000000ffULL) << 56)

79 | ((
vÆ
 & (
uöt64_t
)0x000000000000ff00ULL) << 40)

80 | ((
vÆ
 & (
uöt64_t
)0x0000000000ff0000ULL) << 24)

81 | ((
vÆ
 & (
uöt64_t
)0x00000000ff000000ULL) << 8)

82 | ((
vÆ
 & (
uöt64_t
)0x000000ff00000000ULL) >> 8)

83 | ((
vÆ
 & (
uöt64_t
)0x0000ff0000000000ULL) >> 24)

84 | ((
vÆ
 & (
uöt64_t
)0x00ff000000000000ULL) >> 40)

85 | ((
vÆ
 & (
uöt64_t
)0xff00000000000000ULL) >> 56);

86 
	}
}

89 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


90 
	#À16_to_˝u
(
x
Ë((
__u16
)(x))

	)

91 
	#À32_to_˝u
(
x
Ë((
__u32
)(x))

	)

92 
	#À64_to_˝u
(
x
Ë((
__u64
)(x))

	)

93 
	#˝u_to_À16
(
x
Ë((
__u16
)(x))

	)

94 
	#˝u_to_À32
(
x
Ë((
__u32
)(x))

	)

95 
	#˝u_to_À64
(
x
Ë((
__u64
)(x))

	)

96 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


97 
	#À16_to_˝u
(
x
Ë
	`bsw≠_16
(x)

	)

98 
	#À32_to_˝u
(
x
Ë
	`bsw≠_32
(x)

	)

99 
	#À64_to_˝u
(
x
Ë
	`bsw≠_64
(x)

	)

100 
	#˝u_to_À16
(
x
Ë
	`bsw≠_16
(x)

	)

101 
	#˝u_to_À32
(
x
Ë
	`bsw≠_32
(x)

	)

102 
	#˝u_to_À64
(
x
Ë
	`bsw≠_64
(x)

	)

105 
	#ty≥check
(
ty≥
,
x
) \

106 ({ 
ty≥
 
__dummy
; \

107 
	`ty≥of
(
x
Ë
__dummy2
; \

108 ()(&
__dummy
 =&
__dummy2
); \

110 })

	)

112 
	#NULL_SEGNO
 (()~0)

	)

117 
	#FIX_MSG
(
fmt
, ...) \

119 
	`¥ötf
("[FIX] (%s:%4dË", 
__func__
, 
__LINE__
); \

120 
	`¥ötf
(" --> "
fmt
"\n", ##
__VA_ARGS__
); \

121 } 0)

	)

123 
	#ASSERT_MSG
(
fmt
, ...) \

125 
	`¥ötf
("[ASSERT] (%s:%4dË", 
__func__
, 
__LINE__
); \

126 
	`¥ötf
(" --> "
fmt
"\n", ##
__VA_ARGS__
); \

127 
c⁄fig
.
bug_⁄
 = 1; \

128 } 0)

	)

130 
	#ASSERT
(
exp
) \

132 i‡(!(
exp
)) { \

133 
	`¥ötf
("[ASSERT] (%s:%4d) " #exp"\n", \

134 
__func__
, 
__LINE__
); \

135 
	`exô
(-1); \

137 } 0)

	)

139 
	#ERR_MSG
(
fmt
, ...) \

141 
	`¥ötf
("[%s:%d] " 
fmt
, 
__func__
, 
__LINE__
, ##
__VA_ARGS__
); \

142 } 0)

	)

144 
	#MSG
(
n
, 
fmt
, ...) \

146 i‡(
c⁄fig
.
dbg_lv
 >
n
) { \

147 
	`¥ötf
(
fmt
, ##
__VA_ARGS__
); \

149 } 0)

	)

151 
	#DBG
(
n
, 
fmt
, ...) \

153 i‡(
c⁄fig
.
dbg_lv
 >
n
) { \

154 
	`¥ötf
("[%s:%4d] " 
fmt
, \

155 
__func__
, 
__LINE__
, ##
__VA_ARGS__
); \

157 } 0)

	)

160 
	#DISP
(
fmt
, 
±r
, 
membî
) \

162 
	`¥ötf
("%-30s" 
fmt
, #membî, ((
±r
)->
membî
)); \

163 } 0)

	)

165 
	#DISP_u32
(
±r
, 
membî
) \

167 
	`as£π
(((
±r
)->
membî
) <= 4); \

168 
	`¥ötf
("%-30s" "\t\t[0x%8x : %u]\n", \

169 #membî, ((
±r
)->
membî
), ((ptr)->member)); \

170 } 0)

	)

172 
	#DISP_u64
(
±r
, 
membî
) \

174 
	`as£π
(((
±r
)->
membî
) == 8); \

175 
	`¥ötf
("%-30s" "\t\t[0x%8llx : %llu]\n", \

176 #membî, ((
±r
)->
membî
), ((ptr)->member)); \

177 } 0)

	)

179 
	#DISP_utf
(
±r
, 
membî
) \

181 
	`¥ötf
("%-30s" "\t\t[%s]\n", #membî, ((
±r
)->
membî
)); \

182 } 0)

	)

185 
	#BUF_DISP_u32
(
buf
, 
d©a
, 
Àn
, 
±r
, 
membî
) \

187 
	`as£π
(((
±r
)->
membî
) <= 4); \

188 
	`¢¥ötf
(
buf
, 
Àn
, #member); \

189 
	`¢¥ötf
(
d©a
, 
Àn
, "0x%x : %u", ((
±r
)->
membî
), \

190 ((
±r
)->
membî
)); \

191 } 0)

	)

193 
	#BUF_DISP_u64
(
buf
, 
d©a
, 
Àn
, 
±r
, 
membî
) \

195 
	`as£π
(((
±r
)->
membî
) == 8); \

196 
	`¢¥ötf
(
buf
, 
Àn
, #member); \

197 
	`¢¥ötf
(
d©a
, 
Àn
, "0x%Œx : %Œu", ((
±r
)->
membî
), \

198 ((
±r
)->
membî
)); \

199 } 0)

	)

201 
	#BUF_DISP_utf
(
buf
, 
d©a
, 
Àn
, 
±r
, 
membî
) \

202 
	`¢¥ötf
(
buf
, 
Àn
, #membî)

	)

205 
	#PAGE_SIZE
 4096

	)

206 
	#PAGE_CACHE_SIZE
 4096

	)

207 
	#BITS_PER_BYTE
 8

	)

208 
	#F2FS_SUPER_MAGIC
 0xF2F52010

	)

209 
	#CHECKSUM_OFFSET
 4092

	)

212 
	#F2FS_MIN_VOLUME_SIZE
 104857600

	)

213 
	#F2FS_NUMBER_OF_CHECKPOINT_PACK
 2

	)

214 
	#DEFAULT_SECTOR_SIZE
 512

	)

215 
	#DEFAULT_SECTORS_PER_BLOCK
 8

	)

216 
	#DEFAULT_BLOCKS_PER_SEGMENT
 512

	)

217 
	#DEFAULT_SEGMENTS_PER_SECTION
 1

	)

219 
	#VERSION_LEN
 256

	)

221 
	ef2fs_c⁄fig_func
 {

222 
	mFSCK
,

223 
	mDUMP
,

226 
	sf2fs_c⁄figuøti⁄
 {

227 
u_öt32_t
 
	m£˘‹_size
;

228 
u_öt32_t
 
	mª£rved_£gmíts
;

229 
u_öt32_t
 
	movî¥ovisi⁄
;

230 
u_öt32_t
 
	mcur_£g
[6];

231 
u_öt32_t
 
	m£gs_≥r_£c
;

232 
u_öt32_t
 
	m£cs_≥r_z⁄e
;

233 
u_öt32_t
 
	m£gs_≥r_z⁄e
;

234 
u_öt32_t
 
	m°¨t_£˘‹
;

235 
u_öt64_t
 
	mtŸÆ_£˘‹s
;

236 
u_öt32_t
 
	m£˘‹s_≥r_blk
;

237 
u_öt32_t
 
	mblks_≥r_£g
;

238 
__u8
 
	möô_vîsi⁄
[
VERSION_LEN
 + 1];

239 
__u8
 
	msb_vîsi⁄
[
VERSION_LEN
 + 1];

240 
__u8
 
	mvîsi⁄
[
VERSION_LEN
 + 1];

241 *
	mvﬁ_œbñ
;

242 
	mhóp
;

243 
öt32_t
 
	mfd
, 
	mkd
;

244 
öt32_t
 
	mdump_fd
;

245 *
	mdevi˚_«me
;

246 *
	mexãnsi⁄_li°
;

247 
	mdbg_lv
;

248 
	måim
;

249 
	mfunc
;

250 *
	m¥iv©e
;

251 
	mfix_⁄
;

252 
	mbug_⁄
;

253 
	mauto_fix
;

254 } 
__©åibuã__
((
∑cked
));

256 #ifde‡
CONFIG_64BIT


257 
	#BITS_PER_LONG
 64

	)

259 
	#BITS_PER_LONG
 32

	)

262 
	#BIT_MASK
(
ƒ
Ë(1 << (ƒ % 
BITS_PER_LONG
))

	)

263 
	#BIT_WORD
(
ƒ
Ë“∏/ 
BITS_PER_LONG
)

	)

268 
	#NR_CURSEG_DATA_TYPE
 (3)

	)

269 
	#NR_CURSEG_NODE_TYPE
 (3)

	)

270 
	#NR_CURSEG_TYPE
 (
NR_CURSEG_DATA_TYPE
 + 
NR_CURSEG_NODE_TYPE
)

	)

273 
	mCURSEG_HOT_DATA
 = 0,

274 
	mCURSEG_WARM_DATA
,

275 
	mCURSEG_COLD_DATA
,

276 
	mCURSEG_HOT_NODE
,

277 
	mCURSEG_WARM_NODE
,

278 
	mCURSEG_COLD_NODE
,

279 
	mNO_CHECK_TYPE


285 
	#GET_SUM_TYPE
(
foŸî
Ë((foŸî)->
íåy_ty≥
)

	)

286 
	#SET_SUM_TYPE
(
foŸî
, 
ty≥
Ë((foŸî)->
íåy_ty≥
 =Åy≥)

	)

291 
	#F2FS_SUPER_OFFSET
 1024

	)

292 
	#F2FS_LOG_SECTOR_SIZE
 9

	)

293 
	#F2FS_LOG_SECTORS_PER_BLOCK
 3

	)

294 
	#F2FS_BLKSIZE
 4096

	)

295 
	#F2FS_MAX_EXTENSION
 64

	)

296 
	#F2FS_BLK_ALIGN
(
x
Ë(((xË+ 
F2FS_BLKSIZE
 - 1Ë/ F2FS_BLKSIZE)

	)

298 
	#NULL_ADDR
 0x0U

	)

299 
	#NEW_ADDR
 -1U

	)

301 
	#F2FS_ROOT_INO
(
sbi
Ë(sbi->
roŸ_öo_num
)

	)

302 
	#F2FS_NODE_INO
(
sbi
Ë(sbi->
node_öo_num
)

	)

303 
	#F2FS_META_INO
(
sbi
Ë(sbi->
mëa_öo_num
)

	)

306 
	#GFP_F2FS_ZERO
 (
GFP_NOFS
 | 
__GFP_ZERO
)

	)

314 
	#MAX_ACTIVE_LOGS
 16

	)

315 
	#MAX_ACTIVE_NODE_LOGS
 8

	)

316 
	#MAX_ACTIVE_DATA_LOGS
 8

	)

321 
	sf2fs_su≥r_block
 {

322 
__À32
 
	mmagic
;

323 
__À16
 
	mmaj‹_vî
;

324 
__À16
 
	mmö‹_vî
;

325 
__À32
 
	mlog_£˘‹size
;

326 
__À32
 
	mlog_£˘‹s_≥r_block
;

327 
__À32
 
	mlog_blocksize
;

328 
__À32
 
	mlog_blocks_≥r_£g
;

329 
__À32
 
	m£gs_≥r_£c
;

330 
__À32
 
	m£cs_≥r_z⁄e
;

331 
__À32
 
	mchecksum_off£t
;

332 
__À64
 
	mblock_cou¡
;

333 
__À32
 
	m£˘i⁄_cou¡
;

334 
__À32
 
	m£gmít_cou¡
;

335 
__À32
 
	m£gmít_cou¡_ck±
;

336 
__À32
 
	m£gmít_cou¡_sô
;

337 
__À32
 
	m£gmít_cou¡_«t
;

338 
__À32
 
	m£gmít_cou¡_sß
;

339 
__À32
 
	m£gmít_cou¡_maö
;

340 
__À32
 
	m£gmít0_blkaddr
;

341 
__À32
 
	m˝_blkaddr
;

342 
__À32
 
	msô_blkaddr
;

343 
__À32
 
	m«t_blkaddr
;

344 
__À32
 
	msß_blkaddr
;

345 
__À32
 
	mmaö_blkaddr
;

346 
__À32
 
	mroŸ_öo
;

347 
__À32
 
	mnode_öo
;

348 
__À32
 
	mmëa_öo
;

349 
__u8
 
	muuid
[16];

350 
__À16
 
	mvﬁume_«me
[512];

351 
__À32
 
	mexãnsi⁄_cou¡
;

352 
__u8
 
	mexãnsi⁄_li°
[
F2FS_MAX_EXTENSION
][8];

353 
__À32
 
	m˝_∑ylﬂd
;

354 
__u8
 
	mvîsi⁄
[
VERSION_LEN
];

355 
__u8
 
	möô_vîsi⁄
[
VERSION_LEN
];

356 } 
__©åibuã__
((
∑cked
));

361 
	#CP_FSCK_FLAG
 0x00000010

	)

362 
	#CP_ERROR_FLAG
 0x00000008

	)

363 
	#CP_COMPACT_SUM_FLAG
 0x00000004

	)

364 
	#CP_ORPHAN_PRESENT_FLAG
 0x00000002

	)

365 
	#CP_UMOUNT_FLAG
 0x00000001

	)

367 
	sf2fs_checkpoöt
 {

368 
__À64
 
	mcheckpoöt_vî
;

369 
__À64
 
	mu£r_block_cou¡
;

370 
__À64
 
	mvÆid_block_cou¡
;

371 
__À32
 
	mrsvd_£gmít_cou¡
;

372 
__À32
 
	movî¥ov_£gmít_cou¡
;

373 
__À32
 
	m‰ì_£gmít_cou¡
;

376 
__À32
 
	mcur_node_£gno
[
MAX_ACTIVE_NODE_LOGS
];

377 
__À16
 
	mcur_node_blkoff
[
MAX_ACTIVE_NODE_LOGS
];

379 
__À32
 
	mcur_d©a_£gno
[
MAX_ACTIVE_DATA_LOGS
];

380 
__À16
 
	mcur_d©a_blkoff
[
MAX_ACTIVE_DATA_LOGS
];

381 
__À32
 
	mck±_Êags
;

382 
__À32
 
	m˝_∑ck_tŸÆ_block_cou¡
;

383 
__À32
 
	m˝_∑ck_°¨t_sum
;

384 
__À32
 
	mvÆid_node_cou¡
;

385 
__À32
 
	mvÆid_öode_cou¡
;

386 
__À32
 
	m√xt_‰ì_nid
;

387 
__À32
 
	msô_vî_bôm≠_byãsize
;

388 
__À32
 
	m«t_vî_bôm≠_byãsize
;

389 
__À32
 
	mchecksum_off£t
;

390 
__À64
 
	mñ≠£d_time
;

392 
	mÆloc_ty≥
[
MAX_ACTIVE_LOGS
];

395 
	msô_«t_vîsi⁄_bôm≠
[1];

396 } 
__©åibuã__
((
∑cked
));

401 
	#F2FS_ORPHANS_PER_BLOCK
 1020

	)

403 
	sf2fs_‹ph™_block
 {

404 
__À32
 
	möo
[
F2FS_ORPHANS_PER_BLOCK
];

405 
__À32
 
	mª£rved
;

406 
__À16
 
	mblk_addr
;

407 
__À16
 
	mblk_cou¡
;

408 
__À32
 
	míåy_cou¡
;

409 
__À32
 
	mcheck_sum
;

410 } 
__©åibuã__
((
∑cked
));

415 
	sf2fs_exã¡
 {

416 
__À32
 
	mfofs
;

417 
__À32
 
	mblk_addr
;

418 
__À32
 
	mÀn
;

419 } 
__©åibuã__
((
∑cked
));

421 
	#F2FS_NAME_LEN
 255

	)

422 
	#F2FS_INLINE_XATTR_ADDRS
 50

	)

423 
	#DEF_ADDRS_PER_INODE
 923

	)

424 
	#ADDRS_PER_INODE
(
fi
Ë
	`addrs_≥r_öode
(fi)

	)

425 
	#ADDRS_PER_BLOCK
 1018

	)

426 
	#NIDS_PER_BLOCK
 1018

	)

428 
	#NODE_DIR1_BLOCK
 (
DEF_ADDRS_PER_INODE
 + 1)

	)

429 
	#NODE_DIR2_BLOCK
 (
DEF_ADDRS_PER_INODE
 + 2)

	)

430 
	#NODE_IND1_BLOCK
 (
DEF_ADDRS_PER_INODE
 + 3)

	)

431 
	#NODE_IND2_BLOCK
 (
DEF_ADDRS_PER_INODE
 + 4)

	)

432 
	#NODE_DIND_BLOCK
 (
DEF_ADDRS_PER_INODE
 + 5)

	)

434 
	#F2FS_INLINE_XATTR
 0x01

	)

435 
	#F2FS_INLINE_DATA
 0x02

	)

436 
	#F2FS_INLINE_DENTRY
 0x04

	)

437 
	#F2FS_DATA_EXIST
 0x08

	)

439 
	#MAX_INLINE_DATA
 ((
__À32
Ë* (
DEF_ADDRS_PER_INODE
 - \

440 
F2FS_INLINE_XATTR_ADDRS
 - 1))

	)

442 
	#INLINE_DATA_OFFSET
 (
PAGE_CACHE_SIZE
 - (
node_foŸî
) \

443 - (
__À32
)*(
DEF_ADDRS_PER_INODE
 + 5 - 1))

	)

445 
	#DEF_DIR_LEVEL
 0

	)

447 
	sf2fs_öode
 {

448 
__À16
 
	mi_mode
;

449 
__u8
 
	mi_advi£
;

450 
__u8
 
	mi_ölöe
;

451 
__À32
 
	mi_uid
;

452 
__À32
 
	mi_gid
;

453 
__À32
 
	mi_löks
;

454 
__À64
 
	mi_size
;

455 
__À64
 
	mi_blocks
;

456 
__À64
 
	mi_©ime
;

457 
__À64
 
	mi_˘ime
;

458 
__À64
 
	mi_mtime
;

459 
__À32
 
	mi_©ime_n£c
;

460 
__À32
 
	mi_˘ime_n£c
;

461 
__À32
 
	mi_mtime_n£c
;

462 
__À32
 
	mi_gíî©i⁄
;

463 
__À32
 
	mi_cuºít_dïth
;

464 
__À32
 
	mi_x©å_nid
;

465 
__À32
 
	mi_Êags
;

466 
__À32
 
	mi_pöo
;

467 
__À32
 
	mi_«mñí
;

468 
__u8
 
	mi_«me
[
F2FS_NAME_LEN
];

469 
__u8
 
	mi_dú_Àvñ
;

471 
f2fs_exã¡
 
	mi_ext
;

473 
__À32
 
	mi_addr
[
DEF_ADDRS_PER_INODE
];

475 
__À32
 
	mi_nid
[5];

477 } 
__©åibuã__
((
∑cked
));

479 
	sdúe˘_node
 {

480 
__À32
 
	maddr
[
ADDRS_PER_BLOCK
];

481 } 
__©åibuã__
((
∑cked
));

483 
	södúe˘_node
 {

484 
__À32
 
	mnid
[
NIDS_PER_BLOCK
];

485 } 
__©åibuã__
((
∑cked
));

488 
	mCOLD_BIT_SHIFT
 = 0,

489 
	mFSYNC_BIT_SHIFT
,

490 
	mDENT_BIT_SHIFT
,

491 
	mOFFSET_BIT_SHIFT


494 
	#XATTR_NODE_OFFSET
 (((()-1Ë<< 
OFFSET_BIT_SHIFT
) \

495 >> 
OFFSET_BIT_SHIFT
)

	)

497 
	snode_foŸî
 {

498 
__À32
 
	mnid
;

499 
__À32
 
	möo
;

500 
__À32
 
	mÊag
;

501 
__À64
 
	m˝_vî
;

502 
__À32
 
	m√xt_blkaddr
;

503 } 
__©åibuã__
((
∑cked
));

505 
	sf2fs_node
 {

508 
f2fs_öode
 
	mi
;

509 
dúe˘_node
 
	mdn
;

510 
ödúe˘_node
 
	mö
;

512 
node_foŸî
 
	mfoŸî
;

513 } 
__©åibuã__
((
∑cked
));

518 
	#NAT_ENTRY_PER_BLOCK
 (
PAGE_CACHE_SIZE
 / (
f2fs_«t_íåy
))

	)

520 
	sf2fs_«t_íåy
 {

521 
__u8
 
	mvîsi⁄
;

522 
__À32
 
	möo
;

523 
__À32
 
	mblock_addr
;

524 } 
__©åibuã__
((
∑cked
));

526 
	sf2fs_«t_block
 {

527 
f2fs_«t_íåy
 
	míåõs
[
NAT_ENTRY_PER_BLOCK
];

528 } 
__©åibuã__
((
∑cked
));

537 
	#SIT_VBLOCK_MAP_SIZE
 64

	)

538 
	#SIT_ENTRY_PER_BLOCK
 (
PAGE_CACHE_SIZE
 / (
f2fs_sô_íåy
))

	)

544 
	#F2FS_MAX_SEGMENT
 ((16 * 1024 * 1024Ë/ 2)

	)

545 
	#MAX_SIT_BITMAP_SIZE
 ((
F2FS_MAX_SEGMENT
 / 
SIT_ENTRY_PER_BLOCK
Ë/ 8)

	)

552 
	#SIT_VBLOCKS_SHIFT
 10

	)

553 
	#SIT_VBLOCKS_MASK
 ((1 << 
SIT_VBLOCKS_SHIFT
Ë- 1)

	)

554 
	#GET_SIT_VBLOCKS
(
øw_sô
) \

555 (
	`À16_to_˝u
((
øw_sô
)->
vblocks
Ë& 
SIT_VBLOCKS_MASK
)

	)

556 
	#GET_SIT_TYPE
(
øw_sô
) \

557 ((
	`À16_to_˝u
((
øw_sô
)->
vblocks
Ë& ~
SIT_VBLOCKS_MASK
) \

558 >> 
SIT_VBLOCKS_SHIFT
)

	)

560 
	sf2fs_sô_íåy
 {

561 
__À16
 
	mvblocks
;

562 
__u8
 
	mvÆid_m≠
[
SIT_VBLOCK_MAP_SIZE
];

563 
__À64
 
	mmtime
;

564 } 
__©åibuã__
((
∑cked
));

566 
	sf2fs_sô_block
 {

567 
f2fs_sô_íåy
 
	míåõs
[
SIT_ENTRY_PER_BLOCK
];

568 } 
__©åibuã__
((
∑cked
));

585 
	#ENTRIES_IN_SUM
 512

	)

586 
	#SUMMARY_SIZE
 (7Ë

	)

587 
	#SUM_FOOTER_SIZE
 (5Ë

	)

588 
	#SUM_ENTRIES_SIZE
 (
SUMMARY_SIZE
 * 
ENTRIES_IN_SUM
)

	)

591 
	sf2fs_summ¨y
 {

592 
__À32
 
	mnid
;

594 
__u8
 
	mª£rved
[3];

596 
__u8
 
	mvîsi⁄
;

597 
__À16
 
	mofs_ö_node
;

598 } 
__©åibuã__
((
∑cked
));

600 } 
__©åibuã__
((
∑cked
));

603 
	#SUM_TYPE_NODE
 (1)

	)

604 
	#SUM_TYPE_DATA
 (0)

	)

606 
	ssumm¨y_foŸî
 {

607 
	míåy_ty≥
;

608 
__u32
 
	mcheck_sum
;

609 } 
__©åibuã__
((
∑cked
));

611 
	#SUM_JOURNAL_SIZE
 (
F2FS_BLKSIZE
 - 
SUM_FOOTER_SIZE
 -\

612 
SUM_ENTRIES_SIZE
)

	)

613 
	#NAT_JOURNAL_ENTRIES
 ((
SUM_JOURNAL_SIZE
 - 2) /\

614 (
«t_jou∫Æ_íåy
))

	)

615 
	#NAT_JOURNAL_RESERVED
 ((
SUM_JOURNAL_SIZE
 - 2) %\

616 (
«t_jou∫Æ_íåy
))

	)

617 
	#SIT_JOURNAL_ENTRIES
 ((
SUM_JOURNAL_SIZE
 - 2) /\

618 (
sô_jou∫Æ_íåy
))

	)

619 
	#SIT_JOURNAL_RESERVED
 ((
SUM_JOURNAL_SIZE
 - 2) %\

620 (
sô_jou∫Æ_íåy
))

	)

626 
	mNAT_JOURNAL
 = 0,

627 
	mSIT_JOURNAL


630 
	s«t_jou∫Æ_íåy
 {

631 
__À32
 
	mnid
;

632 
f2fs_«t_íåy
 
	m√
;

633 } 
__©åibuã__
((
∑cked
));

635 
	s«t_jou∫Æ
 {

636 
«t_jou∫Æ_íåy
 
	míåõs
[
NAT_JOURNAL_ENTRIES
];

637 
__u8
 
	mª£rved
[
NAT_JOURNAL_RESERVED
];

638 } 
__©åibuã__
((
∑cked
));

640 
	ssô_jou∫Æ_íåy
 {

641 
__À32
 
	m£gno
;

642 
f2fs_sô_íåy
 
	m£
;

643 } 
__©åibuã__
((
∑cked
));

645 
	ssô_jou∫Æ
 {

646 
sô_jou∫Æ_íåy
 
	míåõs
[
SIT_JOURNAL_ENTRIES
];

647 
__u8
 
	mª£rved
[
SIT_JOURNAL_RESERVED
];

648 } 
__©åibuã__
((
∑cked
));

651 
	sf2fs_summ¨y_block
 {

652 
f2fs_summ¨y
 
	míåõs
[
ENTRIES_IN_SUM
];

654 
__À16
 
	mn_«ts
;

655 
__À16
 
	mn_sôs
;

659 
«t_jou∫Æ
 
	m«t_j
;

660 
sô_jou∫Æ
 
	msô_j
;

662 
summ¨y_foŸî
 
	mfoŸî
;

663 } 
__©åibuã__
((
∑cked
));

668 
	#F2FS_DOT_HASH
 0

	)

669 
	#F2FS_DDOT_HASH
 
F2FS_DOT_HASH


	)

670 
	#F2FS_MAX_HASH
 (~((0x3ULLË<< 62))

	)

671 
	#F2FS_HASH_COL_BIT
 ((0x1ULLË<< 63)

	)

673 
__À32
 
	tf2fs_hash_t
;

676 
	#F2FS_SLOT_LEN
 8

	)

677 
	#F2FS_SLOT_LEN_BITS
 3

	)

679 
	#GET_DENTRY_SLOTS
(
x
Ë((x + 
F2FS_SLOT_LEN
 - 1Ë>> 
F2FS_SLOT_LEN_BITS
)

	)

682 
	#NR_DENTRY_IN_BLOCK
 214

	)

685 
	#MAX_DIR_HASH_DEPTH
 63

	)

687 
	#SIZE_OF_DIR_ENTRY
 11

	)

688 
	#SIZE_OF_DENTRY_BITMAP
 ((
NR_DENTRY_IN_BLOCK
 + 
BITS_PER_BYTE
 - 1) / \

689 
BITS_PER_BYTE
)

	)

690 
	#SIZE_OF_RESERVED
 (
PAGE_SIZE
 - ((
SIZE_OF_DIR_ENTRY
 + \

691 
F2FS_SLOT_LEN
) * \

692 
NR_DENTRY_IN_BLOCK
 + 
SIZE_OF_DENTRY_BITMAP
))

	)

695 
	sf2fs_dú_íåy
 {

696 
__À32
 
	mhash_code
;

697 
__À32
 
	möo
;

698 
__À16
 
	m«me_Àn
;

699 
__u8
 
	mfûe_ty≥
;

700 } 
__©åibuã__
((
∑cked
));

703 
	sf2fs_díåy_block
 {

705 
__u8
 
	mdíåy_bôm≠
[
SIZE_OF_DENTRY_BITMAP
];

706 
__u8
 
	mª£rved
[
SIZE_OF_RESERVED
];

707 
f2fs_dú_íåy
 
	mdíåy
[
NR_DENTRY_IN_BLOCK
];

708 
__u8
 
	mfûíame
[
NR_DENTRY_IN_BLOCK
][
F2FS_SLOT_LEN
];

709 } 
__©åibuã__
((
∑cked
));

712 
	#NR_INLINE_DENTRY
 (
MAX_INLINE_DATA
 * 
BITS_PER_BYTE
 / \

713 ((
SIZE_OF_DIR_ENTRY
 + 
F2FS_SLOT_LEN
) * \

714 
BITS_PER_BYTE
 + 1))

	)

715 
	#INLINE_DENTRY_BITMAP_SIZE
 ((
NR_INLINE_DENTRY
 + \

716 
BITS_PER_BYTE
 - 1Ë/ BITS_PER_BYTE)

	)

717 
	#INLINE_RESERVED_SIZE
 (
MAX_INLINE_DATA
 - \

718 ((
SIZE_OF_DIR_ENTRY
 + 
F2FS_SLOT_LEN
) * \

719 
NR_INLINE_DENTRY
 + 
INLINE_DENTRY_BITMAP_SIZE
))

	)

722 
	sf2fs_ölöe_díåy
 {

723 
__u8
 
	mdíåy_bôm≠
[
INLINE_DENTRY_BITMAP_SIZE
];

724 
__u8
 
	mª£rved
[
INLINE_RESERVED_SIZE
];

725 
f2fs_dú_íåy
 
	mdíåy
[
NR_INLINE_DENTRY
];

726 
__u8
 
	mfûíame
[
NR_INLINE_DENTRY
][
F2FS_SLOT_LEN
];

727 } 
	g__∑cked
;

730 
	eFILE_TYPE
 {

731 
	mF2FS_FT_UNKNOWN
,

732 
	mF2FS_FT_REG_FILE
,

733 
	mF2FS_FT_DIR
,

734 
	mF2FS_FT_CHRDEV
,

735 
	mF2FS_FT_BLKDEV
,

736 
	mF2FS_FT_FIFO
,

737 
	mF2FS_FT_SOCK
,

738 
	mF2FS_FT_SYMLINK
,

739 
	mF2FS_FT_MAX
,

741 
	mF2FS_FT_ORPHAN
,

742 
	mF2FS_FT_XATTR
,

743 
	mF2FS_FT_LAST_FILE_TYPE
 = 
F2FS_FT_XATTR
,

748 
	mLFS
 = 0,

749 
	mSSR


752 
ASCIIToUNICODE
(
u_öt16_t
 *, 
u_öt8_t
 *);

753 
log_ba£_2
(
u_öt32_t
);

754 
addrs_≥r_öode
(
f2fs_öode
 *);

756 
gë_bôs_ö_byã
(
n
);

757 
£t_bô
(
ƒ
,* 
addr
);

758 
˛ór_bô
(
ƒ
, * 
addr
);

759 
ã°_bô
(
ƒ
, c⁄° * 
addr
);

760 
f2fs_ã°_bô
(, const *);

761 
f2fs_£t_bô
(, *);

762 
f2fs_˛ór_bô
(, *);

763 
föd_√xt_bô
(const *,

766 
u_öt32_t
 
f2fs_ˇl_¸c32
(u_int32_t, *, );

767 
f2fs_¸c_vÆid
(
u_öt32_t
 
blk_¸c
, *
buf
, 
Àn
);

769 
f2fs_öô_c⁄figuøti⁄
(
f2fs_c⁄figuøti⁄
 *);

770 
f2fs_dev_is_umou¡ed
(
f2fs_c⁄figuøti⁄
 *);

771 
f2fs_gë_devi˚_öfo
(
f2fs_c⁄figuøti⁄
 *);

772 
f2fs_föÆize_devi˚
(
f2fs_c⁄figuøti⁄
 *);

774 
dev_ªad
(*, 
__u64
, 
size_t
);

775 
dev_wrôe
(*, 
__u64
, 
size_t
);

776 
dev_wrôe_block
(*, 
__u64
);

777 
dev_wrôe_dump
(*, 
__u64
, 
size_t
);

779 
dev_fûl
(*, 
__u64
, 
size_t
);

781 
dev_ªad_block
(*, 
__u64
);

782 
dev_ªad_blocks
(*, 
__u64
, 
__u32
 );

784 
dev_ªad_vîsi⁄
(*, 
__u64
, 
size_t
);

785 
gë_kî√l_vîsi⁄
(
__u8
 *);

786 
f2fs_hash_t
 
f2fs_díåy_hash
(const *, );

788 
f2fs_c⁄figuøti⁄
 
c⁄fig
;

790 
	#ALIGN
(
vÆ
, 
size
Ë((vÆË+ (sizeË- 1Ë/ (size)

	)

791 
	#SEG_ALIGN
(
blks
Ë
	`ALIGN
(blks, 
c⁄fig
.
blks_≥r_£g
)

	)

792 
	#ZONE_ALIGN
(
blks
Ë
	`ALIGN
(blks, 
c⁄fig
.
blks_≥r_£g
 * \

793 
c⁄fig
.
£gs_≥r_z⁄e
)

	)

	@include/list.h

2 
	#POISON_POINTER_DELTA
 0

	)

3 
	#LIST_POISON1
 ((*Ë(0x00100100 + 
POISON_POINTER_DELTA
))

	)

4 
	#LIST_POISON2
 ((*Ë(0x00200200 + 
POISON_POINTER_DELTA
))

	)

6 #i‡!
deföed
(
off£tof
)

7 
	#off£tof
(
TYPE
, 
MEMBER
Ë((
size_t
Ë&((TYPE *)0)->MEMBER)

	)

9 
	#c⁄èöî_of
(
±r
, 
ty≥
, 
membî
) ({ \

10 c⁄° 
	`ty≥of
–((
ty≥
 *)0)->
membî
 ) *
__m±r
 = (
±r
); \

11 (
ty≥
 *)–(*)
__m±r
 - 
	`off£tof
—y≥,
membî
Ë);})

	)

13 
	sli°_hód
 {

14 
li°_hód
 *
	m√xt
, *
	m¥ev
;

17 
	#LIST_HEAD_INIT
(
«me
Ë{ &“ame), &“ameË}

	)

19 
	#LIST_HEAD
(
«me
) \

20 
li°_hód
 
«me
 = 
	`LIST_HEAD_INIT
“ame)

	)

22 
ölöe
 
	$INIT_LIST_HEAD
(
li°_hód
 *
li°
)

24 
li°
->
√xt
 =Üist;

25 
li°
->
¥ev
 =Üist;

26 
	}
}

28 
ölöe
 
	$__li°_add
(
li°_hód
 *
√w
,

29 
li°_hód
 *
¥ev
,

30 
li°_hód
 *
√xt
)

32 
√xt
->
¥ev
 = 
√w
;

33 
√w
->
√xt
 =Çext;

34 
√w
->
¥ev
 =Örev;

35 
¥ev
->
√xt
 = 
√w
;

36 
	}
}

38 
ölöe
 
	$li°_add
(
li°_hód
 *
√w
, li°_hód *
hód
)

40 
	`__li°_add
(
√w
, 
hód
, hód->
√xt
);

41 
	}
}

43 
ölöe
 
	$li°_add_èû
(
li°_hód
 *
√w
, li°_hód *
hód
)

45 
	`__li°_add
(
√w
, 
hód
->
¥ev
, head);

46 
	}
}

48 
ölöe
 
	$__li°_dñ
(
li°_hód
 * 
¥ev
, li°_hód * 
√xt
)

50 
√xt
->
¥ev
 =Örev;

51 
¥ev
->
√xt
 =Çext;

52 
	}
}

54 
ölöe
 
	$__li°_dñ_íåy
(
li°_hód
 *
íåy
)

56 
	`__li°_dñ
(
íåy
->
¥ev
,É¡ry->
√xt
);

57 
	}
}

59 
ölöe
 
	$li°_dñ
(
li°_hód
 *
íåy
)

61 
	`__li°_dñ
(
íåy
->
¥ev
,É¡ry->
√xt
);

62 
íåy
->
√xt
 = 
LIST_POISON1
;

63 
íåy
->
¥ev
 = 
LIST_POISON2
;

64 
	}
}

66 
ölöe
 
	$li°_em±y
(c⁄° 
li°_hód
 *
hód
)

68  
hód
->
√xt
 == head;

69 
	}
}

71 
	#li°_íåy
(
±r
, 
ty≥
, 
membî
) \

72 
	`c⁄èöî_of
(
±r
, 
ty≥
, 
membî
)

	)

74 
	#li°_f‹_óch
(
pos
, 
hód
) \

75 
pos
 = (
hód
)->
√xt
;Öo†!(hód);Öo†pos->√xt)

	)

77 
	#li°_f‹_óch_ß„
(
pos
, 
n
, 
hód
) \

78 
pos
 = (
hód
)->
√xt
, 
n
 =Öos->next;Öos != (head); \

79 
pos
 = 
n
,Ç =Öos->
√xt
)

	)

80 
	#li°_f‹_óch_íåy
(
pos
, 
hód
, 
membî
) \

81 
pos
 = 
	`li°_íåy
((
hód
)->
√xt
, 
	`ty≥of
(*pos), 
membî
); \

82 &
pos
->
membî
 !(
hód
); \

83 
pos
 = 
	`li°_íåy
’os->
membî
.
√xt
, 
	`ty≥of
(*pos), membî))

	)

84 
	#li°_f‹_óch_íåy_ß„
(
pos
, 
n
, 
hód
, 
membî
) \

85 
pos
 = 
	`li°_íåy
((
hód
)->
√xt
, 
	`ty≥of
(*pos), 
membî
), \

86 
n
 = 
	`li°_íåy
(
pos
->
membî
.
√xt
, 
	`ty≥of
(*pos), member); \

87 &
pos
->
membî
 !(
hód
); \

88 
pos
 = 
n
,Ç = 
	`li°_íåy
“->
membî
.
√xt
, 
	`ty≥of
(*n), membî))

	)

	@lib/libf2fs.c

9 
	#_LARGEFILE64_SOURCE


	)

11 
	~<°dio.h
>

12 
	~<°dlib.h
>

13 
	~<°rög.h
>

14 
	~<î∫o.h
>

15 
	~<uni°d.h
>

16 
	~<f˙é.h
>

17 
	~<m¡ít.h
>

18 
	~<time.h
>

19 
	~<sys/°©.h
>

20 
	~<sys/mou¡.h
>

21 
	~<sys/io˘l.h
>

22 
	~<löux/hdªg.h
>

24 
	~<f2fs_fs.h
>

26 
	$ASCIIToUNICODE
(
u_öt16_t
 *
out_buf
, 
u_öt8_t
 *
ö_buf
)

28 
u_öt8_t
 *
pchTempPå
 = 
ö_buf
;

29 
u_öt16_t
 *
pwTempPå
 = 
out_buf
;

31 *
pchTempPå
 != '\0') {

32 *
pwTempPå
 = (
u_öt16_t
)*
pchTempPå
;

33 
pchTempPå
++;

34 
pwTempPå
++;

36 *
pwTempPå
 = '\0';

38 
	}
}

40 
	$log_ba£_2
(
u_öt32_t
 
num
)

42 
ªt
 = 0;

43 i‡(
num
 <= 0 || (num & (num - 1)) != 0)

46 
num
 >>= 1)

47 
ªt
++;

48  
ªt
;

49 
	}
}

54 c⁄° 
	gbôs_ö_byã
[256] = {

73 
	$gë_bôs_ö_byã
(
n
)

75  
bôs_ö_byã
[
n
];

76 
	}
}

78 
	$£t_bô
(
ƒ
,* 
addr
)

80 
mask
, 
ªtvÆ
;

81 *
ADDR
 = (*Ë
addr
;

83 
ADDR
 +
ƒ
 >> 3;

84 
mask
 = 1 << ((
ƒ
 & 0x07));

85 
ªtvÆ
 = 
mask
 & *
ADDR
;

86 *
ADDR
 |
mask
;

87  
ªtvÆ
;

88 
	}
}

90 
	$˛ór_bô
(
ƒ
, * 
addr
)

92 
mask
, 
ªtvÆ
;

93 *
ADDR
 = (*Ë
addr
;

95 
ADDR
 +
ƒ
 >> 3;

96 
mask
 = 1 << ((
ƒ
 & 0x07));

97 
ªtvÆ
 = 
mask
 & *
ADDR
;

98 *
ADDR
 &~
mask
;

99  
ªtvÆ
;

100 
	}
}

102 
	$ã°_bô
(
ƒ
, c⁄° * 
addr
)

104 c⁄° 
__u32
 *
p
 = (c⁄° __u32 *)
addr
;

106 
ƒ
 =Çr ^ 0;

108  ((1 << (
ƒ
 & 31)Ë& (
p
[nr >> 5])) != 0;

109 
	}
}

111 
	$f2fs_ã°_bô
(
ƒ
, c⁄° *
p
)

113 
mask
;

114 *
addr
 = (*)
p
;

116 
addr
 +(
ƒ
 >> 3);

117 
mask
 = 1 << (7 - (
ƒ
 & 0x07));

118  (
mask
 & *
addr
) != 0;

119 
	}
}

121 
	$f2fs_£t_bô
(
ƒ
, *
addr
)

123 
mask
;

124 
ªt
;

126 
addr
 +(
ƒ
 >> 3);

127 
mask
 = 1 << (7 - (
ƒ
 & 0x07));

128 
ªt
 = 
mask
 & *
addr
;

129 *
addr
 |
mask
;

130  
ªt
;

131 
	}
}

133 
	$f2fs_˛ór_bô
(
ƒ
, *
addr
)

135 
mask
;

136 
ªt
;

138 
addr
 +(
ƒ
 >> 3);

139 
mask
 = 1 << (7 - (
ƒ
 & 0x07));

140 
ªt
 = 
mask
 & *
addr
;

141 *
addr
 &~
mask
;

142  
ªt
;

143 
	}
}

145 
ölöe
 
	$__ffs
(
w‹d
)

147 
num
 = 0;

149 #i‡
BITS_PER_LONG
 == 64

150 i‡((
w‹d
 & 0xffffffff) == 0) {

151 
num
 += 32;

152 
w‹d
 >>= 32;

155 i‡((
w‹d
 & 0xffff) == 0) {

156 
num
 += 16;

157 
w‹d
 >>= 16;

159 i‡((
w‹d
 & 0xff) == 0) {

160 
num
 += 8;

161 
w‹d
 >>= 8;

163 i‡((
w‹d
 & 0xf) == 0) {

164 
num
 += 4;

165 
w‹d
 >>= 4;

167 i‡((
w‹d
 & 0x3) == 0) {

168 
num
 += 2;

169 
w‹d
 >>= 2;

171 i‡((
w‹d
 & 0x1) == 0)

172 
num
 += 1;

173  
num
;

174 
	}
}

176 
	$föd_√xt_bô
(c⁄° *
addr
, 
size
,

177 
off£t
)

179 c⁄° *
p
 = 
addr
 + 
	`BIT_WORD
(
off£t
);

180 
ªsu…
 = 
off£t
 & ~(
BITS_PER_LONG
-1);

181 
tmp
;

183 i‡(
off£t
 >
size
)

184  
size
;

185 
size
 -
ªsu…
;

186 
off£t
 %
BITS_PER_LONG
;

187 i‡(
off£t
) {

188 
tmp
 = *(
p
++);

189 
tmp
 &(~0UL << 
off£t
);

190 i‡(
size
 < 
BITS_PER_LONG
)

191 
found_fú°
;

192 i‡(
tmp
)

193 
found_middÀ
;

194 
size
 -
BITS_PER_LONG
;

195 
ªsu…
 +
BITS_PER_LONG
;

197 
size
 & ~(
BITS_PER_LONG
-1)) {

198 i‡((
tmp
 = *(
p
++)))

199 
found_middÀ
;

200 
ªsu…
 +
BITS_PER_LONG
;

201 
size
 -
BITS_PER_LONG
;

203 i‡(!
size
)

204  
ªsu…
;

205 
tmp
 = *
p
;

207 
found_fú°
:

208 
tmp
 &(~0UL >> (
BITS_PER_LONG
 - 
size
));

209 i‡(
tmp
 == 0UL)

210  
ªsu…
 + 
size
;

211 
found_middÀ
:

212  
ªsu…
 + 
	`__ffs
(
tmp
);

213 
	}
}

218 
	#DELTA
 0x9E3779B9

	)

220 
	$TEA_å™sf‹m
(
buf
[4], c⁄° 
ö
[])

222 
__u32
 
sum
 = 0;

223 
__u32
 
b0
 = 
buf
[0], 
b1
 = buf[1];

224 
__u32
 
a
 = 
ö
[0], 
b
 = in[1], 
c
 = in[2], 
d
 = in[3];

225 
n
 = 16;

228 
sum
 +
DELTA
;

229 
b0
 +((
b1
 << 4)+
a
Ë^ (b1+
sum
Ë^ ((b1 >> 5)+
b
);

230 
b1
 +((
b0
 << 4)+
c
Ë^ (b0+
sum
Ë^ ((b0 >> 5)+
d
);

231 } --
n
);

233 
buf
[0] +
b0
;

234 
buf
[1] +
b1
;

236 
	}
}

238 
	$°r2hashbuf
(c⁄° *
msg
, 
Àn
,

239 *
buf
, 
num
)

241 
∑d
, 
vÆ
;

242 
i
;

244 
∑d
 = (
__u32
)
Àn
 | ((__u32)len << 8);

245 
∑d
 |=Öad << 16;

247 
vÆ
 = 
∑d
;

248 i‡(
Àn
 > 
num
 * 4)

249 
Àn
 = 
num
 * 4;

250 
i
 = 0; i < 
Àn
; i++) {

251 i‡((
i
 % 4) == 0)

252 
vÆ
 = 
∑d
;

253 
vÆ
 = 
msg
[
i
] + (val << 8);

254 i‡((
i
 % 4) == 3) {

255 *
buf
++ = 
vÆ
;

256 
vÆ
 = 
∑d
;

257 
num
--;

260 i‡(--
num
 >= 0)

261 *
buf
++ = 
vÆ
;

262 --
num
 >= 0)

263 *
buf
++ = 
∑d
;

265 
	}
}

273 
f2fs_hash_t
 
	$f2fs_díåy_hash
(c⁄° *
«me
, 
Àn
)

275 
__u32
 
hash
;

276 
f2fs_hash_t
 
f2fs_hash
;

277 c⁄° *
p
;

278 
__u32
 
ö
[8], 
buf
[4];

281 i‡((
Àn
 <2Ë&& (
«me
[0] == '.') &&

282 (
«me
[1] == '.' ||Çame[1] == '\0'))

286 
buf
[0] = 0x67452301;

287 
buf
[1] = 0xefcdab89;

288 
buf
[2] = 0x98badcfe;

289 
buf
[3] = 0x10325476;

291 
p
 = 
«me
;

293 
	`°r2hashbuf
(
p
, 
Àn
, 
ö
, 4);

294 
	`TEA_å™sf‹m
(
buf
, 
ö
);

295 
p
 += 16;

296 i‡(
Àn
 <= 16)

298 
Àn
 -= 16;

300 
hash
 = 
buf
[0];

302 
f2fs_hash
 = 
	`˝u_to_À32
(
hash
 & ~
F2FS_HASH_COL_BIT
);

303  
f2fs_hash
;

304 
	}
}

306 
	$addrs_≥r_öode
(
f2fs_öode
 *
i
)

308 i‡(
i
->
i_ölöe
 & 
F2FS_INLINE_XATTR
)

309  
DEF_ADDRS_PER_INODE
 - 
F2FS_INLINE_XATTR_ADDRS
;

310  
DEF_ADDRS_PER_INODE
;

311 
	}
}

316 
	#CRCPOLY_LE
 0xedb88320

	)

318 
u_öt32_t
 
	$f2fs_ˇl_¸c32
(
u_öt32_t
 
¸c
, *
buf
, 
Àn
)

320 
i
;

321 *
p
 = (*)
buf
;

322 
Àn
--) {

323 
¸c
 ^*
p
++;

324 
i
 = 0; i < 8; i++)

325 
¸c
 = (¸¯>> 1Ë^ ((¸¯& 1Ë? 
CRCPOLY_LE
 : 0);

327  
¸c
;

328 
	}
}

330 
	$f2fs_¸c_vÆid
(
u_öt32_t
 
blk_¸c
, *
buf
, 
Àn
)

332 
u_öt32_t
 
ˇl_¸c
 = 0;

334 
ˇl_¸c
 = 
	`f2fs_ˇl_¸c32
(
F2FS_SUPER_MAGIC
, 
buf
, 
Àn
);

336 i‡(
ˇl_¸c
 !
blk_¸c
) {

337 
	`DBG
(0,"CRC validation failed: cal_crc = %u, "

339 
ˇl_¸c
, 
blk_¸c
, 
Àn
);

343 
	}
}

348 
	$f2fs_öô_c⁄figuøti⁄
(
f2fs_c⁄figuøti⁄
 *
c
)

350 
c
->
tŸÆ_£˘‹s
 = 0;

351 
c
->
£˘‹_size
 = 
DEFAULT_SECTOR_SIZE
;

352 
c
->
£˘‹s_≥r_blk
 = 
DEFAULT_SECTORS_PER_BLOCK
;

353 
c
->
blks_≥r_£g
 = 
DEFAULT_BLOCKS_PER_SEGMENT
;

356 
c
->
ª£rved_£gmíts
 = 48;

357 
c
->
ovî¥ovisi⁄
 = 5;

358 
c
->
£gs_≥r_£c
 = 1;

359 
c
->
£cs_≥r_z⁄e
 = 1;

360 
c
->
£gs_≥r_z⁄e
 = 1;

361 
c
->
hóp
 = 1;

362 
c
->
vﬁ_œbñ
 = "";

363 
c
->
devi˚_«me
 = 
NULL
;

364 
c
->
åim
 = 1;

365 
	}
}

367 
	$is_mou¡ed
(c⁄° *
m±
, c⁄° *
devi˚
)

369 
FILE
 *
fûe
 = 
NULL
;

370 
m¡ít
 *
m¡
 = 
NULL
;

372 
fûe
 = 
	`£tm¡ít
(
m±
, "r");

373 i‡(
fûe
 =
NULL
)

376 (
m¡
 = 
	`gëm¡ít
(
fûe
)Ë!
NULL
) {

377 i‡(!
	`°rcmp
(
devi˚
, 
m¡
->
m¡_f¢ame
))

380 
	`ídm¡ít
(
fûe
);

381  
m¡
 ? 1 : 0;

382 
	}
}

384 
	$f2fs_dev_is_umou¡ed
(
f2fs_c⁄figuøti⁄
 *
c
)

386 
°©
 
°_buf
;

387 
ªt
 = 0;

389 
ªt
 = 
	`is_mou¡ed
(
MOUNTED
, 
c
->
devi˚_«me
);

390 i‡(
ªt
) {

391 
	`MSG
(0, "\tError: Notávailable on mounted device!\n");

399 
ªt
 = 
	`is_mou¡ed
("/¥oc/mou¡s", 
c
->
devi˚_«me
);

400 i‡(
ªt
) {

401 
	`MSG
(0, "\tError: Notávailable on mounted device!\n");

409 i‡(
	`°©
(
c
->
devi˚_«me
, &
°_buf
Ë=0 && 
	`S_ISBLK
(°_buf.
°_mode
)) {

410 
fd
 = 
	`›í
(
c
->
devi˚_«me
, 
O_RDONLY
 | 
O_EXCL
);

412 i‡(
fd
 >= 0) {

413 
	`˛o£
(
fd
);

414 } i‡(
î∫o
 =
EBUSY
) {

415 
	`MSG
(0, "\tError: In use byÅhe system!\n");

420 
	}
}

422 
	$gë_kî√l_vîsi⁄
(
__u8
 *
vîsi⁄
)

424 
i
;

425 
i
 = 0; i < 
VERSION_LEN
; i++) {

426 i‡(
vîsi⁄
[
i
] == '\n')

429 
	`mem£t
(
vîsi⁄
 + 
i
, 0, 
VERSION_LEN
 + 1 - i);

430 
	}
}

432 
	$f2fs_gë_devi˚_öfo
(
f2fs_c⁄figuøti⁄
 *
c
)

434 
öt32_t
 
fd
 = 0;

435 
uöt32_t
 
£˘‹_size
;

436 #i‚de‡
BLKGETSIZE64


437 
uöt32_t
 
tŸÆ_£˘‹s
;

439 
°©
 
°©_buf
;

440 
hd_geomëry
 
geom
;

441 
u_öt64_t
 
w™ãd_tŸÆ_£˘‹s
 = 
c
->
tŸÆ_£˘‹s
;

443 
fd
 = 
	`›í
(
c
->
devi˚_«me
, 
O_RDWR
);

444 i‡(
fd
 < 0) {

445 
	`MSG
(0, "\tError: FailedÅo openÅhe device!\n");

448 
c
->
fd
 = fd;

450 
c
->
kd
 = 
	`›í
("/¥oc/vîsi⁄", 
O_RDONLY
);

451 i‡(
c
->
kd
 < 0)

452 
	`MSG
(0, "\tInfo: No support kernel version!\n");

454 i‡(
	`f°©
(
fd
, &
°©_buf
) < 0 ) {

455 
	`MSG
(0, "\tError: FailedÅo getÅhe device stat!\n");

459 i‡(
	`S_ISREG
(
°©_buf
.
°_mode
)) {

460 
c
->
tŸÆ_£˘‹s
 = 
°©_buf
.
°_size
 / c->
£˘‹_size
;

461 } i‡(
	`S_ISBLK
(
°©_buf
.
°_mode
)) {

462 i‡(
	`io˘l
(
fd
, 
BLKSSZGET
, &
£˘‹_size
) < 0) {

463 
	`MSG
(0, "\tError: UsingÅhe default sector size\n");

465 i‡(
c
->
£˘‹_size
 < sector_size) {

466 
	`MSG
(0, "\tError: Cannot setÅhe sector sizeÅo:"

469 
c
->
£˘‹_size
, sector_size);

470 
c
->
£˘‹_size
 = sector_size;

471 
c
->
£˘‹s_≥r_blk
 = 
PAGE_SIZE
 / 
£˘‹_size
;

475 #ifde‡
BLKGETSIZE64


476 i‡(
	`io˘l
(
fd
, 
BLKGETSIZE64
, &
c
->
tŸÆ_£˘‹s
) < 0) {

477 
	`MSG
(0, "\tError: Cannot getÅhe device size\n");

480 
c
->
tŸÆ_£˘‹s
 /c->
£˘‹_size
;

482 i‡(
	`io˘l
(
fd
, 
BLKGETSIZE
, &
tŸÆ_£˘‹s
) < 0) {

483 
	`MSG
(0, "\tError: Cannot getÅhe device size\n");

486 
tŸÆ_£˘‹s
 /
c
->
£˘‹_size
;

487 
c
->
tŸÆ_£˘‹s
 =Åotal_sectors;

489 i‡(
	`io˘l
(
fd
, 
HDIO_GETGEO
, &
geom
) < 0)

490 
c
->
°¨t_£˘‹
 = 0;

492 
c
->
°¨t_£˘‹
 = 
geom
.
°¨t
;

494 
	`MSG
(0, "\tError: VolumeÅype isÇot supported!!!\n");

497 i‡(
w™ãd_tŸÆ_£˘‹s
 && w™ãd_tŸÆ_£˘‹†< 
c
->
tŸÆ_£˘‹s
) {

498 
	`MSG
(0, "Info:ÅŸÆ devi˚ se˘‹†%"
PRIu64
" (in 512bytes)\n",

499 
c
->
tŸÆ_£˘‹s
);

500 
c
->
tŸÆ_£˘‹s
 = 
w™ãd_tŸÆ_£˘‹s
;

503 
	`MSG
(0, "Info: se˘‹ sizê%u\n", 
c
->
£˘‹_size
);

504 
	`MSG
(0, "Info:ÅŸÆ se˘‹†%"
PRIu64
" (in 512bytes)\n",

505 
c
->
tŸÆ_£˘‹s
);

506 i‡(
c
->
tŸÆ_£˘‹s
 <

507 (
F2FS_MIN_VOLUME_SIZE
 / 
DEFAULT_SECTOR_SIZE
)) {

508 
	`MSG
(0, "Error: Min volume size supported is %d\n",

509 
F2FS_MIN_VOLUME_SIZE
);

514 
	}
}

	@lib/libf2fs_io.c

9 
	#_LARGEFILE64_SOURCE


	)

11 
	~<°dio.h
>

12 
	~<°dlib.h
>

13 
	~<°rög.h
>

14 
	~<î∫o.h
>

15 
	~<uni°d.h
>

16 
	~<f˙é.h
>

17 
	~<m¡ít.h
>

18 
	~<time.h
>

19 
	~<sys/°©.h
>

20 
	~<sys/mou¡.h
>

21 
	~<sys/io˘l.h
>

22 
	~<löux/hdªg.h
>

24 
	~<f2fs_fs.h
>

26 
f2fs_c⁄figuøti⁄
 
	gc⁄fig
;

31 
	$dev_ªad_vîsi⁄
(*
buf
, 
__u64
 
off£t
, 
size_t
 
Àn
)

33 i‡(
	`l£ek64
(
c⁄fig
.
kd
, (
off64_t
)
off£t
, 
SEEK_SET
) < 0)

35 i‡(
	`ªad
(
c⁄fig
.
kd
, 
buf
, 
Àn
) < 0)

38 
	}
}

40 
	$dev_ªad
(*
buf
, 
__u64
 
off£t
, 
size_t
 
Àn
)

42 i‡(
	`l£ek64
(
c⁄fig
.
fd
, (
off64_t
)
off£t
, 
SEEK_SET
) < 0)

44 i‡(
	`ªad
(
c⁄fig
.
fd
, 
buf
, 
Àn
) < 0)

47 
	}
}

49 
	$dev_wrôe
(*
buf
, 
__u64
 
off£t
, 
size_t
 
Àn
)

51 i‡(
	`l£ek64
(
c⁄fig
.
fd
, (
off64_t
)
off£t
, 
SEEK_SET
) < 0)

53 i‡(
	`wrôe
(
c⁄fig
.
fd
, 
buf
, 
Àn
) < 0)

56 
	}
}

58 
	$dev_wrôe_block
(*
buf
, 
__u64
 
blk_addr
)

60  
	`dev_wrôe
(
buf
, 
blk_addr
 * 
F2FS_BLKSIZE
, F2FS_BLKSIZE);

61 
	}
}

63 
	$dev_wrôe_dump
(*
buf
, 
__u64
 
off£t
, 
size_t
 
Àn
)

65 i‡(
	`l£ek64
(
c⁄fig
.
dump_fd
, (
off64_t
)
off£t
, 
SEEK_SET
) < 0)

67 i‡(
	`wrôe
(
c⁄fig
.
dump_fd
, 
buf
, 
Àn
) < 0)

70 
	}
}

72 
	$dev_fûl
(*
buf
, 
__u64
 
off£t
, 
size_t
 
Àn
)

75 i‡(*((
__u8
*)
buf
))

77 i‡(
	`l£ek64
(
c⁄fig
.
fd
, (
off64_t
)
off£t
, 
SEEK_SET
) < 0)

79 i‡(
	`wrôe
(
c⁄fig
.
fd
, 
buf
, 
Àn
) < 0)

82 
	}
}

84 
	$dev_ªad_block
(*
buf
, 
__u64
 
blk_addr
)

86  
	`dev_ªad
(
buf
, 
blk_addr
 * 
F2FS_BLKSIZE
, F2FS_BLKSIZE);

87 
	}
}

89 
	$dev_ªad_blocks
(*
buf
, 
__u64
 
addr
, 
__u32
 
ƒ_blks
)

91  
	`dev_ªad
(
buf
, 
addr
 * 
F2FS_BLKSIZE
, 
ƒ_blks
 * F2FS_BLKSIZE);

92 
	}
}

94 
	$f2fs_föÆize_devi˚
(
f2fs_c⁄figuøti⁄
 *
c
)

100 i‡(
	`fsync
(
c
->
fd
) < 0)

101 
	`MSG
(0, "\tError: CouldÇot conduct fsync!!!\n");

103 i‡(
	`˛o£
(
c
->
fd
) < 0)

104 
	`MSG
(0, "\tError: FailedÅo close device file!!!\n");

106 
	`˛o£
(
c
->
kd
);

107 
	}
}

	@mkfs/f2fs_format.c

9 
	#_LARGEFILE64_SOURCE


	)

11 
	~<°dio.h
>

12 
	~<°dlib.h
>

13 
	~<f˙é.h
>

14 
	~<°rög.h
>

15 
	~<uni°d.h
>

16 
	~<sys/°©.h
>

17 
	~<sys/mou¡.h
>

18 
	~<time.h
>

19 
	~<uuid/uuid.h
>

21 
	~"f2fs_fs.h
"

22 
	~"f2fs_f‹m©_utûs.h
"

24 
f2fs_c⁄figuøti⁄
 
c⁄fig
;

25 
f2fs_su≥r_block
 
	gsb
;

26 
f2fs_checkpoöt
 *
	g˝
;

29 
	#¥ev_z⁄e
(
cur
Ë(
c⁄fig
.
cur_£g
[cur] - c⁄fig.
£gs_≥r_z⁄e
)

	)

30 
	#√xt_z⁄e
(
cur
Ë(
c⁄fig
.
cur_£g
[cur] + c⁄fig.
£gs_≥r_z⁄e
)

	)

31 
	#œ°_z⁄e
(
cur
Ë((cu∏- 1Ë* 
c⁄fig
.
£gs_≥r_z⁄e
)

	)

32 
	#œ°_£˘i⁄
(
cur
Ë(cu∏+ (
c⁄fig
.
£cs_≥r_z⁄e
 - 1Ë* c⁄fig.
£gs_≥r_£c
)

	)

34 
	#£t_sb_À64
(
membî
, 
vÆ
Ë(
sb
.membî = 
	`˝u_to_À64
(vÆ))

	)

35 
	#£t_sb_À32
(
membî
, 
vÆ
Ë(
sb
.membî = 
	`˝u_to_À32
(vÆ))

	)

36 
	#£t_sb_À16
(
membî
, 
vÆ
Ë(
sb
.membî = 
	`˝u_to_À16
(vÆ))

	)

37 
	#gë_sb_À64
(
membî
Ë
	`À64_to_˝u
(
sb
.membî)

	)

38 
	#gë_sb_À32
(
membî
Ë
	`À32_to_˝u
(
sb
.membî)

	)

39 
	#gë_sb_À16
(
membî
Ë
	`À16_to_˝u
(
sb
.membî)

	)

41 
	#£t_sb
(
membî
, 
vÆ
) \

43 
	`ty≥of
(
sb
.
membî
Ë
t
; \

44 (
t
)) { \

45 8: 
	`£t_sb_À64
(
membî
, 
vÆ
); ; \

46 4: 
	`£t_sb_À32
(
membî
, 
vÆ
); ; \

47 2: 
	`£t_sb_À16
(
membî
, 
vÆ
); ; \

49 } 0)

	)

51 
	#gë_sb
(
membî
) \

53 
	`ty≥of
(
sb
.
membî
Ë
t
; \

54 (
t
)) { \

55 8: 
t
 = 
	`gë_sb_À64
(
membî
); ; \

56 4: 
t
 = 
	`gë_sb_À32
(
membî
); ; \

57 2: 
t
 = 
	`gë_sb_À16
(
membî
); ; \

59 
t
; \

60 })

	)

62 
	#£t_˝_À64
(
membî
, 
vÆ
Ë(
˝
->membî = 
	`˝u_to_À64
(vÆ))

	)

63 
	#£t_˝_À32
(
membî
, 
vÆ
Ë(
˝
->membî = 
	`˝u_to_À32
(vÆ))

	)

64 
	#£t_˝_À16
(
membî
, 
vÆ
Ë(
˝
->membî = 
	`˝u_to_À16
(vÆ))

	)

65 
	#gë_˝_À64
(
membî
Ë
	`À64_to_˝u
(
˝
->membî)

	)

66 
	#gë_˝_À32
(
membî
Ë
	`À32_to_˝u
(
˝
->membî)

	)

67 
	#gë_˝_À16
(
membî
Ë
	`À16_to_˝u
(
˝
->membî)

	)

69 
	#£t_˝
(
membî
, 
vÆ
) \

71 
	`ty≥of
(
˝
->
membî
Ë
t
; \

72 (
t
)) { \

73 8: 
	`£t_˝_À64
(
membî
, 
vÆ
); ; \

74 4: 
	`£t_˝_À32
(
membî
, 
vÆ
); ; \

75 2: 
	`£t_˝_À16
(
membî
, 
vÆ
); ; \

77 } 0)

	)

79 
	#gë_˝
(
membî
) \

81 
	`ty≥of
(
˝
->
membî
Ë
t
; \

82 (
t
)) { \

83 8: 
t
 = 
	`gë_˝_À64
(
membî
); ; \

84 4: 
t
 = 
	`gë_˝_À32
(
membî
); ; \

85 2: 
t
 = 
	`gë_˝_À16
(
membî
); ; \

87 
t
; \

88 })

	)

91 c⁄° *
	gmedü_ext_li°s
[] = {

118 
NULL


121 
	$c⁄figuª_exãnsi⁄_li°
()

123 c⁄° **
exéi°
 = 
medü_ext_li°s
;

124 *
ext_°r
 = 
c⁄fig
.
exãnsi⁄_li°
;

125 *
ue
;

126 
«me_Àn
;

127 
i
 = 0;

129 
sb
.
exãnsi⁄_cou¡
 = 0;

130 
	`mem£t
(
sb
.
exãnsi⁄_li°
, 0,

131 (
sb
.
exãnsi⁄_li°
));

133 *
exéi°
) {

134 
«me_Àn
 = 
	`°æí
(*
exéi°
);

135 
	`mem˝y
(
sb
.
exãnsi⁄_li°
[
i
++], *
exéi°
, 
«me_Àn
);

136 
exéi°
++;

138 
	`£t_sb
(
exãnsi⁄_cou¡
, 
i
);

140 i‡(!
ext_°r
)

144 
ue
 = 
	`°πok
(
ext_°r
, ",");

145 
ue
 !
NULL
) {

146 
«me_Àn
 = 
	`°æí
(
ue
);

147 
	`mem˝y
(
sb
.
exãnsi⁄_li°
[
i
++], 
ue
, 
«me_Àn
);

148 
ue
 = 
	`°πok
(
NULL
, ",");

149 i‡(
i
 >
F2FS_MAX_EXTENSION
)

153 
	`£t_sb
(
exãnsi⁄_cou¡
, 
i
);

155 
	`‰ì
(
c⁄fig
.
exãnsi⁄_li°
);

156 
	}
}

158 
	$f2fs_¥ï¨e_su≥r_block
()

160 
u_öt32_t
 
blk_size_byãs
;

161 
u_öt32_t
 
log_£˘‹size
, 
log_£˘‹s_≥r_block
;

162 
u_öt32_t
 
log_blocksize
, 
log_blks_≥r_£g
;

163 
u_öt32_t
 
£gmít_size_byãs
, 
z⁄e_size_byãs
;

164 
u_öt32_t
 
sô_£gmíts
;

165 
u_öt32_t
 
blocks_f‹_sô
, 
blocks_f‹_«t
, 
blocks_f‹_sß
;

166 
u_öt32_t
 
tŸÆ_vÆid_blks_avaûabÀ
;

167 
u_öt64_t
 
z⁄e_Æign_°¨t_off£t
, 
diff
, 
tŸÆ_mëa_£gmíts
;

168 
u_öt32_t
 
sô_bôm≠_size
, 
max_sô_bôm≠_size
;

169 
u_öt32_t
 
max_«t_bôm≠_size
, 
max_«t_£gmíts
;

170 
u_öt32_t
 
tŸÆ_z⁄es
;

172 
	`£t_sb
(
magic
, 
F2FS_SUPER_MAGIC
);

173 
	`£t_sb
(
maj‹_vî
, 
F2FS_MAJOR_VERSION
);

174 
	`£t_sb
(
mö‹_vî
, 
F2FS_MINOR_VERSION
);

176 
log_£˘‹size
 = 
	`log_ba£_2
(
c⁄fig
.
£˘‹_size
);

177 
log_£˘‹s_≥r_block
 = 
	`log_ba£_2
(
c⁄fig
.
£˘‹s_≥r_blk
);

178 
log_blocksize
 = 
log_£˘‹size
 + 
log_£˘‹s_≥r_block
;

179 
log_blks_≥r_£g
 = 
	`log_ba£_2
(
c⁄fig
.
blks_≥r_£g
);

181 
	`£t_sb
(
log_£˘‹size
,Üog_sectorsize);

182 
	`£t_sb
(
log_£˘‹s_≥r_block
,Üog_sectors_per_block);

184 
	`£t_sb
(
log_blocksize
,Üog_blocksize);

185 
	`£t_sb
(
log_blocks_≥r_£g
, 
log_blks_≥r_£g
);

187 
	`£t_sb
(
£gs_≥r_£c
, 
c⁄fig
.segs_per_sec);

188 
	`£t_sb
(
£cs_≥r_z⁄e
, 
c⁄fig
.secs_per_zone);

190 
blk_size_byãs
 = 1 << 
log_blocksize
;

191 
£gmít_size_byãs
 = 
blk_size_byãs
 * 
c⁄fig
.
blks_≥r_£g
;

192 
z⁄e_size_byãs
 =

193 
blk_size_byãs
 * 
c⁄fig
.
£cs_≥r_z⁄e
 *

194 
c⁄fig
.
£gs_≥r_£c
 * c⁄fig.
blks_≥r_£g
;

196 
sb
.
checksum_off£t
 = 0;

198 
	`£t_sb
(
block_cou¡
, 
c⁄fig
.
tŸÆ_£˘‹s
 >> 
log_£˘‹s_≥r_block
);

200 
z⁄e_Æign_°¨t_off£t
 =

201 (
c⁄fig
.
°¨t_£˘‹
 * 
DEFAULT_SECTOR_SIZE
 +

202 2 * 
F2FS_BLKSIZE
 + 
z⁄e_size_byãs
 - 1) /

203 
z⁄e_size_byãs
 * zone_size_bytes -

204 
c⁄fig
.
°¨t_£˘‹
 * 
DEFAULT_SECTOR_SIZE
;

206 i‡(
c⁄fig
.
°¨t_£˘‹
 % 
DEFAULT_SECTORS_PER_BLOCK
) {

207 
	`MSG
(1, "\tWARN: Align start sectorÇumberÅoÅheÖage unit\n");

208 
	`MSG
(1, "\ti.e., start sector: %d, ofs:%d (sects/page: %d)\n",

209 
c⁄fig
.
°¨t_£˘‹
,

210 
c⁄fig
.
°¨t_£˘‹
 % 
DEFAULT_SECTORS_PER_BLOCK
,

211 
DEFAULT_SECTORS_PER_BLOCK
);

214 
	`£t_sb
(
£gmít_cou¡
, (
c⁄fig
.
tŸÆ_£˘‹s
 * 
DEFAULT_SECTOR_SIZE
 -

215 
z⁄e_Æign_°¨t_off£t
Ë/ 
£gmít_size_byãs
);

217 
	`£t_sb
(
£gmít0_blkaddr
, 
z⁄e_Æign_°¨t_off£t
 / 
blk_size_byãs
);

218 
sb
.
˝_blkaddr
 = sb.
£gmít0_blkaddr
;

220 
	`MSG
(0, "Info: z⁄êÆig√d segmít0 blkaddr: %u\n", 
	`gë_sb
(
£gmít0_blkaddr
));

222 
	`£t_sb
(
£gmít_cou¡_ck±
, 
F2FS_NUMBER_OF_CHECKPOINT_PACK
);

224 
	`£t_sb
(
sô_blkaddr
, 
	`gë_sb
(
£gmít0_blkaddr
Ë+ gë_sb(
£gmít_cou¡_ck±
) *

225 
c⁄fig
.
blks_≥r_£g
);

227 
blocks_f‹_sô
 = 
	`ALIGN
(
	`gë_sb
(
£gmít_cou¡
), 
SIT_ENTRY_PER_BLOCK
);

229 
sô_£gmíts
 = 
	`SEG_ALIGN
(
blocks_f‹_sô
);

231 
	`£t_sb
(
£gmít_cou¡_sô
, 
sô_£gmíts
 * 2);

233 
	`£t_sb
(
«t_blkaddr
, 
	`gë_sb
(
sô_blkaddr
Ë+ gë_sb(
£gmít_cou¡_sô
) *

234 
c⁄fig
.
blks_≥r_£g
);

236 
tŸÆ_vÆid_blks_avaûabÀ
 = (
	`gë_sb
(
£gmít_cou¡
) -

237 (
	`gë_sb
(
£gmít_cou¡_ck±
Ë+ gë_sb(
£gmít_cou¡_sô
))) *

238 
c⁄fig
.
blks_≥r_£g
;

240 
blocks_f‹_«t
 = 
	`ALIGN
(
tŸÆ_vÆid_blks_avaûabÀ
, 
NAT_ENTRY_PER_BLOCK
);

242 
	`£t_sb
(
£gmít_cou¡_«t
, 
	`SEG_ALIGN
(
blocks_f‹_«t
));

248 
sô_bôm≠_size
 = ((
	`gë_sb
(
£gmít_cou¡_sô
) / 2) <<

249 
log_blks_≥r_£g
) / 8;

251 i‡(
sô_bôm≠_size
 > 
MAX_SIT_BITMAP_SIZE
)

252 
max_sô_bôm≠_size
 = 
MAX_SIT_BITMAP_SIZE
;

254 
max_sô_bôm≠_size
 = 
sô_bôm≠_size
;

260 i‡(
max_sô_bôm≠_size
 >

261 (
CHECKSUM_OFFSET
 - (
f2fs_checkpoöt
) + 65)) {

262 
max_«t_bôm≠_size
 = 
CHECKSUM_OFFSET
 - (
f2fs_checkpoöt
) + 1;

263 
	`£t_sb
(
˝_∑ylﬂd
, 
	`F2FS_BLK_ALIGN
(
max_sô_bôm≠_size
));

265 
max_«t_bôm≠_size
 = 
CHECKSUM_OFFSET
 - (
f2fs_checkpoöt
) + 1

266 - 
max_sô_bôm≠_size
;

267 
sb
.
˝_∑ylﬂd
 = 0;

270 
max_«t_£gmíts
 = (
max_«t_bôm≠_size
 * 8Ë>> 
log_blks_≥r_£g
;

272 i‡(
	`gë_sb
(
£gmít_cou¡_«t
Ë> 
max_«t_£gmíts
)

273 
	`£t_sb
(
£gmít_cou¡_«t
, 
max_«t_£gmíts
);

275 
	`£t_sb
(
£gmít_cou¡_«t
, 
	`gë_sb
(segment_count_nat) * 2);

277 
	`£t_sb
(
sß_blkaddr
, 
	`gë_sb
(
«t_blkaddr
Ë+ gë_sb(
£gmít_cou¡_«t
) *

278 
c⁄fig
.
blks_≥r_£g
);

280 
tŸÆ_vÆid_blks_avaûabÀ
 = (
	`gë_sb
(
£gmít_cou¡
) -

281 (
	`gë_sb
(
£gmít_cou¡_ck±
) +

282 
	`gë_sb
(
£gmít_cou¡_sô
) +

283 
	`gë_sb
(
£gmít_cou¡_«t
))) *

284 
c⁄fig
.
blks_≥r_£g
;

286 
blocks_f‹_sß
 = 
tŸÆ_vÆid_blks_avaûabÀ
 /

287 
c⁄fig
.
blks_≥r_£g
 + 1;

289 
	`£t_sb
(
£gmít_cou¡_sß
, 
	`SEG_ALIGN
(
blocks_f‹_sß
));

291 
tŸÆ_mëa_£gmíts
 = 
	`gë_sb
(
£gmít_cou¡_ck±
) +

292 
	`gë_sb
(
£gmít_cou¡_sô
) +

293 
	`gë_sb
(
£gmít_cou¡_«t
) +

294 
	`gë_sb
(
£gmít_cou¡_sß
);

295 
diff
 = 
tŸÆ_mëa_£gmíts
 % (
c⁄fig
.
£gs_≥r_z⁄e
);

296 i‡(
diff
)

297 
	`£t_sb
(
£gmít_cou¡_sß
, 
	`gë_sb
(segment_count_ssa) +

298 (
c⁄fig
.
£gs_≥r_z⁄e
 - 
diff
));

300 
	`£t_sb
(
maö_blkaddr
, 
	`gë_sb
(
sß_blkaddr
Ë+ gë_sb(
£gmít_cou¡_sß
) *

301 
c⁄fig
.
blks_≥r_£g
);

303 
	`£t_sb
(
£gmít_cou¡_maö
, 
	`gë_sb
(
£gmít_cou¡
) -

304 (
	`gë_sb
(
£gmít_cou¡_ck±
) +

305 
	`gë_sb
(
£gmít_cou¡_sô
) +

306 
	`gë_sb
(
£gmít_cou¡_«t
) +

307 
	`gë_sb
(
£gmít_cou¡_sß
)));

309 
	`£t_sb
(
£˘i⁄_cou¡
, 
	`gë_sb
(
£gmít_cou¡_maö
Ë/ 
c⁄fig
.
£gs_≥r_£c
);

311 
	`£t_sb
(
£gmít_cou¡_maö
, 
	`gë_sb
(
£˘i⁄_cou¡
Ë* 
c⁄fig
.
£gs_≥r_£c
);

313 i‡((
	`gë_sb
(
£gmít_cou¡_maö
) - 2) <

314 
c⁄fig
.
ª£rved_£gmíts
) {

315 
	`MSG
(1, "\tError: Device size isÇot sufficient for F2FS volume,\
 segmentÇeeded =%u",

317 
c⁄fig
.
ª£rved_£gmíts
 -

318 (
	`gë_sb
(
£gmít_cou¡_maö
) - 2));

322 
	`uuid_gíî©e
(
sb
.
uuid
);

324 
	`ASCIIToUNICODE
(
sb
.
vﬁume_«me
, (
u_öt8_t
 *)
c⁄fig
.
vﬁ_œbñ
);

326 
	`£t_sb
(
node_öo
, 1);

327 
	`£t_sb
(
mëa_öo
, 2);

328 
	`£t_sb
(
roŸ_öo
, 3);

330 
tŸÆ_z⁄es
 = 
	`gë_sb
(
£gmít_cou¡_maö
Ë/ (
c⁄fig
.
£gs_≥r_z⁄e
);

331 i‡(
tŸÆ_z⁄es
 <= 6) {

332 
	`MSG
(1, "\tEº‹: %d z⁄es: Nìd m‹êz⁄e†\
 shrökög z⁄êsize\n", 
tŸÆ_z⁄es
);

337 i‡(
c⁄fig
.
hóp
) {

338 
c⁄fig
.
cur_£g
[
CURSEG_HOT_NODE
] = 
	`œ°_£˘i⁄
(
	`œ°_z⁄e
(
tŸÆ_z⁄es
));

339 
c⁄fig
.
cur_£g
[
CURSEG_WARM_NODE
] = 
	`¥ev_z⁄e
(
CURSEG_HOT_NODE
);

340 
c⁄fig
.
cur_£g
[
CURSEG_COLD_NODE
] = 
	`¥ev_z⁄e
(
CURSEG_WARM_NODE
);

341 
c⁄fig
.
cur_£g
[
CURSEG_HOT_DATA
] = 
	`¥ev_z⁄e
(
CURSEG_COLD_NODE
);

342 
c⁄fig
.
cur_£g
[
CURSEG_COLD_DATA
] = 0;

343 
c⁄fig
.
cur_£g
[
CURSEG_WARM_DATA
] = 
	`√xt_z⁄e
(
CURSEG_COLD_DATA
);

345 
c⁄fig
.
cur_£g
[
CURSEG_HOT_NODE
] = 0;

346 
c⁄fig
.
cur_£g
[
CURSEG_WARM_NODE
] = 
	`√xt_z⁄e
(
CURSEG_HOT_NODE
);

347 
c⁄fig
.
cur_£g
[
CURSEG_COLD_NODE
] = 
	`√xt_z⁄e
(
CURSEG_WARM_NODE
);

348 
c⁄fig
.
cur_£g
[
CURSEG_HOT_DATA
] = 
	`√xt_z⁄e
(
CURSEG_COLD_NODE
);

349 
c⁄fig
.
cur_£g
[
CURSEG_COLD_DATA
] = 
	`√xt_z⁄e
(
CURSEG_HOT_DATA
);

350 
c⁄fig
.
cur_£g
[
CURSEG_WARM_DATA
] = 
	`√xt_z⁄e
(
CURSEG_COLD_DATA
);

353 
	`c⁄figuª_exãnsi⁄_li°
();

356 i‡(
c⁄fig
.
kd
 >= 0) {

357 
	`dev_ªad_vîsi⁄
(
c⁄fig
.
vîsi⁄
, 0, 
VERSION_LEN
);

358 
	`gë_kî√l_vîsi⁄
(
c⁄fig
.
vîsi⁄
);

359 
	`MSG
(0, "Info: f‹m© vîsi⁄ wôh\¿ \"%s\"\n", 
c⁄fig
.
vîsi⁄
);

361 
	`mem£t
(
c⁄fig
.
vîsi⁄
, 0, 
VERSION_LEN
);

364 
	`mem˝y
(
sb
.
vîsi⁄
, 
c⁄fig
.vîsi⁄, 
VERSION_LEN
);

365 
	`mem˝y
(
sb
.
öô_vîsi⁄
, 
c⁄fig
.
vîsi⁄
, 
VERSION_LEN
);

368 
	}
}

370 
	$f2fs_öô_sô_¨ó
()

372 
u_öt32_t
 
blk_size
, 
£g_size
;

373 
u_öt32_t
 
ödex
 = 0;

374 
u_öt64_t
 
sô_£g_addr
 = 0;

375 
u_öt8_t
 *
zîo_buf
 = 
NULL
;

377 
blk_size
 = 1 << 
	`gë_sb
(
log_blocksize
);

378 
£g_size
 = (1 << 
	`gë_sb
(
log_blocks_≥r_£g
)Ë* 
blk_size
;

380 
zîo_buf
 = 
	`ˇŒoc
((
u_öt8_t
), 
£g_size
);

381 if(
zîo_buf
 =
NULL
) {

382 
	`MSG
(1, "\tError: Calloc Failed for sit_zero_buf!!!\n");

386 
sô_£g_addr
 = 
	`gë_sb
(
sô_blkaddr
);

387 
sô_£g_addr
 *
blk_size
;

389 
	`DBG
(1, "\tFûlög sôáª®© off£à0x%08"
PRIx64
"\n", 
sô_£g_addr
);

390 
ödex
 = 0; index < (
	`gë_sb
(
£gmít_cou¡_sô
) / 2); index++) {

391 i‡(
	`dev_fûl
(
zîo_buf
, 
sô_£g_addr
, 
£g_size
)) {

392 
	`MSG
(1, "\tError: While zeroing outÅhe sitárea \
 disk!!!\n");

396 
sô_£g_addr
 +
£g_size
;

399 
	`‰ì
(
zîo_buf
);

401 
	}
}

403 
	$f2fs_öô_«t_¨ó
()

405 
u_öt32_t
 
blk_size
, 
£g_size
;

406 
u_öt32_t
 
ödex
 = 0;

407 
u_öt64_t
 
«t_£g_addr
 = 0;

408 
u_öt8_t
 *
«t_buf
 = 
NULL
;

410 
blk_size
 = 1 << 
	`gë_sb
(
log_blocksize
);

411 
£g_size
 = (1 << 
	`gë_sb
(
log_blocks_≥r_£g
)Ë* 
blk_size
;

413 
«t_buf
 = 
	`ˇŒoc
((
u_öt8_t
), 
£g_size
);

414 i‡(
«t_buf
 =
NULL
) {

415 
	`MSG
(1, "\tError: Calloc Failed forÇat_zero_blk!!!\n");

419 
«t_£g_addr
 = 
	`gë_sb
(
«t_blkaddr
);

420 
«t_£g_addr
 *
blk_size
;

422 
	`DBG
(1, "\tFûlögÇ©áª®© off£à0x%08"
PRIx64
"\n", 
«t_£g_addr
);

423 
ödex
 = 0; index < 
	`gë_sb
(
£gmít_cou¡_«t
) / 2; index++) {

424 i‡(
	`dev_fûl
(
«t_buf
, 
«t_£g_addr
, 
£g_size
)) {

425 
	`MSG
(1, "\tError: While zeroing outÅheÇatárea \
 disk!!!\n");

429 
«t_£g_addr
 =Ç©_£g_add∏+ (2 * 
£g_size
);

432 
	`‰ì
(
«t_buf
);

434 
	}
}

436 
	$f2fs_wrôe_check_poöt_∑ck
()

438 
f2fs_summ¨y_block
 *
sum
 = 
NULL
;

439 
u_öt32_t
 
blk_size_byãs
;

440 
u_öt64_t
 
˝_£g_blk_off£t
 = 0;

441 
u_öt32_t
 
¸c
 = 0;

442 
i
;

443 *
˝_∑ylﬂd
 = 
NULL
;

444 *
sum_com∑˘
, *
sum_com∑˘_p
;

445 
f2fs_summ¨y
 *
sum_íåy
;

447 
˝
 = 
	`ˇŒoc
(
F2FS_BLKSIZE
, 1);

448 i‡(
˝
 =
NULL
) {

449 
	`MSG
(1, "\tError: Calloc Failed for f2fs_checkpoint!!!\n");

453 
sum
 = 
	`ˇŒoc
(
F2FS_BLKSIZE
, 1);

454 i‡(
sum
 =
NULL
) {

455 
	`MSG
(1, "\tError: Calloc Failed for summay_node!!!\n");

459 
sum_com∑˘
 = 
	`ˇŒoc
(
F2FS_BLKSIZE
, 1);

460 i‡(
sum
 =
NULL
) {

461 
	`MSG
(1, "\tError: Calloc Failed for summay buffer!!!\n");

464 
sum_com∑˘_p
 = 
sum_com∑˘
;

466 
˝_∑ylﬂd
 = 
	`ˇŒoc
(
F2FS_BLKSIZE
, 1);

467 i‡(
˝_∑ylﬂd
 =
NULL
) {

468 
	`MSG
(1, "\tError: Calloc Failed for cp_payload!!!\n");

473 
	`£t_˝
(
checkpoöt_vî
, 1);

474 
	`£t_˝
(
cur_node_£gno
[0], 
c⁄fig
.
cur_£g
[
CURSEG_HOT_NODE
]);

475 
	`£t_˝
(
cur_node_£gno
[1], 
c⁄fig
.
cur_£g
[
CURSEG_WARM_NODE
]);

476 
	`£t_˝
(
cur_node_£gno
[2], 
c⁄fig
.
cur_£g
[
CURSEG_COLD_NODE
]);

477 
	`£t_˝
(
cur_d©a_£gno
[0], 
c⁄fig
.
cur_£g
[
CURSEG_HOT_DATA
]);

478 
	`£t_˝
(
cur_d©a_£gno
[1], 
c⁄fig
.
cur_£g
[
CURSEG_WARM_DATA
]);

479 
	`£t_˝
(
cur_d©a_£gno
[2], 
c⁄fig
.
cur_£g
[
CURSEG_COLD_DATA
]);

480 
i
 = 3; i < 
MAX_ACTIVE_NODE_LOGS
; i++) {

481 
	`£t_˝
(
cur_node_£gno
[
i
], 0xffffffff);

482 
	`£t_˝
(
cur_d©a_£gno
[
i
], 0xffffffff);

485 
	`£t_˝
(
cur_node_blkoff
[0], 1);

486 
	`£t_˝
(
cur_d©a_blkoff
[0], 1);

487 
	`£t_˝
(
vÆid_block_cou¡
, 2);

488 
	`£t_˝
(
rsvd_£gmít_cou¡
, 
c⁄fig
.
ª£rved_£gmíts
);

489 
	`£t_˝
(
ovî¥ov_£gmít_cou¡
, (
	`gë_sb
(
£gmít_cou¡_maö
) -

490 
	`gë_˝
(
rsvd_£gmít_cou¡
)) *

491 
c⁄fig
.
ovî¥ovisi⁄
 / 100);

492 
	`£t_˝
(
ovî¥ov_£gmít_cou¡
, 
	`gë_˝
(overprov_segment_count) +

493 
	`gë_˝
(
rsvd_£gmít_cou¡
));

496 
	`£t_˝
(
‰ì_£gmít_cou¡
, 
	`gë_sb
(
£gmít_cou¡_maö
) - 6);

497 
	`£t_˝
(
u£r_block_cou¡
, ((
	`gë_˝
(
‰ì_£gmít_cou¡
) + 6 -

498 
	`gë_˝
(
ovî¥ov_£gmít_cou¡
)Ë* 
c⁄fig
.
blks_≥r_£g
));

500 
	`£t_˝
(
˝_∑ck_tŸÆ_block_cou¡
, 6 + 
	`gë_sb
(
˝_∑ylﬂd
));

501 
	`£t_˝
(
ck±_Êags
, 
CP_UMOUNT_FLAG
 | 
CP_COMPACT_SUM_FLAG
);

502 
	`£t_˝
(
˝_∑ck_°¨t_sum
, 1 + 
	`gë_sb
(
˝_∑ylﬂd
));

503 
	`£t_˝
(
vÆid_node_cou¡
, 1);

504 
	`£t_˝
(
vÆid_öode_cou¡
, 1);

505 
	`£t_˝
(
√xt_‰ì_nid
, 
	`gë_sb
(
roŸ_öo
) + 1);

506 
	`£t_˝
(
sô_vî_bôm≠_byãsize
, ((
	`gë_sb
(
£gmít_cou¡_sô
) / 2) <<

507 
	`gë_sb
(
log_blocks_≥r_£g
)) / 8);

509 
	`£t_˝
(
«t_vî_bôm≠_byãsize
, ((
	`gë_sb
(
£gmít_cou¡_«t
) / 2) <<

510 
	`gë_sb
(
log_blocks_≥r_£g
)) / 8);

512 
	`£t_˝
(
checksum_off£t
, 
CHECKSUM_OFFSET
);

514 
¸c
 = 
	`f2fs_ˇl_¸c32
(
F2FS_SUPER_MAGIC
, 
˝
, 
CHECKSUM_OFFSET
);

515 *((
__À32
 *)((*)
˝
 + 
CHECKSUM_OFFSET
)) =

516 
	`˝u_to_À32
(
¸c
);

518 
blk_size_byãs
 = 1 << 
	`gë_sb
(
log_blocksize
);

519 
˝_£g_blk_off£t
 = 
	`gë_sb
(
£gmít0_blkaddr
);

520 
˝_£g_blk_off£t
 *
blk_size_byãs
;

522 
	`DBG
(1, "\tWrôög maö segmíts, c∞© off£à0x%08"
PRIx64
"\n", 
˝_£g_blk_off£t
);

523 i‡(
	`dev_wrôe
(
˝
, 
˝_£g_blk_off£t
, 
blk_size_byãs
)) {

524 
	`MSG
(1, "\tError: While writingÅhe cpÅo disk!!!\n");

528 
i
 = 0; i < 
	`gë_sb
(
˝_∑ylﬂd
); i++) {

529 
˝_£g_blk_off£t
 +
blk_size_byãs
;

530 i‡(
	`dev_fûl
(
˝_∑ylﬂd
, 
˝_£g_blk_off£t
, 
blk_size_byãs
)) {

531 
	`MSG
(1, "\tError: While zeroing outÅhe sit bitmapárea \
 disk!!!\n");

552 
	`mem£t
(
sum
, 0, (
f2fs_summ¨y_block
));

553 
	`SET_SUM_TYPE
((&
sum
->
foŸî
), 
SUM_TYPE_DATA
);

555 
sum
->
n_«ts
 = 
	`˝u_to_À16
(1);

556 
sum
->
«t_j
.
íåõs
[0].
nid
 = 
sb
.
roŸ_öo
;

557 
sum
->
«t_j
.
íåõs
[0].
√
.
vîsi⁄
 = 0;

558 
sum
->
«t_j
.
íåõs
[0].
√
.
öo
 = 
sb
.
roŸ_öo
;

559 
sum
->
«t_j
.
íåõs
[0].
√
.
block_addr
 = 
	`˝u_to_À32
(

560 
	`gë_sb
(
maö_blkaddr
) +

561 
	`gë_˝
(
cur_node_£gno
[0]Ë* 
c⁄fig
.
blks_≥r_£g
);

563 
	`mem˝y
(
sum_com∑˘_p
, &
sum
->
n_«ts
, 
SUM_JOURNAL_SIZE
);

564 
sum_com∑˘_p
 +
SUM_JOURNAL_SIZE
;

566 
	`mem£t
(
sum
, 0, (
f2fs_summ¨y_block
));

568 
sum
->
n_sôs
 = 
	`˝u_to_À16
(6);

569 
sum
->
sô_j
.
íåõs
[0].
£gno
 = 
˝
->
cur_node_£gno
[0];

570 
sum
->
sô_j
.
íåõs
[0].
£
.
vblocks
 = 
	`˝u_to_À16
((
CURSEG_HOT_NODE
 << 10) | 1);

571 
	`f2fs_£t_bô
(0, (*)
sum
->
sô_j
.
íåõs
[0].
£
.
vÆid_m≠
);

572 
sum
->
sô_j
.
íåõs
[1].
£gno
 = 
˝
->
cur_node_£gno
[1];

573 
sum
->
sô_j
.
íåõs
[1].
£
.
vblocks
 = 
	`˝u_to_À16
((
CURSEG_WARM_NODE
 << 10));

574 
sum
->
sô_j
.
íåõs
[2].
£gno
 = 
˝
->
cur_node_£gno
[2];

575 
sum
->
sô_j
.
íåõs
[2].
£
.
vblocks
 = 
	`˝u_to_À16
((
CURSEG_COLD_NODE
 << 10));

578 
sum
->
sô_j
.
íåõs
[3].
£gno
 = 
˝
->
cur_d©a_£gno
[0];

579 
sum
->
sô_j
.
íåõs
[3].
£
.
vblocks
 = 
	`˝u_to_À16
((
CURSEG_HOT_DATA
 << 10) | 1);

580 
	`f2fs_£t_bô
(0, (*)
sum
->
sô_j
.
íåõs
[3].
£
.
vÆid_m≠
);

581 
sum
->
sô_j
.
íåõs
[4].
£gno
 = 
˝
->
cur_d©a_£gno
[1];

582 
sum
->
sô_j
.
íåõs
[4].
£
.
vblocks
 = 
	`˝u_to_À16
((
CURSEG_WARM_DATA
 << 10));

583 
sum
->
sô_j
.
íåõs
[5].
£gno
 = 
˝
->
cur_d©a_£gno
[2];

584 
sum
->
sô_j
.
íåõs
[5].
£
.
vblocks
 = 
	`˝u_to_À16
((
CURSEG_COLD_DATA
 << 10));

586 
	`mem˝y
(
sum_com∑˘_p
, &
sum
->
n_sôs
, 
SUM_JOURNAL_SIZE
);

587 
sum_com∑˘_p
 +
SUM_JOURNAL_SIZE
;

590 
sum_íåy
 = (
f2fs_summ¨y
 *)
sum_com∑˘_p
;

591 
sum_íåy
->
nid
 = 
sb
.
roŸ_öo
;

592 
sum_íåy
->
ofs_ö_node
 = 0;

596 
˝_£g_blk_off£t
 +
blk_size_byãs
;

597 
	`DBG
(1, "\tWrôög Segmíàsumm¨y f‹ HOT/WARM/COLD_DATA,áàoff£à0x%08"
PRIx64
"\n",

598 
˝_£g_blk_off£t
);

599 i‡(
	`dev_wrôe
(
sum_com∑˘
, 
˝_£g_blk_off£t
, 
blk_size_byãs
)) {

600 
	`MSG
(1, "\tError: While writingÅhe sum_blkÅo disk!!!\n");

605 
	`mem£t
(
sum
, 0, (
f2fs_summ¨y_block
));

606 
	`SET_SUM_TYPE
((&
sum
->
foŸî
), 
SUM_TYPE_NODE
);

608 
sum
->
íåõs
[0].
nid
 = 
sb
.
roŸ_öo
;

609 
sum
->
íåõs
[0].
ofs_ö_node
 = 0;

611 
˝_£g_blk_off£t
 +
blk_size_byãs
;

612 
	`DBG
(1, "\tWrôög Segmíàsumm¨y f‹ HOT_NODE,áàoff£à0x%08"
PRIx64
"\n",

613 
˝_£g_blk_off£t
);

614 i‡(
	`dev_wrôe
(
sum
, 
˝_£g_blk_off£t
, 
blk_size_byãs
)) {

615 
	`MSG
(1, "\tError: While writingÅhe sum_blkÅo disk!!!\n");

620 
	`mem£t
(
sum
, 0, (
f2fs_summ¨y_block
));

621 
	`SET_SUM_TYPE
((&
sum
->
foŸî
), 
SUM_TYPE_NODE
);

623 
˝_£g_blk_off£t
 +
blk_size_byãs
;

624 
	`DBG
(1, "\tWrôög Segmíàsumm¨y f‹ WARM_NODE,áàoff£à0x%08"
PRIx64
"\n",

625 
˝_£g_blk_off£t
);

626 i‡(
	`dev_wrôe
(
sum
, 
˝_£g_blk_off£t
, 
blk_size_byãs
)) {

627 
	`MSG
(1, "\tError: While writingÅhe sum_blkÅo disk!!!\n");

632 
	`mem£t
(
sum
, 0, (
f2fs_summ¨y_block
));

633 
	`SET_SUM_TYPE
((&
sum
->
foŸî
), 
SUM_TYPE_NODE
);

634 
˝_£g_blk_off£t
 +
blk_size_byãs
;

635 
	`DBG
(1, "\tWrôög Segmíàsumm¨y f‹ COLD_NODE,áàoff£à0x%08"
PRIx64
"\n",

636 
˝_£g_blk_off£t
);

637 i‡(
	`dev_wrôe
(
sum
, 
˝_£g_blk_off£t
, 
blk_size_byãs
)) {

638 
	`MSG
(1, "\tError: While writingÅhe sum_blkÅo disk!!!\n");

643 
˝_£g_blk_off£t
 +
blk_size_byãs
;

644 
	`DBG
(1, "\tWrôög c∞∑ge2,áàoff£à0x%08"
PRIx64
"\n", 
˝_£g_blk_off£t
);

645 i‡(
	`dev_wrôe
(
˝
, 
˝_£g_blk_off£t
, 
blk_size_byãs
)) {

646 
	`MSG
(1, "\tError: While writingÅhe cpÅo disk!!!\n");

653 
˝
->
checkpoöt_vî
 = 0;

655 
¸c
 = 
	`f2fs_ˇl_¸c32
(
F2FS_SUPER_MAGIC
, 
˝
, 
CHECKSUM_OFFSET
);

656 *((
__À32
 *)((*)
˝
 + 
CHECKSUM_OFFSET
)) =

657 
	`˝u_to_À32
(
¸c
);

658 
˝_£g_blk_off£t
 = (
	`gë_sb
(
£gmít0_blkaddr
) +

659 
c⁄fig
.
blks_≥r_£g
) *

660 
blk_size_byãs
;

661 
	`DBG
(1, "\tWrôög c∞∑gê1 o‡checkpoöà∑ck 2,áàoff£à0x%08"
PRIx64
"\n", 
˝_£g_blk_off£t
);

662 i‡(
	`dev_wrôe
(
˝
, 
˝_£g_blk_off£t
, 
blk_size_byãs
)) {

663 
	`MSG
(1, "\tError: While writingÅhe cpÅo disk!!!\n");

667 
i
 = 0; i < 
	`gë_sb
(
˝_∑ylﬂd
); i++) {

668 
˝_£g_blk_off£t
 +
blk_size_byãs
;

669 i‡(
	`dev_fûl
(
˝_∑ylﬂd
, 
˝_£g_blk_off£t
, 
blk_size_byãs
)) {

670 
	`MSG
(1, "\tError: While zeroing outÅhe sit bitmapárea \
 disk!!!\n");

677 
˝_£g_blk_off£t
 +
blk_size_byãs
 * (
	`À32_to_˝u
(
˝
->
˝_∑ck_tŸÆ_block_cou¡
)

678 - 
	`gë_sb
(
˝_∑ylﬂd
) - 1);

679 
	`DBG
(1, "\tWrôög c∞∑gê2 o‡checkpoöà∑ck 2,áàoff£à0x%08"
PRIx64
"\n", 
˝_£g_blk_off£t
);

680 i‡(
	`dev_wrôe
(
˝
, 
˝_£g_blk_off£t
, 
blk_size_byãs
)) {

681 
	`MSG
(1, "\tError: While writingÅhe cpÅo disk!!!\n");

685 
	`‰ì
(
sum_com∑˘
);

686 
	`‰ì
(
sum
);

687 
	`‰ì
(
˝_∑ylﬂd
);

688 
	`‰ì
(
˝
);

690 
	}
}

692 
	$f2fs_wrôe_su≥r_block
()

694 
ödex
;

695 
u_öt8_t
 *
zîo_buff
;

697 
zîo_buff
 = 
	`ˇŒoc
(
F2FS_BLKSIZE
, 1);

699 
	`mem˝y
(
zîo_buff
 + 
F2FS_SUPER_OFFSET
, &
sb
,

700 (
sb
));

701 
	`DBG
(1, "\tWriting super block,át offset 0x%08x\n", 0);

702 
ödex
 = 0; index < 2; index++) {

703 i‡(
	`dev_wrôe
(
zîo_buff
, 
ödex
 * 
F2FS_BLKSIZE
, F2FS_BLKSIZE)) {

704 
	`MSG
(1, "\tEº‹: Whûêwhûêwrôög su≥_blk \
 disk!!! index : %d\n", 
ödex
);

710 
	`‰ì
(
zîo_buff
);

712 
	}
}

714 
	$f2fs_wrôe_roŸ_öode
()

716 
f2fs_node
 *
øw_node
 = 
NULL
;

717 
u_öt64_t
 
blk_size_byãs
, 
d©a_blk_n‹
;

718 
u_öt64_t
 
maö_¨ó_node_£g_blk_off£t
 = 0;

720 
øw_node
 = 
	`ˇŒoc
(
F2FS_BLKSIZE
, 1);

721 i‡(
øw_node
 =
NULL
) {

722 
	`MSG
(1, "\tError: Calloc Failed forÑaw_node!!!\n");

726 
øw_node
->
foŸî
.
nid
 = 
sb
.
roŸ_öo
;

727 
øw_node
->
foŸî
.
öo
 = 
sb
.
roŸ_öo
;

728 
øw_node
->
foŸî
.
˝_vî
 = 
	`˝u_to_À64
(1);

729 
øw_node
->
foŸî
.
√xt_blkaddr
 = 
	`˝u_to_À32
(

730 
	`gë_sb
(
maö_blkaddr
) +

731 
c⁄fig
.
cur_£g
[
CURSEG_HOT_NODE
] *

732 
c⁄fig
.
blks_≥r_£g
 + 1);

734 
øw_node
->
i
.
i_mode
 = 
	`˝u_to_À16
(0x41ed);

735 
øw_node
->
i
.
i_löks
 = 
	`˝u_to_À32
(2);

736 
øw_node
->
i
.
i_uid
 = 
	`˝u_to_À32
(
	`gëuid
());

737 
øw_node
->
i
.
i_gid
 = 
	`˝u_to_À32
(
	`gëgid
());

739 
blk_size_byãs
 = 1 << 
	`gë_sb
(
log_blocksize
);

740 
øw_node
->
i
.
i_size
 = 
	`˝u_to_À64
(1 * 
blk_size_byãs
);

741 
øw_node
->
i
.
i_blocks
 = 
	`˝u_to_À64
(2);

743 
øw_node
->
i
.
i_©ime
 = 
	`˝u_to_À32
(
	`time
(
NULL
));

744 
øw_node
->
i
.
i_©ime_n£c
 = 0;

745 
øw_node
->
i
.
i_˘ime
 = 
	`˝u_to_À32
(
	`time
(
NULL
));

746 
øw_node
->
i
.
i_˘ime_n£c
 = 0;

747 
øw_node
->
i
.
i_mtime
 = 
	`˝u_to_À32
(
	`time
(
NULL
));

748 
øw_node
->
i
.
i_mtime_n£c
 = 0;

749 
øw_node
->
i
.
i_gíî©i⁄
 = 0;

750 
øw_node
->
i
.
i_x©å_nid
 = 0;

751 
øw_node
->
i
.
i_Êags
 = 0;

752 
øw_node
->
i
.
i_cuºít_dïth
 = 
	`˝u_to_À32
(1);

753 
øw_node
->
i
.
i_dú_Àvñ
 = 
DEF_DIR_LEVEL
;

755 
d©a_blk_n‹
 = 
	`gë_sb
(
maö_blkaddr
) +

756 
c⁄fig
.
cur_£g
[
CURSEG_HOT_DATA
] * c⁄fig.
blks_≥r_£g
;

757 
øw_node
->
i
.
i_addr
[0] = 
	`˝u_to_À32
(
d©a_blk_n‹
);

759 
øw_node
->
i
.
i_ext
.
fofs
 = 0;

760 
øw_node
->
i
.
i_ext
.
blk_addr
 = 
	`˝u_to_À32
(
d©a_blk_n‹
);

761 
øw_node
->
i
.
i_ext
.
Àn
 = 
	`˝u_to_À32
(1);

763 
maö_¨ó_node_£g_blk_off£t
 = 
	`gë_sb
(
maö_blkaddr
);

764 
maö_¨ó_node_£g_blk_off£t
 +
c⁄fig
.
cur_£g
[
CURSEG_HOT_NODE
] *

765 
c⁄fig
.
blks_≥r_£g
;

766 
maö_¨ó_node_£g_blk_off£t
 *
blk_size_byãs
;

768 
	`DBG
(1, "\tWrôögÑoŸ inodê(hŸÇode),áàoff£à0x%08"
PRIx64
"\n", 
maö_¨ó_node_£g_blk_off£t
);

769 i‡(
	`dev_wrôe
(
øw_node
, 
maö_¨ó_node_£g_blk_off£t
, 
F2FS_BLKSIZE
)) {

770 
	`MSG
(1, "\tError: While writingÅheÑaw_nodeÅo disk!!!\n");

774 
	`mem£t
(
øw_node
, 0xff, (
f2fs_node
));

777 
maö_¨ó_node_£g_blk_off£t
 = 
	`gë_sb
(
maö_blkaddr
);

778 
maö_¨ó_node_£g_blk_off£t
 +
c⁄fig
.
cur_£g
[
CURSEG_WARM_NODE
] *

779 
c⁄fig
.
blks_≥r_£g
;

780 
maö_¨ó_node_£g_blk_off£t
 *
blk_size_byãs
;

782 
	`DBG
(1, "\tWrôögÑoŸ inodê(w¨mÇode),áàoff£à0x%08"
PRIx64
"\n", 
maö_¨ó_node_£g_blk_off£t
);

783 i‡(
	`dev_wrôe
(
øw_node
, 
maö_¨ó_node_£g_blk_off£t
, 
F2FS_BLKSIZE
)) {

784 
	`MSG
(1, "\tError: While writingÅheÑaw_nodeÅo disk!!!\n");

787 
	`‰ì
(
øw_node
);

789 
	}
}

791 
	$f2fs_upd©e_«t_roŸ
()

793 
f2fs_«t_block
 *
«t_blk
 = 
NULL
;

794 
u_öt64_t
 
blk_size_byãs
, 
«t_£g_blk_off£t
 = 0;

796 
«t_blk
 = 
	`ˇŒoc
(
F2FS_BLKSIZE
, 1);

797 if(
«t_blk
 =
NULL
) {

798 
	`MSG
(1, "\tError: Calloc Failed forÇat_blk!!!\n");

803 
«t_blk
->
íåõs
[
	`gë_sb
(
roŸ_öo
)].
block_addr
 = 
	`˝u_to_À32
(

804 
	`gë_sb
(
maö_blkaddr
) +

805 
c⁄fig
.
cur_£g
[
CURSEG_HOT_NODE
] * c⁄fig.
blks_≥r_£g
);

806 
«t_blk
->
íåõs
[
	`gë_sb
(
roŸ_öo
)].
öo
 = 
sb
.root_ino;

809 
«t_blk
->
íåõs
[
	`gë_sb
(
node_öo
)].
block_addr
 = 
	`˝u_to_À32
(1);

810 
«t_blk
->
íåõs
[
	`gë_sb
(
node_öo
)].
öo
 = 
sb
.node_ino;

813 
«t_blk
->
íåõs
[
	`gë_sb
(
mëa_öo
)].
block_addr
 = 
	`˝u_to_À32
(1);

814 
«t_blk
->
íåõs
[
	`gë_sb
(
mëa_öo
)].
öo
 = 
sb
.meta_ino;

816 
blk_size_byãs
 = 1 << 
	`gë_sb
(
log_blocksize
);

817 
«t_£g_blk_off£t
 = 
	`gë_sb
(
«t_blkaddr
);

818 
«t_£g_blk_off£t
 *
blk_size_byãs
;

820 
	`DBG
(1, "\tWrôögÇ©ÑoŸ,áàoff£à0x%08"
PRIx64
"\n", 
«t_£g_blk_off£t
);

821 i‡(
	`dev_wrôe
(
«t_blk
, 
«t_£g_blk_off£t
, 
F2FS_BLKSIZE
)) {

822 
	`MSG
(1, "\tError: While writingÅheÇat_blk set0Åo disk!\n");

826 
	`‰ì
(
«t_blk
);

828 
	}
}

830 
	$f2fs_add_deÁu…_díåy_roŸ
()

832 
f2fs_díåy_block
 *
dít_blk
 = 
NULL
;

833 
u_öt64_t
 
blk_size_byãs
, 
d©a_blk_off£t
 = 0;

835 
dít_blk
 = 
	`ˇŒoc
(
F2FS_BLKSIZE
, 1);

836 if(
dít_blk
 =
NULL
) {

837 
	`MSG
(1, "\tError: Calloc Failed for dent_blk!!!\n");

841 
dít_blk
->
díåy
[0].
hash_code
 = 0;

842 
dít_blk
->
díåy
[0].
öo
 = 
sb
.
roŸ_öo
;

843 
dít_blk
->
díåy
[0].
«me_Àn
 = 
	`˝u_to_À16
(1);

844 
dít_blk
->
díåy
[0].
fûe_ty≥
 = 
F2FS_FT_DIR
;

845 
	`mem˝y
(
dít_blk
->
fûíame
[0], ".", 1);

847 
dít_blk
->
díåy
[1].
hash_code
 = 0;

848 
dít_blk
->
díåy
[1].
öo
 = 
sb
.
roŸ_öo
;

849 
dít_blk
->
díåy
[1].
«me_Àn
 = 
	`˝u_to_À16
(2);

850 
dít_blk
->
díåy
[1].
fûe_ty≥
 = 
F2FS_FT_DIR
;

851 
	`mem˝y
(
dít_blk
->
fûíame
[1], "..", 2);

854 
dít_blk
->
díåy_bôm≠
[0] = (1 << 1) | (1 << 0);

855 
blk_size_byãs
 = 1 << 
	`gë_sb
(
log_blocksize
);

856 
d©a_blk_off£t
 = 
	`gë_sb
(
maö_blkaddr
);

857 
d©a_blk_off£t
 +
c⁄fig
.
cur_£g
[
CURSEG_HOT_DATA
] *

858 
c⁄fig
.
blks_≥r_£g
;

859 
d©a_blk_off£t
 *
blk_size_byãs
;

861 
	`DBG
(1, "\tWrôög deÁu… díåyÑoŸ,áàoff£à0x%08"
PRIx64
"\n", 
d©a_blk_off£t
);

863 i‡(
	`dev_wrôe
(
dít_blk
, 
d©a_blk_off£t
, 
F2FS_BLKSIZE
)) {

864 
	`MSG
(1, "\tError: While writingÅhe dentry_blkÅo disk!!!\n");

868 
	`‰ì
(
dít_blk
);

870 
	}
}

872 
	$f2fs_¸óã_roŸ_dú
()

874 
îr
 = 0;

876 
îr
 = 
	`f2fs_wrôe_roŸ_öode
();

877 i‡(
îr
 < 0) {

878 
	`MSG
(1, "\tError: FailedÅo writeÑoot inode!!!\n");

879 
exô
;

882 
îr
 = 
	`f2fs_upd©e_«t_roŸ
();

883 i‡(
îr
 < 0) {

884 
	`MSG
(1, "\tError: FailedÅo update NAT forÑoot!!!\n");

885 
exô
;

888 
îr
 = 
	`f2fs_add_deÁu…_díåy_roŸ
();

889 i‡(
îr
 < 0) {

890 
	`MSG
(1, "\tError: FailedÅoádd default dentries forÑoot!!!\n");

891 
exô
;

893 
exô
:

894 i‡(
îr
)

895 
	`MSG
(1, "\tError: CouldÇot createÅheÑoot directory!!!\n");

897  
îr
;

898 
	}
}

900 
	$f2fs_f‹m©_devi˚
()

902 
îr
 = 0;

904 
îr

	`f2fs_¥ï¨e_su≥r_block
();

905 i‡(
îr
 < 0) {

906 
	`MSG
(0, "\tError: FailedÅoÖrepareá super block!!!\n");

907 
exô
;

910 
îr
 = 
	`f2fs_åim_devi˚
();

911 i‡(
îr
 < 0) {

912 
	`MSG
(0, "\tError: FailedÅoÅrim whole device!!!\n");

913 
exô
;

916 
îr
 = 
	`f2fs_öô_sô_¨ó
();

917 i‡(
îr
 < 0) {

918 
	`MSG
(0, "\tError: FailedÅo InitialiseÅhe SIT AREA!!!\n");

919 
exô
;

922 
îr
 = 
	`f2fs_öô_«t_¨ó
();

923 i‡(
îr
 < 0) {

924 
	`MSG
(0, "\tError: FailedÅo InitialiseÅhe NAT AREA!!!\n");

925 
exô
;

928 
îr
 = 
	`f2fs_¸óã_roŸ_dú
();

929 i‡(
îr
 < 0) {

930 
	`MSG
(0, "\tError: FailedÅo createÅheÑoot directory!!!\n");

931 
exô
;

934 
îr
 = 
	`f2fs_wrôe_check_poöt_∑ck
();

935 i‡(
îr
 < 0) {

936 
	`MSG
(0, "\tError: FailedÅo writeÅhe checkÖointÖack!!!\n");

937 
exô
;

940 
îr
 = 
	`f2fs_wrôe_su≥r_block
();

941 i‡(
îr
 < 0) {

942 
	`MSG
(0, "\tError: FailedÅo writeÅhe Super Block!!!\n");

943 
exô
;

945 
exô
:

946 i‡(
îr
)

947 
	`MSG
(0, "\tError: CouldÇot formatÅhe device!!!\n");

949  
îr
;

950 
	}
}

	@mkfs/f2fs_format_main.c

9 
	#_LARGEFILE64_SOURCE


	)

11 
	~<°dio.h
>

12 
	~<°dlib.h
>

13 
	~<f˙é.h
>

14 
	~<°rög.h
>

15 
	~<uni°d.h
>

16 
	~<sys/°©.h
>

17 
	~<sys/mou¡.h
>

18 
	~<time.h
>

20 
	~<uuid/uuid.h
>

22 
	~"f2fs_fs.h
"

23 
	~"f2fs_f‹m©_utûs.h
"

25 
f2fs_c⁄figuøti⁄
 
c⁄fig
;

27 
	$mkfs_ußge
()

29 
	`MSG
(0, "\nUsage: mkfs.f2fs [options] device [sectors]\n");

30 
	`MSG
(0, "[options]:\n");

31 
	`MSG
(0, " -a heap-basedállocation [default:1]\n");

32 
	`MSG
(0, " -d debugÜevel [default:0]\n");

33 
	`MSG
(0, " -e [extensionÜist]É.g. \"mp3,gif,mov\"\n");

34 
	`MSG
(0, " -lÜabel\n");

35 
	`MSG
(0, " -o overprovisionÑatio [default:5]\n");

36 
	`MSG
(0, " -s # of segmentsÖer section [default:1]\n");

37 
	`MSG
(0, " -z # of sectionsÖer zone [default:1]\n");

38 
	`MSG
(0, " -t 0:Çodiscard, 1: discard [default:1]\n");

39 
	`MSG
(0, "sectors:Çumber of sectors. [default: determined by device size]\n");

40 
	`exô
(1);

41 
	}
}

43 
	$f2fs_∑r£_›ti⁄s
(
¨gc
, *
¨gv
[])

45 c⁄° *
›ti⁄_°rög
 = "a:d:e:l:o:s:z:t:";

46 
öt32_t
 
›ti⁄
=0;

48 (
›ti⁄
 = 
	`gë›t
(
¨gc
,
¨gv
,
›ti⁄_°rög
)Ë!
EOF
) {

49 
›ti⁄
) {

51 
c⁄fig
.
hóp
 = 
	`©oi
(
›èrg
);

52 i‡(
c⁄fig
.
hóp
 == 0)

53 
	`MSG
(0, "Info: Disable heap-basedÖolicy\n");

56 
c⁄fig
.
dbg_lv
 = 
	`©oi
(
›èrg
);

57 
	`MSG
(0, "Info: DebugÜevñ = %d\n", 
c⁄fig
.
dbg_lv
);

60 
c⁄fig
.
exãnsi⁄_li°
 = 
	`°rdup
(
›èrg
);

61 
	`MSG
(0, "Info: AddÇewÉxtensionÜist\n");

64 i‡(
	`°æí
(
›èrg
) > 512) {

65 
	`MSG
(0, "Error: Volume Label should beÜessÅhan\
512 characters\n");

67 
	`mkfs_ußge
();

69 
c⁄fig
.
vﬁ_œbñ
 = 
›èrg
;

70 
	`MSG
(0, "Info: Labñ = %s\n", 
c⁄fig
.
vﬁ_œbñ
);

73 
c⁄fig
.
ovî¥ovisi⁄
 = 
	`©oi
(
›èrg
);

74 
	`MSG
(0, "Info: OverprovisionÑatio = %u%%\n",

75 
	`©oi
(
›èrg
));

78 
c⁄fig
.
£gs_≥r_£c
 = 
	`©oi
(
›èrg
);

79 
	`MSG
(0, "Info: SegmentsÖer section = %d\n",

80 
	`©oi
(
›èrg
));

83 
c⁄fig
.
£cs_≥r_z⁄e
 = 
	`©oi
(
›èrg
);

84 
	`MSG
(0, "Info: Se˘i⁄†≥∏z⁄ê%d\n", 
	`©oi
(
›èrg
));

87 
c⁄fig
.
åim
 = 
	`©oi
(
›èrg
);

88 
	`MSG
(0, "Info: Trim i†%s\n", 
c⁄fig
.
åim
 ? "enabled": "disabled");

91 
	`MSG
(0, "\tEº‹: Unknow¿›ti⁄ %c\n",
›ti⁄
);

92 
	`mkfs_ußge
();

97 i‡(
›töd
 >
¨gc
) {

98 
	`MSG
(0, "\tError: DeviceÇot specified\n");

99 
	`mkfs_ußge
();

101 
c⁄fig
.
devi˚_«me
 = 
¨gv
[
›töd
];

103 i‡((
›töd
 + 1Ë< 
¨gc
) {

105 
c⁄fig
.
tŸÆ_£˘‹s
 = 
	`©ﬁl
(
¨gv
[
›töd
+1]);

106 
	`MSG
(0, "\âŸÆ_£˘‹s=%08"
PRIx64
" (%s bytes)\n",

107 
c⁄fig
.
tŸÆ_£˘‹s
, 
¨gv
[
›töd
+1]);

110 
c⁄fig
.
ª£rved_£gmíts
 =

111 (2 * (100 / 
c⁄fig
.
ovî¥ovisi⁄
 + 1) + 6)

112 * 
c⁄fig
.
£gs_≥r_£c
;

113 
c⁄fig
.
£gs_≥r_z⁄e
 = c⁄fig.
£gs_≥r_£c
 * c⁄fig.
£cs_≥r_z⁄e
;

114 
	}
}

116 
	$maö
(
¨gc
, *
¨gv
[])

118 
	`MSG
(0, "\n\tF2FS-tools: mkfs.f2fs Ver: %s (%s)\n\n",

119 
F2FS_TOOLS_VERSION
,

120 
F2FS_TOOLS_DATE
);

121 
	`f2fs_öô_c⁄figuøti⁄
(&
c⁄fig
);

123 
	`f2fs_∑r£_›ti⁄s
(
¨gc
, 
¨gv
);

125 i‡(
	`f2fs_dev_is_umou¡ed
(&
c⁄fig
) < 0)

128 i‡(
	`f2fs_gë_devi˚_öfo
(&
c⁄fig
) < 0)

131 i‡(
	`f2fs_f‹m©_devi˚
() < 0)

134 
	`f2fs_föÆize_devi˚
(&
c⁄fig
);

136 
	`MSG
(0, "Info: format successful\n");

139 
	}
}

	@mkfs/f2fs_format_utils.c

9 
	#_LARGEFILE_SOURCE


	)

10 
	#_LARGEFILE64_SOURCE


	)

11 #i‚de‡
_GNU_SOURCE


12 
	#_GNU_SOURCE


	)

15 
	~<°dio.h
>

16 
	~<uni°d.h
>

17 
	~<sys/io˘l.h
>

18 
	~<sys/°©.h
>

19 
	~<f˙é.h
>

21 
	~"f2fs_fs.h
"

23 #ifde‡
HAVE_LINUX_FS_H


24 
	~<löux/fs.h
>

26 #ifde‡
HAVE_LINUX_FALLOC_H


27 
	~<löux/ÁŒoc.h
>

30 
	$f2fs_åim_devi˚
()

32 
ønge
[2];

33 
°©
 
°©_buf
;

35 i‡(!
c⁄fig
.
åim
)

38 
ønge
[0] = 0;

39 
ønge
[1] = 
c⁄fig
.
tŸÆ_£˘‹s
 * 
DEFAULT_SECTOR_SIZE
;

41 i‡(
	`f°©
(
c⁄fig
.
fd
, &
°©_buf
) < 0 ) {

42 
	`MSG
(1, "\tError: FailedÅo getÅhe device stat!!!\n");

46 #i‡
	`deföed
(
WITH_BLKDISCARD
Ë&& deföed(
BLKDISCARD
)

47 
	`MSG
(0, "Info: Discarding device\n");

48 i‡(
	`S_ISREG
(
°©_buf
.
°_mode
)) {

49 #ifde‡
FALLOC_FL_PUNCH_HOLE


50 i‡(
	`ÁŒoˇã
(
c⁄fig
.
fd
, 
FALLOC_FL_PUNCH_HOLE
 | 
FALLOC_FL_KEEP_SIZE
,

51 
ønge
[0],Ñange[1]) < 0) {

52 
	`MSG
(0, "Info: fallocate(PUNCH_HOLE|KEEP_SIZE) is failed\n");

56 } i‡(
	`S_ISBLK
(
°©_buf
.
°_mode
)) {

57 i‡(
	`io˘l
(
c⁄fig
.
fd
, 
BLKDISCARD
, &
ønge
) < 0) {

58 
	`MSG
(0, "Info: This device doesn't support TRIM\n");

60 
	`MSG
(0, "Info: Discarded %lu sectors\n",

61 
c⁄fig
.
tŸÆ_£˘‹s
);

67 
	}
}

	@mkfs/f2fs_format_utils.h

9 
	#_LARGEFILE64_SOURCE


	)

11 
	~"f2fs_fs.h
"

13 
f2fs_c⁄figuøti⁄
 
c⁄fig
;

15 
f2fs_åim_devi˚
();

16 
f2fs_f‹m©_devi˚
();

	@tools/f2fs_io_parse.c

11 
	#_LARGEFILE64_SOURCE


	)

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<uni°d.h
>

15 
	~<°rög.h
>

16 
	~<sys/queue.h
>

17 
	~<as£π.h
>

18 
	~<loˇÀ.h
>

20 
	#P_NAMELEN
 16

	)

23 
	eshow_ty≥
 {

24 
	mSHOW_PID
,

25 
	mSHOW_FTYPE
,

26 
	mSHOW_ALL
,

29 
	eåa˚_ty≥s
 {

30 
	mTP_PID
,

31 
	mTP_IOS
,

32 
	mTP_MAX
,

35 
	sçs
 {

36 
åa˚_ty≥s
 
	mty≥
;

37 c⁄° *
	m«me
;

40 
çs
 
	gåa˚_poöts
[] = {

41 { 
TP_PID
, "f2fs_trace_pid" },

42 { 
TP_IOS
, "f2fs_trace_ios" },

46 
	erw_ty≥
 {

47 
	mREAD
,

48 
	mWRITE
,

49 
	mMAX_RW
,

52 
	efûe_ty≥
 {

53 
	m__NORMAL_FILE
,

54 
	m__DIR_FILE
,

55 
	m__NODE_FILE
,

56 
	m__META_FILE
,

57 
	m__ATOMIC_FILE
,

58 
	m__VOLATILE_FILE
,

59 
	m__MISC_FILE
,

60 
	m__NR_FILES
,

63 *
	gfûe_ty≥_°rög
[] = {

73 
	spid_ít
 {

74 
	mpid
;

75 
	m«me
[
P_NAMELEN
];

76 
	mio
[
__NR_FILES
][
MAX_RW
];

77 
	mtŸÆ_io
[
MAX_RW
];

78 
LIST_ENTRY
(
pid_ít
Ë
	m±r
;

82 
	gmaj‹
 = 0, 
	gmö‹
 = 0;

83 
	gshow_›ti⁄
 = 
SHOW_ALL
;

84 
	gtŸÆ_io
[
__NR_FILES
][
MAX_RW
];

86 
	$LIST_HEAD
(
∂i°
, 
pid_ít
Ë
pid_öfo
;

89 
ölöe
 
	$©oh
(*
°r
)

91 
vÆ
;

92 
	`ssˇnf
(
°r
, "%x", &
vÆ
);

93  
vÆ
;

94 
	}
}

96 
	$do_öô
()

98 
pid_ít
 *
misc
;

100 
misc
 = 
	`ˇŒoc
(1, (
pid_ít
));

101 
	`as£π
(
misc
);

103 
	`LIST_INIT
(&
pid_öfo
);

104 
	`LIST_INSERT_HEAD
(&
pid_öfo
, 
misc
, 
±r
);

105 
	}
}

107 
	$show_ußge
()

109 
	`¥ötf
("\nUsage:Öarse.f2fs [options]Üog_file\n");

110 
	`¥ötf
("[options]:\n");

111 
	`¥ötf
(" -a RW sorted byÖid & fileÅypes\n");

112 
	`¥ötf
(" -f RW sorted by fileÅypes\n");

113 
	`¥ötf
(" -p RW sorted byÖid\n");

114 
	`¥ötf
(" -m majorÇumber\n");

115 
	`¥ötf
(" -n minorÇumber\n");

116 
	`exô
(1);

117 
	}
}

119 
	$∑r£_›ti⁄s
(
¨gc
, *
¨gv
[])

121 c⁄° *
›ti⁄_°rög
 = "fm:n:p";

122 
›ti⁄
 = 0;

124 (
›ti⁄
 = 
	`gë›t
(
¨gc
, 
¨gv
, 
›ti⁄_°rög
)Ë!
EOF
) {

125 
›ti⁄
) {

127 
show_›ti⁄
 = 
SHOW_FTYPE
;

130 
maj‹
 = 
	`©oh
(
›èrg
);

133 
mö‹
 = 
	`©oh
(
›èrg
);

136 
show_›ti⁄
 = 
SHOW_PID
;

139 
	`¥ötf
("\tEº‹: Unknow¿›ti⁄ %c\n", 
›ti⁄
);

140 
	`show_ußge
();

144 i‡((
›töd
 + 1Ë!
¨gc
) {

145 
	`¥ötf
("\tError: Log file isÇot specified.\n");

146 
	`show_ußge
();

148  
›töd
;

149 
	}
}

151 
pid_ít
 *
	$gë_pid_íåy
(
pid
)

153 
pid_ít
 *
íåy
;

155 
	`LIST_FOREACH
(
íåy
, &
pid_öfo
, 
±r
) {

156 i‡(
íåy
->
pid
 ==Öid)

157  
íåy
;

159  
	`LIST_FIRST
(&
pid_öfo
);

160 
	}
}

162 
	$h™dÀ_ç_pid
(*
±r
)

164 
pid_ít
 *
≥¡
;

166 
≥¡
 = 
	`ˇŒoc
(1, (
pid_ít
));

167 
	`as£π
(
≥¡
);

169 
±r
 = 
	`°πok
(
NULL
, " ");

170 
≥¡
->
pid
 = 
	`©oh
(
±r
);

172 
±r
 = 
	`°πok
(
NULL
, " ");

173 
	`°r˝y
(
≥¡
->
«me
, 
±r
);

175 
	`LIST_INSERT_HEAD
(&
pid_öfo
, 
≥¡
, 
±r
);

176 
	}
}

178 
	$h™dÀ_ç_ios
(*
±r
)

180 
pid
, 
ty≥
, 
rw
, 
Àn
;

181 
pid_ít
 *
p
;

183 
±r
 = 
	`°πok
(
NULL
, " ");

184 
pid
 = 
	`©oh
(
±r
);

186 
±r
 = 
	`°πok
(
NULL
, " ");

187 
±r
 = 
	`°πok
(
NULL
, " ");

188 
ty≥
 = 
	`©oh
(
±r
);

190 
±r
 = 
	`°πok
(
NULL
, " ");

191 
rw
 = 
	`©oh
(
±r
);

193 
±r
 = 
	`°πok
(
NULL
, " ");

196 
±r
 = 
	`°πok
(
NULL
, " ");

197 
Àn
 = 
	`©oh
(
±r
);

200 
p
 = 
	`gë_pid_íåy
(
pid
);

201 
p
->
io
[
ty≥
][
rw
 & 0x1] +
Àn
;

202 
p
->
tŸÆ_io
[
rw
 & 0x1] +
Àn
;

205 
tŸÆ_io
[
ty≥
][
rw
 & 0x1] +
Àn
;

206 
	}
}

208 
	$do_∑r£
(
FILE
 *
fûe
)

210 
löe
[300];

211 *
±r
;

212 
i
;

214 
	`fgës
(
löe
, ÷öe), 
fûe
Ë!
NULL
) {

215 
±r
 = 
	`°πok
(
löe
, ":");

217 
±r
 = 
	`°πok
(
NULL
, " :");

219 
i
 = 0; i < 
TP_MAX
; i++) {

220 i‡(!
	`°rcmp
(
±r
, 
åa˚_poöts
[
i
].
«me
))

223 i‡(
i
 =
TP_MAX
)

225 
±r
 = 
	`°πok
(
NULL
, " :");

226 i‡(
maj‹
 && maj‹ !
	`©oh
(
±r
))

228 
±r
 = 
	`°πok
(
NULL
, " :");

229 i‡(
mö‹
 && mö‹ !
	`©oh
(
±r
))

232 
i
) {

233 
TP_PID
:

234 
	`h™dÀ_ç_pid
(
±r
);

236 
TP_IOS
:

237 
	`h™dÀ_ç_ios
(
±r
);

241 
	}
}

243 
	$__¥öt_pid
()

245 
pid_ít
 *
íåy
;

246 
i
;

248 
	`£éoˇÀ
(
LC_ALL
, "");

249 
	`¥ötf
("%8s %16s %17s ||", "PID", "NAME", "R/W in 4KB");

250 
i
 = 0; i < 
__NR_FILES
; i++)

251 
	`¥ötf
(" %17†|", 
fûe_ty≥_°rög
[
i
]);

252 
	`¥ötf
("\n");

254 
	`LIST_FOREACH
(
íåy
, &
pid_öfo
, 
±r
) {

255 
	`¥ötf
("%8x %16s %'8lld %'8lld ||",

256 
íåy
->
pid
,É¡ry->
«me
,

257 
íåy
->
tŸÆ_io
[
READ
],

258 
íåy
->
tŸÆ_io
[
WRITE
]);

259 
i
 = 0; i < 
__NR_FILES
; i++)

260 
	`¥ötf
(" %'8lld %'8lld |",

261 
íåy
->
io
[
i
][
READ
],

262 
íåy
->
io
[
i
][
WRITE
]);

263 
	`¥ötf
("\n");

265 
	}
}

267 
	$__¥öt_·y≥
()

269 
i
;

271 
	`£éoˇÀ
(
LC_ALL
, "");

272 
	`¥ötf
("\n===== Data R/W in 4KBáccoringÅo FileÅypes =====\n");

273 
i
 = 0; i < 
__NR_FILES
; i++)

274 
	`¥ötf
(" %17†|", 
fûe_ty≥_°rög
[
i
]);

275 
	`¥ötf
("\n");

277 
i
 = 0; i < 
__NR_FILES
; i++)

278 
	`¥ötf
(" %'8lld %'8lld |",

279 
tŸÆ_io
[
i
][
READ
],

280 
tŸÆ_io
[
i
][
WRITE
]);

281 
	`¥ötf
("\n");

282 
	}
}

284 
	$do_¥öt
()

286 
show_›ti⁄
) {

287 
SHOW_PID
:

288 
	`__¥öt_pid
();

290 
SHOW_FTYPE
:

291 
	`__¥öt_·y≥
();

293 
SHOW_ALL
:

294 
	`__¥öt_pid
();

295 
	`¥ötf
("\n\n");

296 
	`__¥öt_·y≥
();

299 
	}
}

301 
	$maö
(
¨gc
, **
¨gv
)

303 
FILE
 *
fûe
;

304 
›t
;

306 
›t
 = 
	`∑r£_›ti⁄s
(
¨gc
, 
¨gv
);

308 
fûe
 = 
	`f›í
(
¨gv
[
›t
], "r");

309 i‡(!
fûe
) {

310 
	`≥º‹
("openÜog file");

311 
	`exô
(
EXIT_FAILURE
);

314 
	`do_öô
();

316 
	`do_∑r£
(
fûe
);

318 
	`do_¥öt
();

320 
	`f˛o£
(
fûe
);

322 
	}
}

	@tools/f2fstat.c

1 
	~<°dio.h
>

2 
	~<uni°d.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<f˙é.h
>

6 
	~<libgí.h
>

8 #ifde‡
DEBUG


9 
	#dbg
(
fmt
, 
¨gs
...Ë
	`¥ötf
(fmt, 
__VA_ARGS__
);

	)

11 
	#dbg
(
fmt
, 
¨gs
...)

	)

17 
	#F2FS_STATUS
 "/sys/kî√l/debug/f2fs/°©us"

	)

19 
	#KEY_NODE
 0x00000001

	)

20 
	#KEY_META
 0x00000010

	)

22 
	gutû
;

23 
	gu£d_node_blks
;

24 
	gu£d_d©a_blks
;

27 
	g‰ì_£gs
;

28 
	gvÆid_£gs
;

29 
	gdúty_£gs
;

30 
	g¥e‰ì_£gs
;

32 
	ggc
, 
	gbg_gc
;

33 
	g˝
;

34 
	ggc_d©a_blks
;

35 
	ggc_node_blks
;

39 
	gdúty_node
, 
	gnode_kb
;

40 
	gdúty_díts
;

41 
	gdúty_mëa
, 
	gmëa_kb
;

42 
	g«t_ˇches
;

43 
	gdúty_sô
;

45 
	g‰ì_nids
;

47 
	gs§_blks
;

48 
	glfs_blks
;

49 
	gmem‹y_kb
;

51 
	s›ti⁄s
 {

52 
	mdñay
;

53 
	möãrvÆ
;

54 
	m∑π«me
[32];

57 
	smm_èbÀ
 {

58 c⁄° *
	m«me
;

59 *
	mvÆ
;

60 
	mÊag
;

63 
	$com∑ª_mm_èbÀ
(c⁄° *
a
, c⁄° *
b
)

65 
	`dbg
("[COMPARE] %s, %s\n", ((
mm_èbÀ
 *)
a
)->
«me
, ((mm_èbÀ *)
b
)->name);

66  
	`°rcmp
(((
mm_èbÀ
 *)
a
)->
«me
, ((mm_èbÀ *)
b
)->name);

67 
	}
}

69 
ölöe
 
	$ªmove_√wlöe
(**
hód
)

71 
agaö
:

72 i‡(**
hód
 == '\n') {

73 *
hód
 = *head + 1;

74 
agaö
;

76 
	}
}

78 
	$f2f°©
(
›ti⁄s
 *
›t
)

80 
fd
;

81 
ªt
;

82 
key«me
[32];

83 
buf
[4096];

84 
mm_èbÀ
 
key
 = { 
key«me
, 
NULL
 };

85 
mm_èbÀ
 *
found
;

86 
f2f°©_èbÀ_˙t
;

87 *
hód
, *
èû
;

88 
found_˙t
 = 0;

90 
mm_èbÀ
 
f2f°©_èbÀ
[] = {

91 { " - D©a", &
u£d_d©a_blks
, 0 },

92 { " - Dúty", &
dúty_£gs
, 0 },

93 { " - Fªe", &
‰ì_£gs
, 0 },

94 { " - NATs", &
«t_ˇches
, 0 },

95 { " - Node", &
u£d_node_blks
, 0 },

96 { " - Pª‰ì", &
¥e‰ì_£gs
, 0 },

97 { " - SITs", &
dúty_sô
, 0 },

98 { " - VÆid", &
vÆid_£gs
, 0 },

99 { " - díts", &
dúty_díts
, 0 },

100 { " - fªe_nids", &
‰ì_nids
, 0 },

101 { " - mëa", &
dúty_mëa
, 
KEY_META
 },

102 { " -Çodes", &
dúty_node
, 
KEY_NODE
 },

103 { "CP cÆls", &
˝
, 0 },

104 { "GC cÆls", &
gc
, 0 },

105 { "LFS", &
lfs_blks
, 0 },

106 { "Mem‹y", &
mem‹y_kb
, 0 },

107 { "SSR", &
s§_blks
, 0 },

108 { "Utûiz©i⁄", &
utû
, 0 },

111 
f2f°©_èbÀ_˙t
 = (
f2f°©_èbÀ
)/(
mm_èbÀ
);

113 
fd
 = 
	`›í
(
F2FS_STATUS
, 
O_RDONLY
);

114 i‡(
fd
 < 0) {

115 
	`≥º‹
("›í " 
F2FS_STATUS
);

116 
	`exô
(
EXIT_FAILURE
);

119 
ªt
 = 
	`ªad
(
fd
, 
buf
, 4096);

120 i‡(
ªt
 < 0) {

121 
	`≥º‹
("ªad " 
F2FS_STATUS
);

122 
	`exô
(
EXIT_FAILURE
);

124 
buf
[
ªt
] = '\0';

126 
hód
 = 
buf
;

128 i‡(
›t
->
∑π«me
[0] != '\0') {

129 
hód
 = 
	`°r°r
(
buf
, 
›t
->
∑π«me
);

130 i‡(
hód
 =
NULL
)

131 
	`exô
(
EXIT_FAILURE
);

135 
	`ªmove_√wlöe
(&
hód
);

136 
èû
 = 
	`°rchr
(
hód
, ':');

137 i‡(!
èû
)

139 *
èû
 = '\0';

140 i‡(
	`°æí
(
hód
Ë>(
key«me
)) {

141 
	`dbg
("[OVER] %s\n", 
hód
);

142 *
èû
 = ':';

143 
èû
 = 
	`°rchr
(
hód
, '\n');

144 
hód
 = 
èû
 + 1;

148 
	`°r˝y
(
key«me
, 
hód
);

150 
found
 = 
	`b£¨ch
(&
key
, 
f2f°©_èbÀ
, 
f2f°©_èbÀ_˙t
, (
mm_èbÀ
), 
com∑ª_mm_èbÀ
);

151 
	`dbg
("[RESULT] %†(%s)\n", 
hód
, (
found
) ? "O" : "X");

152 
hód
 = 
èû
 + 1;

153 i‡(!
found
)

154 
√xéöe
;

156 *(
found
->
vÆ
Ë
	`°πoul
(
hód
, &
èû
, 10);

157 i‡(
found
->
Êag
) {

158 
≈ages
;

159 
èû
 = 
	`°r°r
(
hód
, "in");

160 
hód
 = 
èû
 + 2;

161 
≈ages
 = 
	`°πoul
(
hód
, &
èû
, 10);

162 
found
->
Êag
 & (
KEY_NODE
 | 
KEY_META
)) {

163 
KEY_NODE
:

164 
node_kb
 = 
≈ages
 * 4;

166 
KEY_META
:

167 
mëa_kb
 = 
≈ages
 * 4;

171 i‡(++
found_˙t
 =
f2f°©_èbÀ_˙t
)

173 
√xéöe
:

174 
èû
 = 
	`°rchr
(
hód
, '\n');

175 i‡(!
èû
)

177 
hód
 = 
èû
 + 1;

180 
	`˛o£
(
fd
);

181 
	}
}

183 
	$ußge
()

185 
	`¥ötf
("Usage: f2fstat [option]\n"

189 
	`exô
(
EXIT_FAILURE
);

190 
	}
}

192 
	$∑r£_›ti⁄
(
¨gc
, *
¨gv
[], 
›ti⁄s
 *
›t
)

194 
›ti⁄
;

195 c⁄° *
›ti⁄_°rög
 = "d:i:p:h";

197 (
›ti⁄
 = 
	`gë›t
(
¨gc
, 
¨gv
, 
›ti⁄_°rög
)Ë!
EOF
) {

198 
›ti⁄
) {

200 
›t
->
dñay
 = 
	`©oi
(
›èrg
);

203 
›t
->
öãrvÆ
 = 
	`©oi
(
›èrg
);

206 
	`°r˝y
(
›t
->
∑π«me
, 
	`ba£«me
(
›èrg
));

209 
	`ußge
();

213 
	}
}

215 
	$__make_hód
(*
hód
, 
ödex
, 
i
, 
Àn
)

217 
«me_h
[5][20] = {"main segments", "page/slab caches", "cp/gc", "blks", "memory"};

218 
hÆf
 = (
Àn
 - 
	`°æí
(
«me_h
[
i
])) / 2;

220 *(
hód
 + 
ödex
) = '|';

221 
ödex
++;

222 
	`mem£t
(
hód
 + 
ödex
, '-', 
hÆf
);

223 
ödex
 +
hÆf
;

224 
	`°r˝y
(
hód
 + 
ödex
, 
«me_h
[
i
]);

225 
ödex
 +
	`°æí
(
«me_h
[
i
]);

226 
	`mem£t
(
hód
 + 
ödex
, '-', 
hÆf
);

227 
	}
}

229 
	$¥öt_hód
(*
ªs
)

231 *
±r
, *
±r_buf
;

232 
buf
[1024], 
hód
[1024];

233 
«me
[20][10] = {"util", "node", "data", "free", "valid", "dirty", "prefree", "node", "dent", "meta",

235 
i
, 
Àn
, 
¥ev_ödex
 = 0;

237 
±r_buf
 = 
buf
;

238 
	`mem£t
(
buf
, ' ', 1024);

239 
	`mem£t
(
hód
, ' ', 1024);

241 
i
 = 0; i < 20; i++) {

242 
±r
 = (
i
 =0Ë? 
	`°πok
(
ªs
, " "Ë: såtok(
NULL
, " ");

243 
	`°∫˝y
(
±r_buf
, 
«me
[
i
], 
	`°æí
(name[i]));

244 i‡(
i
 == 1) {

245 
¥ev_ödex
 = 
±r_buf
 - 
buf
 - 1;

246 } i‡(
i
 == 7) {

247 
Àn
 = (
±r_buf
 - 
buf
Ë- 1 - 
¥ev_ödex
;

248 
	`__make_hód
(
hód
, 
¥ev_ödex
, 0, 
Àn
);

249 
¥ev_ödex
 = 
±r_buf
 - 
buf
 - 1;

250 } i‡(
i
 == 13) {

251 
Àn
 = (
±r_buf
 - 
buf
Ë- 1 - 
¥ev_ödex
;

252 
	`__make_hód
(
hód
, 
¥ev_ödex
, 1, 
Àn
);

253 
¥ev_ödex
 = 
±r_buf
 - 
buf
 - 1;

254 } i‡(
i
 == 15) {

255 
Àn
 = (
±r_buf
 - 
buf
Ë- 1 - 
¥ev_ödex
;

256 
	`__make_hód
(
hód
, 
¥ev_ödex
, 2, 
Àn
);

257 
¥ev_ödex
 = 
±r_buf
 - 
buf
 - 1;

258 } i‡(
i
 == 17) {

259 
Àn
 = (
±r_buf
 - 
buf
Ë- 1 - 
¥ev_ödex
;

260 
	`__make_hód
(
hód
, 
¥ev_ödex
, 3, 
Àn
);

261 
¥ev_ödex
 = 
±r_buf
 - 
buf
 - 1;

264 
Àn
 = 
	`°æí
(
±r
);

265 
±r_buf
 +(
Àn
 > 
	`°æí
(
«me
[
i
]) ?Üen : strlen(name[i])) + 1;

268 
Àn
 = (
±r_buf
 - 
buf
Ë- 1 - 
¥ev_ödex
;

269 
	`__make_hód
(
hód
, 
¥ev_ödex
, 4, 
Àn
);

271 *
±r_buf
 = 0;

272 *(
hód
 + (
±r_buf
 - 
buf
 - 1)) = '|';

273 *(
hód
 + (
±r_buf
 - 
buf
)) = 0;

274 
	`Ârötf
(
°dîr
, "%s\n%s\n", 
hód
, 
buf
);

275 
	}
}

277 
	$maö
(
¨gc
, *
¨gv
[])

279 
f‹m©
[] = "%4ld %4ld %4ld %4ld %5ld %5ld %7ld %4ld %4ld %4ld %3ld %3ld %4ld %2ld %2ld %3ld %3ld %5ld %4ld %4ld";

280 
buf
[1024], 
tmp
[1024];

281 
hód_öãrvÆ
;

282 
›ti⁄s
 
›t
 = {

283 .
dñay
 = 1,

284 .
öãrvÆ
 = 20,

285 .
∑π«me
 = { 0, },

288 
	`∑r£_›ti⁄
(
¨gc
, 
¨gv
, &
›t
);

289 
hód_öãrvÆ
 = 
›t
.
öãrvÆ
;

292 
	`mem£t
(
buf
, 0, 1024);

293 
	`f2f°©
(&
›t
);

294 
	`•rötf
(
buf
, 
f‹m©
, 
utû
, 
u£d_node_blks
, 
u£d_d©a_blks
,

295 
‰ì_£gs
, 
vÆid_£gs
, 
dúty_£gs
, 
¥e‰ì_£gs
,

296 
dúty_node
, 
dúty_díts
, 
dúty_mëa
, 
dúty_sô
, 
«t_ˇches
, 
‰ì_nids
,

297 
˝
, 
gc
, 
s§_blks
, 
lfs_blks
, 
mem‹y_kb
, 
node_kb
, 
mëa_kb
);

299 
	`°r˝y
(
tmp
, 
buf
);

300 i‡(
hód_öãrvÆ
 =
›t
.
öãrvÆ
)

301 
	`¥öt_hód
(
tmp
);

302 i‡(
hód_öãrvÆ
-- == 0)

303 
hód_öãrvÆ
 = 
›t
.
öãrvÆ
;

305 
	`Ârötf
(
°dîr
, "%s\n", 
buf
);

307 
	`¶ìp
(
›t
.
dñay
);

311 
	}
}

	@tools/fibmap.c

1 
	#_LARGEFILE64_SOURCE


	)

2 
	~<uni°d.h
>

3 
	~<°rög.h
>

4 
	~<°dlib.h
>

5 
	~<°dio.h
>

6 
	~<f˙é.h
>

7 
	~<î∫o.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<sys/io˘l.h
>

10 
	~<sys/°©.h
>

11 
	~<libgí.h
>

12 
	~<löux/hdªg.h
>

13 
	~<löux/ty≥s.h
>

14 
	~<löux/fs.h
>

16 
	sfûe_ext
 {

17 
__u32
 
	mf_pos
;

18 
__u32
 
	m°¨t_blk
;

19 
__u32
 
	míd_blk
;

20 
__u32
 
	mblk_cou¡
;

23 
	$¥öt_ext
(
fûe_ext
 *
ext
)

25 i‡(
ext
->
íd_blk
 == 0)

26 
	`¥ötf
("%8d %8d %8d %8d\n", 
ext
->
f_pos
, 0, 0,Éxt->
blk_cou¡
);

28 
	`¥ötf
("%8d %8d %8d %8d\n", 
ext
->
f_pos
,Éxt->
°¨t_blk
,

29 
ext
->
íd_blk
,Éxt->
blk_cou¡
);

30 
	}
}

32 
	$¥öt_°©
(
°©64
 *
°
)

34 
	`¥ötf
("--------------------------------------------\n");

35 
	`¥ötf
("dev [%d:%d]\n", 
	`maj‹
(
°
->
°_dev
), 
	`mö‹
(st->st_dev));

36 
	`¥ötf
("öÿ [0x%8lx : %ld]\n", 
°
->
°_öo
, st->st_ino);

37 
	`¥ötf
("modê [0x%8x : %d]\n", 
°
->
°_mode
, st->st_mode);

38 
	`¥ötf
("∆ök [0x%8lx : %ld]\n", 
°
->
°_∆ök
, st->st_nlink);

39 
	`¥ötf
("uid [0x%8x : %d]\n", 
°
->
°_uid
, st->st_uid);

40 
	`¥ötf
("gid [0x%8x : %d]\n", 
°
->
°_gid
, st->st_gid);

41 
	`¥ötf
("sizê [0x%8lx : %ld]\n", 
°
->
°_size
, st->st_size);

42 
	`¥ötf
("blksizê [0x%8lx : %ld]\n", 
°
->
°_blksize
, st->st_blksize);

43 
	`¥ötf
("block† [0x%8lx : %ld]\n", 
°
->
°_blocks
, st->st_blocks);

44 
	`¥ötf
("--------------------------------------------\n\n");

45 
	}
}

47 
	$°©_bdev
(
°©64
 *
°
, *
°¨t_lba
)

49 
°©
 
bdev_°©
;

50 
hd_geomëry
 
geom
;

51 
dev«me
[32] = { 0, };

52 
lök«me
[32] = { 0, };

53 
fd
;

55 
	`•rötf
(
dev«me
, "/dev/block/%d:%d", 
	`maj‹
(
°
->
°_dev
), 
	`mö‹
(st->st_dev));

57 
fd
 = 
	`›í
(
dev«me
, 
O_RDONLY
);

58 i‡(
fd
 < 0)

61 i‡(
	`f°©
(
fd
, &
bdev_°©
) < 0)

62 
out
;

64 i‡(
	`S_ISBLK
(
bdev_°©
.
°_mode
)) {

65 i‡(
	`io˘l
(
fd
, 
HDIO_GETGEO
, &
geom
) < 0)

66 *
°¨t_lba
 = 0;

68 *
°¨t_lba
 = 
geom
.
°¨t
;

71 i‡(
	`ªadlök
(
dev«me
, 
lök«me
, (linkname)) < 0)

72 
out
;

74 
	`¥ötf
("----------------bdev info-------------------\n");

75 
	`¥ötf
("dev«mê%s\n", 
	`ba£«me
(
lök«me
));

76 
	`¥ötf
("°¨t_lb®%u\n", *
°¨t_lba
);

78 
out
:

79 
	`˛o£
(
fd
);

81 
	}
}

83 
	$maö
(
¨gc
, *
¨gv
[])

85 
fd
;

86 
ªt
 = 0;

87 *
fûíame
;

88 
°©64
 
°
;

89 
tŸÆ_blks
;

90 
i
;

91 
fûe_ext
 
ext
;

92 
__u32
 
°¨t_lba
;

93 
__u32
 
blknum
;

95 i‡(
¨gc
 != 2) {

96 
	`Ârötf
(
°dîr
, "No filename\n");

97 
	`exô
(-1);

99 
fûíame
 = 
¨gv
[1];

101 
fd
 = 
	`›í
(
fûíame
, 
O_RDONLY
|
O_LARGEFILE
);

102 i‡(
fd
 < 0) {

103 
ªt
 = 
î∫o
;

104 
	`≥º‹
(
fûíame
);

105 
	`exô
(-1);

108 
	`fsync
(
fd
);

110 i‡(
	`f°©64
(
fd
, &
°
) < 0) {

111 
ªt
 = 
î∫o
;

112 
	`≥º‹
(
fûíame
);

113 
out
;

116 
	`°©_bdev
(&
°
, &
°¨t_lba
);

118 
tŸÆ_blks
 = (
°
.
°_size
 + st.
°_blksize
 - 1) / st.st_blksize;

120 
	`¥ötf
("\n----------------file info-------------------\n");

121 
	`¥ötf
("%†:\n", 
fûíame
);

122 
	`¥öt_°©
(&
°
);

123 
	`¥ötf
("file_pos start_blkÉnd_blk blks\n");

125 
blknum
 = 0;

126 i‡(
	`io˘l
(
fd
, 
FIBMAP
, &
blknum
) < 0) {

127 
ªt
 = 
î∫o
;

128 
	`≥º‹
("ioctl(FIBMAP)");

129 
out
;

131 
ext
.
f_pos
 = 0;

132 
ext
.
°¨t_blk
 = 
blknum
;

133 
ext
.
íd_blk
 = 
blknum
;

134 
ext
.
blk_cou¡
 = 1;

136 
i
 = 1; i < 
tŸÆ_blks
; i++) {

137 
blknum
 = 
i
;

139 i‡(
	`io˘l
(
fd
, 
FIBMAP
, &
blknum
) < 0) {

140 
ªt
 = 
î∫o
;

141 
	`≥º‹
("ioctl(FIBMAP)");

142 
out
;

145 i‡((
blknum
 =0 && blknum =
ext
.
íd_blk
) || (ext.end_blk + 1) == blknum) {

146 
ext
.
íd_blk
 = 
blknum
;

147 
ext
.
blk_cou¡
++;

149 
	`¥öt_ext
(&
ext
);

150 
ext
.
f_pos
 = 
i
 * 
°
.
°_blksize
;

151 
ext
.
°¨t_blk
 = 
blknum
;

152 
ext
.
íd_blk
 = 
blknum
;

153 
ext
.
blk_cou¡
 = 1;

157 
	`¥öt_ext
(&
ext
);

158 
out
:

159 
	`˛o£
(
fd
);

160  
ªt
;

161 
	}
}

	@/usr/include/assert.h

22 #ifdef 
_ASSERT_H


24 #unde‡
_ASSERT_H


25 #unde‡
as£π


26 #unde‡
__ASSERT_VOID_CAST


28 #ifdef 
__USE_GNU


29 #unde‡
as£π_≥º‹


34 
	#_ASSERT_H
 1

	)

35 
	~<„©uªs.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

38 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

40 
	#__ASSERT_VOID_CAST
 ()

	)

48 #ifdef 
NDEBUG


50 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

58 #ifdef 
__USE_GNU


59 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

64 #i‚de‡
_ASSERT_H_DECLS


65 
	#_ASSERT_H_DECLS


	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

70 
__löe
, c⁄° *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

75 
__löe
, c⁄° *
__fun˘i⁄
)

76 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

81 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

82 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_DECLS


88 
	#as£π
(
ex¥
) \

89 ((
ex¥
) \

90 ? 
	`__ASSERT_VOID_CAST
 (0) \

91 : 
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

93 #ifdef 
__USE_GNU


94 
	#as£π_≥º‹
(
î∫um
) \

95 (!(
î∫um
) \

96 ? 
	`__ASSERT_VOID_CAST
 (0) \

97 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

105 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

106 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

108 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

109 
	#__ASSERT_FUNCTION
 
__func__


	)

111 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

118 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


120 #unde‡
°©ic_as£π


121 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/byteswap.h

18 #i‚de‡
_BYTESWAP_H


19 
	#_BYTESWAP_H
 1

	)

21 
	~<„©uªs.h
>

24 
	~<bôs/byãsw≠.h
>

31 
	#bsw≠_16
(
x
Ë
	`__bsw≠_16
 (x)

	)

34 
	#bsw≠_32
(
x
Ë
	`__bsw≠_32
 (x)

	)

37 
	#bsw≠_64
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


26 #i‚def 
__√ed_Em©h


27 
	#_ERRNO_H
 1

	)

28 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 
	~<bôs/î∫o.h
>

36 #unde‡
__√ed_Em©h


38 #ifdef 
_ERRNO_H


45 #i‚def 
î∫o


46 
î∫o
;

49 #ifde‡
__USE_GNU


54 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

58 
	g__END_DECLS


66 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


67 #i‚de‡
__îr‹_t_deföed


68 
	tîr‹_t
;

69 
	#__îr‹_t_deföed
 1

	)

71 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

40 #i‚de‡
__mode_t_deföed


41 
__mode_t
 
	tmode_t
;

42 
	#__mode_t_deföed


	)

45 #i‚de‡
__off_t_deföed


46 #i‚de‡
__USE_FILE_OFFSET64


47 
__off_t
 
	toff_t
;

49 
__off64_t
 
	toff_t
;

51 
	#__off_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


55 
__off64_t
 
	toff64_t
;

56 
	#__off64_t_deföed


	)

59 #i‚de‡
__pid_t_deföed


60 
__pid_t
 
	tpid_t
;

61 
	#__pid_t_deföed


	)

65 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


66 
	#__√ed_time•ec


	)

67 
	~<time.h
>

68 
	~<bôs/°©.h
>

70 
	#S_IFMT
 
__S_IFMT


	)

71 
	#S_IFDIR
 
__S_IFDIR


	)

72 
	#S_IFCHR
 
__S_IFCHR


	)

73 
	#S_IFBLK
 
__S_IFBLK


	)

74 
	#S_IFREG
 
__S_IFREG


	)

75 #ifde‡
__S_IFIFO


76 
	#S_IFIFO
 
__S_IFIFO


	)

78 #ifde‡
__S_IFLNK


79 
	#S_IFLNK
 
__S_IFLNK


	)

81 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


82 
	#S_IFSOCK
 
__S_IFSOCK


	)

87 
	#S_ISUID
 
__S_ISUID


	)

88 
	#S_ISGID
 
__S_ISGID


	)

90 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


92 
	#S_ISVTX
 
__S_ISVTX


	)

95 
	#S_IRUSR
 
__S_IREAD


	)

96 
	#S_IWUSR
 
__S_IWRITE


	)

97 
	#S_IXUSR
 
__S_IEXEC


	)

99 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

101 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

102 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

103 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

105 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

107 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

108 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

109 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

111 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

114 #ifdef 
__USE_MISC


115 #i‚de‡
R_OK


118 
	#R_OK
 4

	)

119 
	#W_OK
 2

	)

120 
	#X_OK
 1

	)

121 
	#F_OK
 0

	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#SEEK_SET
 0

	)

128 
	#SEEK_CUR
 1

	)

129 
	#SEEK_END
 2

	)

137 
f˙é
 (
__fd
, 
__cmd
, ...);

145 #i‚de‡
__USE_FILE_OFFSET64


146 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

148 #ifde‡
__REDIRECT


149 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

150 
	`__n⁄nuŒ
 ((1));

152 
	#›í
 
›í64


	)

155 #ifde‡
__USE_LARGEFILE64


156 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

159 #ifde‡
__USE_ATFILE


169 #i‚de‡
__USE_FILE_OFFSET64


170 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

171 
	`__n⁄nuŒ
 ((2));

173 #ifde‡
__REDIRECT


174 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

175 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

177 
	#›í©
 
›í©64


	)

180 #ifde‡
__USE_LARGEFILE64


181 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

182 
	`__n⁄nuŒ
 ((2));

191 #i‚de‡
__USE_FILE_OFFSET64


192 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

194 #ifde‡
__REDIRECT


195 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

196 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

198 
	#¸ót
 
¸ót64


	)

201 #ifde‡
__USE_LARGEFILE64


202 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

205 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

206 && !
deföed
 
__USE_POSIX
))

215 
	#F_ULOCK
 0

	)

216 
	#F_LOCK
 1

	)

217 
	#F_TLOCK
 2

	)

218 
	#F_TEST
 3

	)

220 #i‚de‡
__USE_FILE_OFFSET64


221 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

223 #ifde‡
__REDIRECT


224 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

226 
	#lockf
 
lockf64


	)

229 #ifde‡
__USE_LARGEFILE64


230 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

234 #ifde‡
__USE_XOPEN2K


237 #i‚de‡
__USE_FILE_OFFSET64


238 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

239 
__advi£
Ë
__THROW
;

241 #ifde‡
__REDIRECT_NTH


242 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

243 
__off64_t
 
__Àn
, 
__advi£
),

244 
posix_Ádvi£64
);

246 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

249 #ifde‡
__USE_LARGEFILE64


250 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

251 
__advi£
Ë
__THROW
;

259 #i‚de‡
__USE_FILE_OFFSET64


260 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

262 #ifde‡
__REDIRECT


263 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

264 
__off64_t
 
__Àn
),

265 
posix_ÁŒoˇã64
);

267 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

270 #ifde‡
__USE_LARGEFILE64


271 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

277 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

278 && 
deföed
 
__va_¨g_∑ck_Àn


279 
	~<bôs/f˙é2.h
>

282 
__END_DECLS


	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

43 #i‡
__WORDSIZE
 == 64

44 
	#__PRI64_PREFIX
 "l"

	)

45 
	#__PRIPTR_PREFIX
 "l"

	)

47 
	#__PRI64_PREFIX
 "Œ"

	)

48 
	#__PRIPTR_PREFIX


	)

54 
	#PRId8
 "d"

	)

55 
	#PRId16
 "d"

	)

56 
	#PRId32
 "d"

	)

57 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

59 
	#PRIdLEAST8
 "d"

	)

60 
	#PRIdLEAST16
 "d"

	)

61 
	#PRIdLEAST32
 "d"

	)

62 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdFAST8
 "d"

	)

65 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

66 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

67 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIi8
 "i"

	)

71 
	#PRIi16
 "i"

	)

72 
	#PRIi32
 "i"

	)

73 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

75 
	#PRIiLEAST8
 "i"

	)

76 
	#PRIiLEAST16
 "i"

	)

77 
	#PRIiLEAST32
 "i"

	)

78 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiFAST8
 "i"

	)

81 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

82 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

83 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIo8
 "o"

	)

87 
	#PRIo16
 "o"

	)

88 
	#PRIo32
 "o"

	)

89 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

91 
	#PRIoLEAST8
 "o"

	)

92 
	#PRIoLEAST16
 "o"

	)

93 
	#PRIoLEAST32
 "o"

	)

94 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoFAST8
 "o"

	)

97 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

98 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

99 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIu8
 "u"

	)

103 
	#PRIu16
 "u"

	)

104 
	#PRIu32
 "u"

	)

105 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

107 
	#PRIuLEAST8
 "u"

	)

108 
	#PRIuLEAST16
 "u"

	)

109 
	#PRIuLEAST32
 "u"

	)

110 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuFAST8
 "u"

	)

113 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

114 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

115 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIx8
 "x"

	)

119 
	#PRIx16
 "x"

	)

120 
	#PRIx32
 "x"

	)

121 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

123 
	#PRIxLEAST8
 "x"

	)

124 
	#PRIxLEAST16
 "x"

	)

125 
	#PRIxLEAST32
 "x"

	)

126 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxFAST8
 "x"

	)

129 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

130 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

131 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIX8
 "X"

	)

135 
	#PRIX16
 "X"

	)

136 
	#PRIX32
 "X"

	)

137 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

139 
	#PRIXLEAST8
 "X"

	)

140 
	#PRIXLEAST16
 "X"

	)

141 
	#PRIXLEAST32
 "X"

	)

142 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXFAST8
 "X"

	)

145 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

146 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

147 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

151 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

152 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

153 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

154 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

155 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

156 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

160 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

161 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

162 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

163 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

164 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

165 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

171 
	#SCNd8
 "hhd"

	)

172 
	#SCNd16
 "hd"

	)

173 
	#SCNd32
 "d"

	)

174 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

176 
	#SCNdLEAST8
 "hhd"

	)

177 
	#SCNdLEAST16
 "hd"

	)

178 
	#SCNdLEAST32
 "d"

	)

179 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdFAST8
 "hhd"

	)

182 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

183 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

184 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNi8
 "hhi"

	)

188 
	#SCNi16
 "hi"

	)

189 
	#SCNi32
 "i"

	)

190 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

192 
	#SCNiLEAST8
 "hhi"

	)

193 
	#SCNiLEAST16
 "hi"

	)

194 
	#SCNiLEAST32
 "i"

	)

195 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiFAST8
 "hhi"

	)

198 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

199 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

200 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNu8
 "hhu"

	)

204 
	#SCNu16
 "hu"

	)

205 
	#SCNu32
 "u"

	)

206 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

208 
	#SCNuLEAST8
 "hhu"

	)

209 
	#SCNuLEAST16
 "hu"

	)

210 
	#SCNuLEAST32
 "u"

	)

211 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuFAST8
 "hhu"

	)

214 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

215 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

216 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNo8
 "hho"

	)

220 
	#SCNo16
 "ho"

	)

221 
	#SCNo32
 "o"

	)

222 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

224 
	#SCNoLEAST8
 "hho"

	)

225 
	#SCNoLEAST16
 "ho"

	)

226 
	#SCNoLEAST32
 "o"

	)

227 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoFAST8
 "hho"

	)

230 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

231 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

232 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNx8
 "hhx"

	)

236 
	#SCNx16
 "hx"

	)

237 
	#SCNx32
 "x"

	)

238 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

240 
	#SCNxLEAST8
 "hhx"

	)

241 
	#SCNxLEAST16
 "hx"

	)

242 
	#SCNxLEAST32
 "x"

	)

243 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxFAST8
 "hhx"

	)

246 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

247 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

248 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

252 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

253 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

254 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

255 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

256 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

259 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

260 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

261 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

262 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

263 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

266 
	g__BEGIN_DECLS


268 #i‡
__WORDSIZE
 == 64

273 
	mquŸ
;

274 
	mªm
;

275 } 
	timaxdiv_t
;

282 
__exãnsi⁄__
 
	mquŸ
;

283 
__exãnsi⁄__
 
	mªm
;

284 } 
	timaxdiv_t
;

290 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

293 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

294 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

297 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

298 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

301 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

302 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

305 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

306 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

307 
__THROW
;

310 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

311 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

312 
__THROW
;

314 #ifde‡
__USE_EXTERN_INLINES


316 #i‡
__WORDSIZE
 == 64

318 
	$__°πﬁ_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

319 **
__ª°ri˘
 
__íd±r
,

320 
__ba£
, 
__group
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

323 
__exã∫_ölöe
 
ötmax_t


324 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

325 
ba£
))

327  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

328 
	}
}

330 
	$__°πoul_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 ** 
__ª°ri˘
 
__íd±r
,

332 
__ba£
, 
__group
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

335 
__exã∫_ölöe
 
uötmax_t


336 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

337 
ba£
))

339  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

340 
	}
}

342 
	$__wc°ﬁ_öã∫Æ
 (c⁄° 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

343 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

344 
__ba£
, 
__group
)

345 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

347 
__exã∫_ölöe
 
ötmax_t


348 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

349 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

351  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

352 
	}
}

354 
	$__wc°oul_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

355 
__ª°ri˘
 
__≈å
,

356 
__gwch¨_t
 **

357 
__ª°ri˘
 
__íd±r
,

358 
__ba£
, 
__group
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

361 
__exã∫_ölöe
 
uötmax_t


362 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

363 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

365  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

366 
	}
}

370 
__exãnsi⁄__


371 
	$__°πﬁl_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

372 **
__ª°ri˘
 
__íd±r
,

373 
__ba£
, 
__group
)

374 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

376 
__exã∫_ölöe
 
ötmax_t


377 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

378 
ba£
))

380  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

381 
	}
}

383 
__exãnsi⁄__


384 
	$__°πouŒ_öã∫Æ
 (const *

385 
__ª°ri˘
 
__≈å
,

387 
__ª°ri˘
 
__íd±r
,

388 
__ba£
,

389 
__group
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

392 
__exã∫_ölöe
 
uötmax_t


393 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

394 
ba£
))

396  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

397 
	}
}

399 
__exãnsi⁄__


400 
	$__wc°ﬁl_öã∫Æ
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

401 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

402 
__ba£
, 
__group
)

403 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

405 
__exã∫_ölöe
 
ötmax_t


406 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

407 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

409  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

410 
	}
}

413 
__exãnsi⁄__


414 
	$__wc°ouŒ_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

415 
__ª°ri˘
 
__≈å
,

416 
__gwch¨_t
 **

417 
__ª°ri˘
 
__íd±r
,

418 
__ba£
,

419 
__group
)

420 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

422 
__exã∫_ölöe
 
uötmax_t


423 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

424 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

426  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

427 
	}
}

432 
	g__END_DECLS


	@/usr/include/libgen.h

18 #i‚de‡
_LIBGEN_H


19 
	#_LIBGEN_H
 1

	)

21 
	~<„©uªs.h
>

23 
__BEGIN_DECLS


26 *
	$dú«me
 (*
__∑th
Ë
__THROW
;

34 *
	$__xpg_ba£«me
 (*
__∑th
Ë
__THROW
;

35 
	#ba£«me
 
__xpg_ba£«me


	)

37 
__END_DECLS


	@/usr/include/linux/falloc.h

1 #i‚de‡
_FALLOC_H_


2 
	#_FALLOC_H_


	)

4 
	#FALLOC_FL_KEEP_SIZE
 0x01

	)

5 
	#FALLOC_FL_PUNCH_HOLE
 0x02

	)

6 
	#FALLOC_FL_NO_HIDE_STALE
 0x04

	)

	@/usr/include/linux/fs.h

1 #i‚de‡
_LINUX_FS_H


2 
	#_LINUX_FS_H


	)

9 
	~<löux/limôs.h
>

10 
	~<löux/io˘l.h
>

11 
	~<löux/ty≥s.h
>

24 #unde‡
NR_OPEN


25 
	#INR_OPEN_CUR
 1024

	)

26 
	#INR_OPEN_MAX
 4096

	)

28 
	#BLOCK_SIZE_BITS
 10

	)

29 
	#BLOCK_SIZE
 (1<<
BLOCK_SIZE_BITS
)

	)

31 
	#SEEK_SET
 0

	)

32 
	#SEEK_CUR
 1

	)

33 
	#SEEK_END
 2

	)

34 
	#SEEK_DATA
 3

	)

35 
	#SEEK_HOLE
 4

	)

36 
	#SEEK_MAX
 
SEEK_HOLE


	)

38 
	sf°rim_ønge
 {

39 
__u64
 
	m°¨t
;

40 
__u64
 
	mÀn
;

41 
__u64
 
	mmöÀn
;

45 
	sfûes_°©_°ru˘
 {

46 
	mƒ_fûes
;

47 
	mƒ_‰ì_fûes
;

48 
	mmax_fûes
;

51 
	söodes_°©_t
 {

52 
	mƒ_öodes
;

53 
	mƒ_unu£d
;

54 
	mdummy
[5];

58 
	#NR_FILE
 8192

	)

64 
	#MS_RDONLY
 1

	)

65 
	#MS_NOSUID
 2

	)

66 
	#MS_NODEV
 4

	)

67 
	#MS_NOEXEC
 8

	)

68 
	#MS_SYNCHRONOUS
 16

	)

69 
	#MS_REMOUNT
 32

	)

70 
	#MS_MANDLOCK
 64

	)

71 
	#MS_DIRSYNC
 128

	)

72 
	#MS_NOATIME
 1024

	)

73 
	#MS_NODIRATIME
 2048

	)

74 
	#MS_BIND
 4096

	)

75 
	#MS_MOVE
 8192

	)

76 
	#MS_REC
 16384

	)

77 
	#MS_VERBOSE
 32768

	)

79 
	#MS_SILENT
 32768

	)

80 
	#MS_POSIXACL
 (1<<16Ë

	)

81 
	#MS_UNBINDABLE
 (1<<17Ë

	)

82 
	#MS_PRIVATE
 (1<<18Ë

	)

83 
	#MS_SLAVE
 (1<<19Ë

	)

84 
	#MS_SHARED
 (1<<20Ë

	)

85 
	#MS_RELATIME
 (1<<21Ë

	)

86 
	#MS_KERNMOUNT
 (1<<22Ë

	)

87 
	#MS_I_VERSION
 (1<<23Ë

	)

88 
	#MS_STRICTATIME
 (1<<24Ë

	)

91 
	#MS_NOSEC
 (1<<28)

	)

92 
	#MS_BORN
 (1<<29)

	)

93 
	#MS_ACTIVE
 (1<<30)

	)

94 
	#MS_NOUSER
 (1<<31)

	)

99 
	#MS_RMT_MASK
 (
MS_RDONLY
|
MS_SYNCHRONOUS
|
MS_MANDLOCK
|
MS_I_VERSION
)

	)

104 
	#MS_MGC_VAL
 0xC0ED0000

	)

105 
	#MS_MGC_MSK
 0xffff0000

	)

110 
	#BLKROSET
 
	`_IO
(0x12,93Ë

	)

111 
	#BLKROGET
 
	`_IO
(0x12,94Ë

	)

112 
	#BLKRRPART
 
	`_IO
(0x12,95Ë

	)

113 
	#BLKGETSIZE
 
	`_IO
(0x12,96Ë

	)

114 
	#BLKFLSBUF
 
	`_IO
(0x12,97Ë

	)

115 
	#BLKRASET
 
	`_IO
(0x12,98Ë

	)

116 
	#BLKRAGET
 
	`_IO
(0x12,99Ë

	)

117 
	#BLKFRASET
 
	`_IO
(0x12,100)

	)

118 
	#BLKFRAGET
 
	`_IO
(0x12,101)

	)

119 
	#BLKSECTSET
 
	`_IO
(0x12,102)

	)

120 
	#BLKSECTGET
 
	`_IO
(0x12,103)

	)

121 
	#BLKSSZGET
 
	`_IO
(0x12,104)

	)

123 
	#BLKPG
 
	`_IO
(0x12,105)

	)

127 
	#BLKELVGET
 
	`_IOR
(0x12,106,
size_t
)

	)

128 
	#BLKELVSET
 
	`_IOW
(0x12,107,
size_t
)

	)

133 
	#BLKBSZGET
 
	`_IOR
(0x12,112,
size_t
)

	)

134 
	#BLKBSZSET
 
	`_IOW
(0x12,113,
size_t
)

	)

135 
	#BLKGETSIZE64
 
	`_IOR
(0x12,114,
size_t
Ë

	)

136 
	#BLKTRACESETUP
 
	`_IOWR
(0x12,115,
blk_u£r_åa˚_£tup
)

	)

137 
	#BLKTRACESTART
 
	`_IO
(0x12,116)

	)

138 
	#BLKTRACESTOP
 
	`_IO
(0x12,117)

	)

139 
	#BLKTRACETEARDOWN
 
	`_IO
(0x12,118)

	)

140 
	#BLKDISCARD
 
	`_IO
(0x12,119)

	)

141 
	#BLKIOMIN
 
	`_IO
(0x12,120)

	)

142 
	#BLKIOOPT
 
	`_IO
(0x12,121)

	)

143 
	#BLKALIGNOFF
 
	`_IO
(0x12,122)

	)

144 
	#BLKPBSZGET
 
	`_IO
(0x12,123)

	)

145 
	#BLKDISCARDZEROES
 
	`_IO
(0x12,124)

	)

146 
	#BLKSECDISCARD
 
	`_IO
(0x12,125)

	)

147 
	#BLKROTATIONAL
 
	`_IO
(0x12,126)

	)

148 
	#BLKZEROOUT
 
	`_IO
(0x12,127)

	)

150 
	#BMAP_IOCTL
 1

	)

151 
	#FIBMAP
 
	`_IO
(0x00,1Ë

	)

152 
	#FIGETBSZ
 
	`_IO
(0x00,2Ë

	)

153 
	#FIFREEZE
 
	`_IOWR
('X', 119, Ë

	)

154 
	#FITHAW
 
	`_IOWR
('X', 120, Ë

	)

155 
	#FITRIM
 
	`_IOWR
('X', 121, 
f°rim_ønge
Ë

	)

157 
	#FS_IOC_GETFLAGS
 
	`_IOR
('f', 1, )

	)

158 
	#FS_IOC_SETFLAGS
 
	`_IOW
('f', 2, )

	)

159 
	#FS_IOC_GETVERSION
 
	`_IOR
('v', 1, )

	)

160 
	#FS_IOC_SETVERSION
 
	`_IOW
('v', 2, )

	)

161 
	#FS_IOC_FIEMAP
 
	`_IOWR
('f', 11, 
fõm≠
)

	)

162 
	#FS_IOC32_GETFLAGS
 
	`_IOR
('f', 1, )

	)

163 
	#FS_IOC32_SETFLAGS
 
	`_IOW
('f', 2, )

	)

164 
	#FS_IOC32_GETVERSION
 
	`_IOR
('v', 1, )

	)

165 
	#FS_IOC32_SETVERSION
 
	`_IOW
('v', 2, )

	)

170 
	#FS_SECRM_FL
 0x00000001

	)

171 
	#FS_UNRM_FL
 0x00000002

	)

172 
	#FS_COMPR_FL
 0x00000004

	)

173 
	#FS_SYNC_FL
 0x00000008

	)

174 
	#FS_IMMUTABLE_FL
 0x00000010

	)

175 
	#FS_APPEND_FL
 0x00000020

	)

176 
	#FS_NODUMP_FL
 0x00000040

	)

177 
	#FS_NOATIME_FL
 0x00000080

	)

179 
	#FS_DIRTY_FL
 0x00000100

	)

180 
	#FS_COMPRBLK_FL
 0x00000200

	)

181 
	#FS_NOCOMP_FL
 0x00000400

	)

182 
	#FS_ECOMPR_FL
 0x00000800

	)

184 
	#FS_BTREE_FL
 0x00001000

	)

185 
	#FS_INDEX_FL
 0x00001000

	)

186 
	#FS_IMAGIC_FL
 0x00002000

	)

187 
	#FS_JOURNAL_DATA_FL
 0x00004000

	)

188 
	#FS_NOTAIL_FL
 0x00008000

	)

189 
	#FS_DIRSYNC_FL
 0x00010000

	)

190 
	#FS_TOPDIR_FL
 0x00020000

	)

191 
	#FS_EXTENT_FL
 0x00080000

	)

192 
	#FS_DIRECTIO_FL
 0x00100000

	)

193 
	#FS_NOCOW_FL
 0x00800000

	)

194 
	#FS_RESERVED_FL
 0x80000000

	)

196 
	#FS_FL_USER_VISIBLE
 0x0003DFFF

	)

197 
	#FS_FL_USER_MODIFIABLE
 0x000380FF

	)

200 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

201 
	#SYNC_FILE_RANGE_WRITE
 2

	)

202 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

	@/usr/include/linux/hdreg.h

1 #i‚de‡
_LINUX_HDREG_H


2 
	#_LINUX_HDREG_H


	)

4 
	~<löux/ty≥s.h
>

10 
	#HDIO_DRIVE_CMD_HDR_SIZE
 (4 * (
__u8
))

	)

11 
	#HDIO_DRIVE_HOB_HDR_SIZE
 (8 * (
__u8
))

	)

12 
	#HDIO_DRIVE_TASK_HDR_SIZE
 (8 * (
__u8
))

	)

14 
	#IDE_DRIVE_TASK_NO_DATA
 0

	)

15 
	#IDE_DRIVE_TASK_INVALID
 -1

	)

16 
	#IDE_DRIVE_TASK_SET_XFER
 1

	)

17 
	#IDE_DRIVE_TASK_IN
 2

	)

18 
	#IDE_DRIVE_TASK_OUT
 3

	)

19 
	#IDE_DRIVE_TASK_RAW_WRITE
 4

	)

24 
	#IDE_TASKFILE_STD_IN_FLAGS
 0xFE

	)

25 
	#IDE_HOB_STD_IN_FLAGS
 0x3C

	)

26 
	#IDE_TASKFILE_STD_OUT_FLAGS
 0xFE

	)

27 
	#IDE_HOB_STD_OUT_FLAGS
 0x3C

	)

29 
	tèsk_i‹eg_t
;

30 
	tßè_i‹eg_t
;

32 
	uide_ªg_vÆid_s
 {

33 
	mÆl
 : 16;

35 
	md©a
 : 1;

36 
	mîr‹_„©uª
 : 1;

37 
	m£˘‹
 : 1;

38 
	mn£˘‹
 : 1;

39 
	mlcyl
 : 1;

40 
	mhcyl
 : 1;

41 
	m£À˘
 : 1;

42 
	m°©us_comm™d
 : 1;

44 
	md©a_hob
 : 1;

45 
	mîr‹_„©uª_hob
 : 1;

46 
	m£˘‹_hob
 : 1;

47 
	mn£˘‹_hob
 : 1;

48 
	mlcyl_hob
 : 1;

49 
	mhcyl_hob
 : 1;

50 
	m£À˘_hob
 : 1;

51 
	mc⁄åﬁ_hob
 : 1;

52 } 
	mb
;

53 } 
	tide_ªg_vÆid_t
;

55 
	side_èsk_ªque°_s
 {

56 
__u8
 
	mio_p‹ts
[8];

57 
__u8
 
	mhob_p‹ts
[8];

58 
ide_ªg_vÆid_t
 
	mout_Êags
;

59 
ide_ªg_vÆid_t
 
	mö_Êags
;

60 
	md©a_pha£
;

61 
	mªq_cmd
;

62 
	mout_size
;

63 
	mö_size
;

64 } 
	tide_èsk_ªque°_t
;

66 
	side_io˘l_ªque°_s
 {

67 
ide_èsk_ªque°_t
 *
	mèsk_ªque°
;

68 *
	mout_buf„r
;

69 *
	mö_buf„r
;

70 } 
	tide_io˘l_ªque°_t
;

72 
	shd_drive_cmd_hdr
 {

73 
__u8
 
	mcomm™d
;

74 
__u8
 
	m£˘‹_numbî
;

75 
__u8
 
	m„©uª
;

76 
__u8
 
	m£˘‹_cou¡
;

79 
	shd_drive_èsk_hdr
 {

80 
__u8
 
	md©a
;

81 
__u8
 
	m„©uª
;

82 
__u8
 
	m£˘‹_cou¡
;

83 
__u8
 
	m£˘‹_numbî
;

84 
__u8
 
	mlow_cylödî
;

85 
__u8
 
	mhigh_cylödî
;

86 
__u8
 
	mdevi˚_hód
;

87 
__u8
 
	mcomm™d
;

88 } 
	tèsk_°ru˘_t
;

90 
	shd_drive_hob_hdr
 {

91 
__u8
 
	md©a
;

92 
__u8
 
	m„©uª
;

93 
__u8
 
	m£˘‹_cou¡
;

94 
__u8
 
	m£˘‹_numbî
;

95 
__u8
 
	mlow_cylödî
;

96 
__u8
 
	mhigh_cylödî
;

97 
__u8
 
	mdevi˚_hód
;

98 
__u8
 
	mc⁄åﬁ
;

99 } 
	thob_°ru˘_t
;

101 
	#TASKFILE_NO_DATA
 0x0000

	)

103 
	#TASKFILE_IN
 0x0001

	)

104 
	#TASKFILE_MULTI_IN
 0x0002

	)

106 
	#TASKFILE_OUT
 0x0004

	)

107 
	#TASKFILE_MULTI_OUT
 0x0008

	)

108 
	#TASKFILE_IN_OUT
 0x0010

	)

110 
	#TASKFILE_IN_DMA
 0x0020

	)

111 
	#TASKFILE_OUT_DMA
 0x0040

	)

112 
	#TASKFILE_IN_DMAQ
 0x0080

	)

113 
	#TASKFILE_OUT_DMAQ
 0x0100

	)

115 
	#TASKFILE_P_IN
 0x0200

	)

116 
	#TASKFILE_P_OUT
 0x0400

	)

117 
	#TASKFILE_P_IN_DMA
 0x0800

	)

118 
	#TASKFILE_P_OUT_DMA
 0x1000

	)

119 
	#TASKFILE_P_IN_DMAQ
 0x2000

	)

120 
	#TASKFILE_P_OUT_DMAQ
 0x4000

	)

121 
	#TASKFILE_48
 0x8000

	)

122 
	#TASKFILE_INVALID
 0x7fff

	)

125 
	#WIN_NOP
 0x00

	)

129 
	#CFA_REQ_EXT_ERROR_CODE
 0x03

	)

133 
	#WIN_SRST
 0x08

	)

134 
	#WIN_DEVICE_RESET
 0x08

	)

138 
	#WIN_RECAL
 0x10

	)

139 
	#WIN_RESTORE
 
WIN_RECAL


	)

143 
	#WIN_READ
 0x20

	)

144 
	#WIN_READ_ONCE
 0x21

	)

145 
	#WIN_READ_LONG
 0x22

	)

146 
	#WIN_READ_LONG_ONCE
 0x23

	)

147 
	#WIN_READ_EXT
 0x24

	)

148 
	#WIN_READDMA_EXT
 0x25

	)

149 
	#WIN_READDMA_QUEUED_EXT
 0x26

	)

150 
	#WIN_READ_NATIVE_MAX_EXT
 0x27

	)

154 
	#WIN_MULTREAD_EXT
 0x29

	)

158 
	#WIN_WRITE
 0x30

	)

159 
	#WIN_WRITE_ONCE
 0x31

	)

160 
	#WIN_WRITE_LONG
 0x32

	)

161 
	#WIN_WRITE_LONG_ONCE
 0x33

	)

162 
	#WIN_WRITE_EXT
 0x34

	)

163 
	#WIN_WRITEDMA_EXT
 0x35

	)

164 
	#WIN_WRITEDMA_QUEUED_EXT
 0x36

	)

165 
	#WIN_SET_MAX_EXT
 0x37

	)

166 
	#CFA_WRITE_SECT_WO_ERASE
 0x38

	)

167 
	#WIN_MULTWRITE_EXT
 0x39

	)

171 
	#WIN_WRITE_VERIFY
 0x3C

	)

175 
	#WIN_VERIFY
 0x40

	)

176 
	#WIN_VERIFY_ONCE
 0x41

	)

177 
	#WIN_VERIFY_EXT
 0x42

	)

181 
	#WIN_FORMAT
 0x50

	)

185 
	#WIN_INIT
 0x60

	)

189 
	#WIN_SEEK
 0x70

	)

191 
	#CFA_TRANSLATE_SECTOR
 0x87

	)

192 
	#WIN_DIAGNOSE
 0x90

	)

193 
	#WIN_SPECIFY
 0x91

	)

194 
	#WIN_DOWNLOAD_MICROCODE
 0x92

	)

195 
	#WIN_STANDBYNOW2
 0x94

	)

196 
	#WIN_STANDBY2
 0x96

	)

197 
	#WIN_SETIDLE2
 0x97

	)

198 
	#WIN_CHECKPOWERMODE2
 0x98

	)

199 
	#WIN_SLEEPNOW2
 0x99

	)

203 
	#WIN_PACKETCMD
 0xA0

	)

204 
	#WIN_PIDENTIFY
 0xA1

	)

205 
	#WIN_QUEUED_SERVICE
 0xA2

	)

206 
	#WIN_SMART
 0xB0

	)

207 
	#CFA_ERASE_SECTORS
 0xC0

	)

208 
	#WIN_MULTREAD
 0xC4

	)

209 
	#WIN_MULTWRITE
 0xC5

	)

210 
	#WIN_SETMULT
 0xC6

	)

211 
	#WIN_READDMA_QUEUED
 0xC7

	)

212 
	#WIN_READDMA
 0xC8

	)

213 
	#WIN_READDMA_ONCE
 0xC9

	)

214 
	#WIN_WRITEDMA
 0xCA

	)

215 
	#WIN_WRITEDMA_ONCE
 0xCB

	)

216 
	#WIN_WRITEDMA_QUEUED
 0xCC

	)

217 
	#CFA_WRITE_MULTI_WO_ERASE
 0xCD

	)

218 
	#WIN_GETMEDIASTATUS
 0xDA

	)

219 
	#WIN_ACKMEDIACHANGE
 0xDB

	)

220 
	#WIN_POSTBOOT
 0xDC

	)

221 
	#WIN_PREBOOT
 0xDD

	)

222 
	#WIN_DOORLOCK
 0xDE

	)

223 
	#WIN_DOORUNLOCK
 0xDF

	)

224 
	#WIN_STANDBYNOW1
 0xE0

	)

225 
	#WIN_IDLEIMMEDIATE
 0xE1

	)

226 
	#WIN_STANDBY
 0xE2

	)

227 
	#WIN_SETIDLE1
 0xE3

	)

228 
	#WIN_READ_BUFFER
 0xE4

	)

229 
	#WIN_CHECKPOWERMODE1
 0xE5

	)

230 
	#WIN_SLEEPNOW1
 0xE6

	)

231 
	#WIN_FLUSH_CACHE
 0xE7

	)

232 
	#WIN_WRITE_BUFFER
 0xE8

	)

233 
	#WIN_WRITE_SAME
 0xE9

	)

235 
	#WIN_FLUSH_CACHE_EXT
 0xEA

	)

236 
	#WIN_IDENTIFY
 0xEC

	)

237 
	#WIN_MEDIAEJECT
 0xED

	)

238 
	#WIN_IDENTIFY_DMA
 0xEE

	)

239 
	#WIN_SETFEATURES
 0xEF

	)

240 
	#EXABYTE_ENABLE_NEST
 0xF0

	)

241 
	#WIN_SECURITY_SET_PASS
 0xF1

	)

242 
	#WIN_SECURITY_UNLOCK
 0xF2

	)

243 
	#WIN_SECURITY_ERASE_PREPARE
 0xF3

	)

244 
	#WIN_SECURITY_ERASE_UNIT
 0xF4

	)

245 
	#WIN_SECURITY_FREEZE_LOCK
 0xF5

	)

246 
	#WIN_SECURITY_DISABLE
 0xF6

	)

247 
	#WIN_READ_NATIVE_MAX
 0xF8

	)

248 
	#WIN_SET_MAX
 0xF9

	)

249 
	#DISABLE_SEAGATE
 0xFB

	)

253 
	#SMART_READ_VALUES
 0xD0

	)

254 
	#SMART_READ_THRESHOLDS
 0xD1

	)

255 
	#SMART_AUTOSAVE
 0xD2

	)

256 
	#SMART_SAVE
 0xD3

	)

257 
	#SMART_IMMEDIATE_OFFLINE
 0xD4

	)

258 
	#SMART_READ_LOG_SECTOR
 0xD5

	)

259 
	#SMART_WRITE_LOG_SECTOR
 0xD6

	)

260 
	#SMART_WRITE_THRESHOLDS
 0xD7

	)

261 
	#SMART_ENABLE
 0xD8

	)

262 
	#SMART_DISABLE
 0xD9

	)

263 
	#SMART_STATUS
 0xDA

	)

264 
	#SMART_AUTO_OFFLINE
 0xDB

	)

268 
	#SMART_LCYL_PASS
 0x4F

	)

269 
	#SMART_HCYL_PASS
 0xC2

	)

272 
	#SETFEATURES_EN_8BIT
 0x01

	)

273 
	#SETFEATURES_EN_WCACHE
 0x02

	)

274 
	#SETFEATURES_DIS_DEFECT
 0x04

	)

275 
	#SETFEATURES_EN_APM
 0x05

	)

276 
	#SETFEATURES_EN_SAME_R
 0x22

	)

277 
	#SETFEATURES_DIS_MSN
 0x31

	)

278 
	#SETFEATURES_DIS_RETRY
 0x33

	)

279 
	#SETFEATURES_EN_AAM
 0x42

	)

280 
	#SETFEATURES_RW_LONG
 0x44

	)

281 
	#SETFEATURES_SET_CACHE
 0x54

	)

282 
	#SETFEATURES_DIS_RLA
 0x55

	)

283 
	#SETFEATURES_EN_RI
 0x5D

	)

284 
	#SETFEATURES_EN_SI
 0x5E

	)

285 
	#SETFEATURES_DIS_RPOD
 0x66

	)

286 
	#SETFEATURES_DIS_ECC
 0x77

	)

287 
	#SETFEATURES_DIS_8BIT
 0x81

	)

288 
	#SETFEATURES_DIS_WCACHE
 0x82

	)

289 
	#SETFEATURES_EN_DEFECT
 0x84

	)

290 
	#SETFEATURES_DIS_APM
 0x85

	)

291 
	#SETFEATURES_EN_ECC
 0x88

	)

292 
	#SETFEATURES_EN_MSN
 0x95

	)

293 
	#SETFEATURES_EN_RETRY
 0x99

	)

294 
	#SETFEATURES_EN_RLA
 0xAA

	)

295 
	#SETFEATURES_PREFETCH
 0xAB

	)

296 
	#SETFEATURES_EN_REST
 0xAC

	)

297 
	#SETFEATURES_4B_RW_LONG
 0xBB

	)

298 
	#SETFEATURES_DIS_AAM
 0xC2

	)

299 
	#SETFEATURES_EN_RPOD
 0xCC

	)

300 
	#SETFEATURES_DIS_RI
 0xDD

	)

301 
	#SETFEATURES_EN_SAME_M
 0xDD

	)

302 
	#SETFEATURES_DIS_SI
 0xDE

	)

306 
	#SECURITY_SET_PASSWORD
 0xBA

	)

307 
	#SECURITY_UNLOCK
 0xBB

	)

308 
	#SECURITY_ERASE_PREPARE
 0xBC

	)

309 
	#SECURITY_ERASE_UNIT
 0xBD

	)

310 
	#SECURITY_FREEZE_LOCK
 0xBE

	)

311 
	#SECURITY_DISABLE_PASSWORD
 0xBF

	)

313 
	shd_geomëry
 {

314 
	mhóds
;

315 
	m£˘‹s
;

316 
	mcylödîs
;

317 
	m°¨t
;

321 
	#HDIO_GETGEO
 0x0301

	)

322 
	#HDIO_GET_UNMASKINTR
 0x0302

	)

323 
	#HDIO_GET_MULTCOUNT
 0x0304

	)

324 
	#HDIO_GET_QDMA
 0x0305

	)

326 
	#HDIO_SET_XFER
 0x0306

	)

328 
	#HDIO_OBSOLETE_IDENTITY
 0x0307

	)

329 
	#HDIO_GET_KEEPSETTINGS
 0x0308

	)

330 
	#HDIO_GET_32BIT
 0x0309

	)

331 
	#HDIO_GET_NOWERR
 0x030®

	)

332 
	#HDIO_GET_DMA
 0x030b

	)

333 
	#HDIO_GET_NICE
 0x030¯

	)

334 
	#HDIO_GET_IDENTITY
 0x030d

	)

335 
	#HDIO_GET_WCACHE
 0x030ê

	)

336 
	#HDIO_GET_ACOUSTIC
 0x030‡

	)

337 
	#HDIO_GET_ADDRESS
 0x0310

	)

339 
	#HDIO_GET_BUSSTATE
 0x031®

	)

340 
	#HDIO_TRISTATE_HWIF
 0x031b

	)

341 
	#HDIO_DRIVE_RESET
 0x031¯

	)

342 
	#HDIO_DRIVE_TASKFILE
 0x031d

	)

343 
	#HDIO_DRIVE_TASK
 0x031ê

	)

344 
	#HDIO_DRIVE_CMD
 0x031‡

	)

345 
	#HDIO_DRIVE_CMD_AEB
 
HDIO_DRIVE_TASK


	)

348 
	#HDIO_SET_MULTCOUNT
 0x0321

	)

349 
	#HDIO_SET_UNMASKINTR
 0x0322

	)

350 
	#HDIO_SET_KEEPSETTINGS
 0x0323

	)

351 
	#HDIO_SET_32BIT
 0x0324

	)

352 
	#HDIO_SET_NOWERR
 0x0325

	)

353 
	#HDIO_SET_DMA
 0x0326

	)

354 
	#HDIO_SET_PIO_MODE
 0x0327

	)

355 
	#HDIO_SCAN_HWIF
 0x0328

	)

356 
	#HDIO_UNREGISTER_HWIF
 0x032®

	)

357 
	#HDIO_SET_NICE
 0x0329

	)

358 
	#HDIO_SET_WCACHE
 0x032b

	)

359 
	#HDIO_SET_ACOUSTIC
 0x032¯

	)

360 
	#HDIO_SET_BUSSTATE
 0x032d

	)

361 
	#HDIO_SET_QDMA
 0x032ê

	)

362 
	#HDIO_SET_ADDRESS
 0x032‡

	)

366 
	mBUSSTATE_OFF
 = 0,

367 
	mBUSSTATE_ON
,

368 
	mBUSSTATE_TRISTATE


377 
	#__NEW_HD_DRIVE_ID


	)

385 
	shd_driveid
 {

386 
	mc⁄fig
;

387 
	mcyls
;

388 
	mª£rved2
;

389 
	mhóds
;

390 
	måack_byãs
;

391 
	m£˘‹_byãs
;

392 
	m£˘‹s
;

393 
	mvíd‹0
;

394 
	mvíd‹1
;

395 
	mvíd‹2
;

396 
	m£rül_no
[20];

397 
	mbuf_ty≥
;

398 
	mbuf_size
;

401 
	mecc_byãs
;

402 
	mfw_ªv
[8];

403 
	mmodñ
[40];

404 
	mmax_mu…£˘
;

405 
	mvíd‹3
;

406 
	mdw‹d_io
;

407 
	mvíd‹4
;

408 
	mˇ∑bûôy
;

414 
	mª£rved50
;

415 
	mvíd‹5
;

416 
	mtPIO
;

417 
	mvíd‹6
;

418 
	mtDMA
;

419 
	mfõld_vÆid
;

424 
	mcur_cyls
;

425 
	mcur_hóds
;

426 
	mcur_£˘‹s
;

427 
	mcur_ˇ∑côy0
;

428 
	mcur_ˇ∑côy1
;

429 
	mmu…£˘
;

430 
	mmu…£˘_vÆid
;

431 
	mlba_ˇ∑côy
;

432 
	mdma_1w‹d
;

433 
	mdma_mw‹d
;

434 
	meide_pio_modes
;

435 
	meide_dma_mö
;

436 
	meide_dma_time
;

437 
	meide_pio
;

438 
	meide_pio_i‹dy
;

439 
	mw‹ds69_70
[2];

442 
	mw‹ds71_74
[4];

445 
	mqueue_dïth
;

449 
	mw‹ds76_79
[4];

450 
	mmaj‹_ªv_num
;

451 
	mmö‹_ªv_num
;

452 
	mcomm™d_£t_1
;

470 
	mcomm™d_£t_2
;

488 
	mcfs£
;

500 
	mcfs_íabÀ_1
;

519 
	mcfs_íabÀ_2
;

538 
	mcsf_deÁu…
;

550 
	mdma_u…ø
;

551 
	må£uc
;

552 
	måsEuc
;

553 
	mCurAPMvÆues
;

554 
	mm¥c
;

555 
	mhw_c⁄fig
;

573 
	macou°ic
;

577 
	mm§qs
;

578 
	msx„π
;

579 
	mßl
;

580 
	m•g
;

581 
	mlba_ˇ∑côy_2
;

582 
	mw‹ds104_125
[22];

583 
	mœ°_lun
;

584 
	mw‹d127
;

592 
	mdlf
;

604 
	mcsfo
;

612 
	mw‹ds130_155
[26];

613 
	mw‹d156
;

614 
	mw‹ds157_159
[3];

615 
	mcÁ_powî
;

622 
	mw‹ds161_175
[15];

623 
	mw‹ds176_205
[30];

624 
	mw‹ds206_254
[49];

625 
	möãgrôy_w‹d
;

636 
	#IDE_NICE_DSC_OVERLAP
 (0Ë

	)

637 
	#IDE_NICE_ATAPI_OVERLAP
 (1Ë

	)

638 
	#IDE_NICE_1
 (3Ë

	)

639 
	#IDE_NICE_0
 (2Ë

	)

640 
	#IDE_NICE_2
 (4Ë

	)

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

46 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

47 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

48 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

	@/usr/include/locale.h

22 #i‚def 
_LOCALE_H


23 
	#_LOCALE_H
 1

	)

25 
	~<„©uªs.h
>

27 
	#__√ed_NULL


	)

28 
	~<°ddef.h
>

29 
	~<bôs/loˇÀ.h
>

31 
	g__BEGIN_DECLS


35 
	#LC_CTYPE
 
__LC_CTYPE


	)

36 
	#LC_NUMERIC
 
__LC_NUMERIC


	)

37 
	#LC_TIME
 
__LC_TIME


	)

38 
	#LC_COLLATE
 
__LC_COLLATE


	)

39 
	#LC_MONETARY
 
__LC_MONETARY


	)

40 
	#LC_MESSAGES
 
__LC_MESSAGES


	)

41 
	#LC_ALL
 
__LC_ALL


	)

42 
	#LC_PAPER
 
__LC_PAPER


	)

43 
	#LC_NAME
 
__LC_NAME


	)

44 
	#LC_ADDRESS
 
__LC_ADDRESS


	)

45 
	#LC_TELEPHONE
 
__LC_TELEPHONE


	)

46 
	#LC_MEASUREMENT
 
__LC_MEASUREMENT


	)

47 
	#LC_IDENTIFICATION
 
__LC_IDENTIFICATION


	)

50 
__BEGIN_NAMESPACE_STD


53 
	slc⁄v


57 *
	mdecimÆ_poöt
;

58 *
	mthoußnds_£p
;

64 *
	mgroupög
;

70 *
	möt_cuº_symbﬁ
;

71 *
	mcuºícy_symbﬁ
;

72 *
	mm⁄_decimÆ_poöt
;

73 *
	mm⁄_thoußnds_£p
;

74 *
	mm⁄_groupög
;

75 *
	mposôive_sign
;

76 *
	m√g©ive_sign
;

77 
	möt_‰ac_digôs
;

78 
	m‰ac_digôs
;

80 
	mp_cs_¥e˚des
;

82 
	mp_£p_by_•a˚
;

84 
	mn_cs_¥e˚des
;

86 
	mn_£p_by_•a˚
;

93 
	mp_sign_po¢
;

94 
	mn_sign_po¢
;

95 #ifde‡
__USE_ISOC99


97 
	möt_p_cs_¥e˚des
;

99 
	möt_p_£p_by_•a˚
;

101 
	möt_n_cs_¥e˚des
;

103 
	möt_n_£p_by_•a˚
;

110 
	möt_p_sign_po¢
;

111 
	möt_n_sign_po¢
;

113 
	m__öt_p_cs_¥e˚des
;

114 
	m__öt_p_£p_by_•a˚
;

115 
	m__öt_n_cs_¥e˚des
;

116 
	m__öt_n_£p_by_•a˚
;

117 
	m__öt_p_sign_po¢
;

118 
	m__öt_n_sign_po¢
;

124 *
	$£éoˇÀ
 (
__ˇãg‹y
, c⁄° *
__loˇÀ
Ë
__THROW
;

127 
lc⁄v
 *
	$loˇÀc⁄v
 (Ë
__THROW
;

129 
__END_NAMESPACE_STD


132 #ifdef 
__USE_XOPEN2K8


145 
	~<xloˇÀ.h
>

151 
__loˇÀ_t
 
	$√wloˇÀ
 (
__ˇãg‹y_mask
, c⁄° *
__loˇÀ
,

152 
__loˇÀ_t
 
__ba£
Ë
__THROW
;

158 
	#LC_CTYPE_MASK
 (1 << 
__LC_CTYPE
)

	)

159 
	#LC_NUMERIC_MASK
 (1 << 
__LC_NUMERIC
)

	)

160 
	#LC_TIME_MASK
 (1 << 
__LC_TIME
)

	)

161 
	#LC_COLLATE_MASK
 (1 << 
__LC_COLLATE
)

	)

162 
	#LC_MONETARY_MASK
 (1 << 
__LC_MONETARY
)

	)

163 
	#LC_MESSAGES_MASK
 (1 << 
__LC_MESSAGES
)

	)

164 
	#LC_PAPER_MASK
 (1 << 
__LC_PAPER
)

	)

165 
	#LC_NAME_MASK
 (1 << 
__LC_NAME
)

	)

166 
	#LC_ADDRESS_MASK
 (1 << 
__LC_ADDRESS
)

	)

167 
	#LC_TELEPHONE_MASK
 (1 << 
__LC_TELEPHONE
)

	)

168 
	#LC_MEASUREMENT_MASK
 (1 << 
__LC_MEASUREMENT
)

	)

169 
	#LC_IDENTIFICATION_MASK
 (1 << 
__LC_IDENTIFICATION
)

	)

170 
	#LC_ALL_MASK
 (
LC_CTYPE_MASK
 \

171 | 
LC_NUMERIC_MASK
 \

172 | 
LC_TIME_MASK
 \

173 | 
LC_COLLATE_MASK
 \

174 | 
LC_MONETARY_MASK
 \

175 | 
LC_MESSAGES_MASK
 \

176 | 
LC_PAPER_MASK
 \

177 | 
LC_NAME_MASK
 \

178 | 
LC_ADDRESS_MASK
 \

179 | 
LC_TELEPHONE_MASK
 \

180 | 
LC_MEASUREMENT_MASK
 \

181 | 
LC_IDENTIFICATION_MASK
 \

182 )

	)

186 
__loˇÀ_t
 
	$du∂oˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

190 
	$‰ìloˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

197 
__loˇÀ_t
 
	$u£loˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

201 
	#LC_GLOBAL_LOCALE
 ((
__loˇÀ_t
Ë-1L)

	)

205 
__END_DECLS


	@/usr/include/mntent.h

19 #i‚def 
_MNTENT_H


20 
	#_MNTENT_H
 1

	)

22 
	~<„©uªs.h
>

23 
	#__√ed_FILE


	)

24 
	~<°dio.h
>

25 
	~<∑ths.h
>

29 
	#MNTTAB
 
_PATH_MNTTAB


	)

32 
	#MOUNTED
 
_PATH_MOUNTED


	)

36 
	#MNTTYPE_IGNORE
 "ign‹e"

	)

37 
	#MNTTYPE_NFS
 "nfs"

	)

38 
	#MNTTYPE_SWAP
 "sw≠"

	)

42 
	#MNTOPT_DEFAULTS
 "deÁu…s"

	)

43 
	#MNTOPT_RO
 "ro"

	)

44 
	#MNTOPT_RW
 "rw"

	)

45 
	#MNTOPT_SUID
 "suid"

	)

46 
	#MNTOPT_NOSUID
 "nosuid"

	)

47 
	#MNTOPT_NOAUTO
 "nﬂuto"

	)

50 
__BEGIN_DECLS


53 
	sm¡ít


55 *
	mm¡_f¢ame
;

56 *
	mm¡_dú
;

57 *
	mm¡_ty≥
;

58 *
	mm¡_›ts
;

59 
	mm¡_‰eq
;

60 
	mm¡_∑s¢o
;

66 
FILE
 *
	$£tm¡ít
 (c⁄° *
__fûe
, c⁄° *
__mode
Ë
__THROW
;

71 
m¡ít
 *
	$gëm¡ít
 (
FILE
 *
__°ªam
Ë
__THROW
;

73 #ifde‡
__USE_MISC


75 
m¡ít
 *
	$gëm¡ít_r
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

76 
m¡ít
 *
__ª°ri˘
 
__ªsu…
,

77 *
__ª°ri˘
 
__buf„r
,

78 
__bufsize
Ë
__THROW
;

83 
	$addm¡ít
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

84 c⁄° 
m¡ít
 *
__ª°ri˘
 
__m¡
Ë
__THROW
;

87 
	$ídm¡ít
 (
FILE
 *
__°ªam
Ë
__THROW
;

91 *
	$hasm¡›t
 (c⁄° 
m¡ít
 *
__m¡
,

92 c⁄° *
__›t
Ë
__THROW
;

95 
__END_DECLS


	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #ifde‡
__USE_XOPEN2K8


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

101 #i‚de‡
__ssize_t_deföed


102 
__ssize_t
 
	tssize_t
;

103 
	#__ssize_t_deföed


	)

108 
__BEGIN_NAMESPACE_STD


109 #i‚de‡
__USE_FILE_OFFSET64


110 
_G_Âos_t
 
	tÂos_t
;

112 
_G_Âos64_t
 
	tÂos_t
;

114 
__END_NAMESPACE_STD


115 #ifde‡
__USE_LARGEFILE64


116 
_G_Âos64_t
 
	tÂos64_t
;

120 
	#_IOFBF
 0

	)

121 
	#_IOLBF
 1

	)

122 
	#_IONBF
 2

	)

126 #i‚de‡
BUFSIZ


127 
	#BUFSIZ
 
_IO_BUFSIZ


	)

133 #i‚de‡
EOF


134 
	#EOF
 (-1)

	)

140 
	#SEEK_SET
 0

	)

141 
	#SEEK_CUR
 1

	)

142 
	#SEEK_END
 2

	)

143 #ifde‡
__USE_GNU


144 
	#SEEK_DATA
 3

	)

145 
	#SEEK_HOLE
 4

	)

149 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


151 
	#P_tmpdú
 "/tmp"

	)

164 
	~<bôs/°dio_lim.h
>

168 
_IO_FILE
 *
°dö
;

169 
_IO_FILE
 *
°dout
;

170 
_IO_FILE
 *
°dîr
;

172 
	#°dö
 
°dö


	)

173 
	#°dout
 
°dout


	)

174 
	#°dîr
 
°dîr


	)

176 
__BEGIN_NAMESPACE_STD


178 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

180 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

181 
__END_NAMESPACE_STD


183 #ifde‡
__USE_ATFILE


185 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

186 c⁄° *
__√w
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


194 #i‚de‡
__USE_FILE_OFFSET64


195 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

197 #ifde‡
__REDIRECT


198 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

200 
	#tmpfûe
 
tmpfûe64


	)

204 #ifde‡
__USE_LARGEFILE64


205 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

209 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

210 
__END_NAMESPACE_STD


212 #ifde‡
__USE_MISC


215 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

219 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


227 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

228 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

232 
__BEGIN_NAMESPACE_STD


237 
	`f˛o£
 (
FILE
 *
__°ªam
);

242 
	`fÊush
 (
FILE
 *
__°ªam
);

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_MISC


252 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

255 #ifde‡
__USE_GNU


262 
	`f˛o£Æl
 ();

266 
__BEGIN_NAMESPACE_STD


267 #i‚de‡
__USE_FILE_OFFSET64


272 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

278 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

279 c⁄° *
__ª°ri˘
 
__modes
,

280 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

282 #ifde‡
__REDIRECT


283 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

285 
__wur
;

286 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

289 
__wur
;

291 
	#f›í
 
f›í64


	)

292 
	#‰e›í
 
‰e›í64


	)

295 
__END_NAMESPACE_STD


296 #ifde‡
__USE_LARGEFILE64


297 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

298 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

299 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
,

301 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

304 #ifdef 
__USE_POSIX


306 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

309 #ifdef 
__USE_GNU


312 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

313 c⁄° *
__ª°ri˘
 
__modes
,

314 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

317 #ifde‡
__USE_XOPEN2K8


319 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

320 
__THROW
 
__wur
;

325 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

329 
__BEGIN_NAMESPACE_STD


332 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

336 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

337 
__modes
, 
size_t
 
__n
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifdef 
__USE_BSD


343 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

344 
size_t
 
__size
Ë
__THROW
;

347 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

351 
__BEGIN_NAMESPACE_STD


356 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

357 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

362 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	$•rötf
 (*
__ª°ri˘
 
__s
,

365 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

371 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

372 
_G_va_li°
 
__¨g
);

377 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

379 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

380 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

381 
__END_NAMESPACE_STD


383 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


384 
__BEGIN_NAMESPACE_C99


386 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

387 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

388 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

390 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

391 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

393 
__END_NAMESPACE_C99


396 #ifde‡
__USE_GNU


399 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

400 
_G_va_li°
 
__¨g
)

401 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

402 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

403 c⁄° *
__ª°ri˘
 
__fmt
, ...)

404 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

405 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

406 c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

410 #ifde‡
__USE_XOPEN2K8


412 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

413 
_G_va_li°
 
__¨g
)

414 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

415 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

420 
__BEGIN_NAMESPACE_STD


425 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

431 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

434 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

436 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

445 
__isoc99_fsˇnf
Ë
__wur
;

446 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_sˇnf
Ë
__wur
;

448 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

449 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

450 
__isoc99_ssˇnf
);

452 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

454 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

455 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

456 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

457 
	#fsˇnf
 
__isoc99_fsˇnf


	)

458 
	#sˇnf
 
__isoc99_sˇnf


	)

459 
	#ssˇnf
 
__isoc99_ssˇnf


	)

463 
__END_NAMESPACE_STD


465 #ifdef 
__USE_ISOC99


466 
__BEGIN_NAMESPACE_C99


471 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

472 
_G_va_li°
 
__¨g
)

473 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

479 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

483 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

484 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

485 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

487 #i‡!
deföed
 
__USE_GNU
 \

488 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

489 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

490 #ifde‡
__REDIRECT


494 
	`__REDIRECT
 (
vfsˇnf
,

495 (
FILE
 *
__ª°ri˘
 
__s
,

496 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

497 
__isoc99_vfsˇnf
)

498 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

499 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

501 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

502 
	`__REDIRECT_NTH
 (
vssˇnf
,

503 (c⁄° *
__ª°ri˘
 
__s
,

504 c⁄° *
__ª°ri˘
 
__f‹m©
,

505 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

506 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

508 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

509 c⁄° *
__ª°ri˘
 
__f‹m©
,

510 
_G_va_li°
 
__¨g
Ë
__wur
;

511 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

514 c⁄° *
__ª°ri˘
 
__f‹m©
,

515 
_G_va_li°
 
__¨g
Ë
__THROW
;

516 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

517 
	#vsˇnf
 
__isoc99_vsˇnf


	)

518 
	#vssˇnf
 
__isoc99_vssˇnf


	)

522 
__END_NAMESPACE_C99


526 
__BEGIN_NAMESPACE_STD


531 
	`fgëc
 (
FILE
 *
__°ªam
);

532 
	`gëc
 (
FILE
 *
__°ªam
);

538 
	`gëch¨
 ();

539 
__END_NAMESPACE_STD


543 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

545 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


550 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

551 
	`gëch¨_u∆ocked
 ();

554 #ifde‡
__USE_MISC


561 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

565 
__BEGIN_NAMESPACE_STD


573 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putch¨
 (
__c
);

581 
__END_NAMESPACE_STD


585 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

587 #ifde‡
__USE_MISC


594 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

597 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


602 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 
	`putch¨_u∆ocked
 (
__c
);

607 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

608 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

610 
	`gëw
 (
FILE
 *
__°ªam
);

613 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

617 
__BEGIN_NAMESPACE_STD


622 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

623 
__wur
;

625 #i‡!
deföed
 
__USE_ISOC11
 \

626 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

638 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

640 
__END_NAMESPACE_STD


642 #ifde‡
__USE_GNU


649 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

650 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

654 #ifdef 
__USE_XOPEN2K8


665 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

668 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

669 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

670 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

678 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

679 
size_t
 *
__ª°ri˘
 
__n
,

680 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

684 
__BEGIN_NAMESPACE_STD


689 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

695 
	`puts
 (c⁄° *
__s
);

702 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

709 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

710 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

715 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

716 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

717 
__END_NAMESPACE_STD


719 #ifde‡
__USE_GNU


726 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

727 
FILE
 *
__ª°ri˘
 
__°ªam
);

730 #ifde‡
__USE_MISC


737 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

738 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

744 
__BEGIN_NAMESPACE_STD


749 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

754 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

759 
	`ªwöd
 (
FILE
 *
__°ªam
);

760 
__END_NAMESPACE_STD


767 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


768 #i‚de‡
__USE_FILE_OFFSET64


773 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

778 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

780 #ifde‡
__REDIRECT


781 
	`__REDIRECT
 (
f£eko
,

782 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

783 
f£eko64
);

784 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

786 
	#f£eko
 
f£eko64


	)

787 
	#·ñlo
 
·ñlo64


	)

792 
__BEGIN_NAMESPACE_STD


793 #i‚de‡
__USE_FILE_OFFSET64


798 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

803 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

805 #ifde‡
__REDIRECT


806 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

807 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

808 
	`__REDIRECT
 (
f£ços
,

809 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

811 
	#fgëpos
 
fgëpos64


	)

812 
	#f£ços
 
f£ços64


	)

815 
__END_NAMESPACE_STD


817 #ifde‡
__USE_LARGEFILE64


818 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

819 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

820 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

821 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

824 
__BEGIN_NAMESPACE_STD


826 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

828 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

831 
__END_NAMESPACE_STD


833 #ifde‡
__USE_MISC


835 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

836 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

837 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

841 
__BEGIN_NAMESPACE_STD


846 
	`≥º‹
 (c⁄° *
__s
);

847 
__END_NAMESPACE_STD


853 
	~<bôs/sys_îæi°.h
>

856 #ifdef 
__USE_POSIX


858 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

861 #ifde‡
__USE_MISC


863 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

867 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

868 
deföed
 
__USE_MISC
)

873 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

879 
	`p˛o£
 (
FILE
 *
__°ªam
);

883 #ifdef 
__USE_POSIX


885 *
	$˘îmid
 (*
__s
Ë
__THROW
;

889 #ifde‡
__USE_XOPEN


891 *
	`cu£rid
 (*
__s
);

895 #ifdef 
__USE_GNU


896 
ob°ack
;

899 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

900 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

901 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

902 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

903 c⁄° *
__ª°ri˘
 
__f‹m©
,

904 
_G_va_li°
 
__¨gs
)

905 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

909 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


913 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

917 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

920 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

923 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


927 
	#__√ed_gë›t


	)

928 
	~<gë›t.h
>

933 #ifde‡
__USE_EXTERN_INLINES


934 
	~<bôs/°dio.h
>

936 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


937 
	~<bôs/°dio2.h
>

939 #ifde‡
__LDBL_COMPAT


940 
	~<bôs/°dio-ldbl.h
>

943 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_BSD


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #ifde‡
__USE_BSD


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

280  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

285  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__exãnsi⁄__
 
__exã∫_ölöe
 

292 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

294  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


305 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

308 
	$a64l
 (c⁄° *
__s
)

309 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

313 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


314 
	~<sys/ty≥s.h
>

321 
	$øndom
 (Ë
__THROW
;

324 
	$§™dom
 (
__£ed
Ë
__THROW
;

330 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

331 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

335 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_MISC


343 
	søndom_d©a


345 
öt32_t
 *
Âå
;

346 
öt32_t
 *
Ωå
;

347 
öt32_t
 *
°©e
;

348 
ønd_ty≥
;

349 
ønd_deg
;

350 
ønd_£p
;

351 
öt32_t
 *
íd_±r
;

354 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

355 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

357 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

361 
size_t
 
__°©ñí
,

362 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

365 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

366 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 
	$ønd
 (Ë
__THROW
;

376 
	$§™d
 (
__£ed
Ë
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifde‡
__USE_POSIX


381 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

385 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


389 
	$dønd48
 (Ë
__THROW
;

390 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 
	$Ã™d48
 (Ë
__THROW
;

394 
	$ƒ™d48
 (
__xsubi
[3])

395 
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$mønd48
 (Ë
__THROW
;

399 
	$jønd48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

404 *
	$£ed48
 (
__£ed16v
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

406 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

408 #ifde‡
__USE_MISC


412 
	sdønd48_d©a


414 
__x
[3];

415 
__ﬁd_x
[3];

416 
__c
;

417 
__öô
;

418 
__exãnsi⁄__
 
__a
;

423 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

424 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

425 
	$î™d48_r
 (
__xsubi
[3],

426 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

427 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

431 *
__ª°ri˘
 
__ªsu…
)

432 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

433 
	$ƒ™d48_r
 (
__xsubi
[3],

434 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

435 *
__ª°ri˘
 
__ªsu…
)

436 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

439 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

442 
	$jønd48_r
 (
__xsubi
[3],

443 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

444 *
__ª°ri˘
 
__ªsu…
)

445 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

448 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$£ed48_r
 (
__£ed16v
[3],

452 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$lc⁄g48_r
 (
__∑øm
[7],

455 
dønd48_d©a
 *
__buf„r
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

462 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


463 
	#__mÆloc_™d_ˇŒoc_deföed


	)

464 
__BEGIN_NAMESPACE_STD


466 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

468 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

469 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

470 
__END_NAMESPACE_STD


473 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


474 
__BEGIN_NAMESPACE_STD


480 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

481 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

483 
	$‰ì
 (*
__±r
Ë
__THROW
;

484 
__END_NAMESPACE_STD


486 #ifdef 
__USE_MISC


488 
	$c‰ì
 (*
__±r
Ë
__THROW
;

491 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


492 
	~<Æloˇ.h
>

495 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

496 || 
deföed
 
__USE_BSD


498 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

501 #ifde‡
__USE_XOPEN2K


503 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

504 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

507 #ifde‡
__USE_ISOC11


509 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

510 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

513 
__BEGIN_NAMESPACE_STD


515 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

519 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

521 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


523 #ifde‡
__˝lu•lus


524 "C++" 
	`©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


549 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

551 
__END_NAMESPACE_STD


553 #ifde‡
__USE_ISOC99


554 
__BEGIN_NAMESPACE_C99


557 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

558 
__END_NAMESPACE_C99


562 
__BEGIN_NAMESPACE_STD


564 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

565 
__END_NAMESPACE_STD


567 #ifde‡
__USE_GNU


570 *
	$£cuª_gëív
 (c⁄° *
__«me
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


584 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 \

600 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
) (const *, const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

759 #ifde‡
__USE_EXTERN_INLINES


760 
	~<bôs/°dlib-b£¨ch.h
>

765 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

766 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

767 #ifde‡
__USE_GNU


768 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

769 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

770 
	`__n⁄nuŒ
 ((1, 4));

775 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

777 
__END_NAMESPACE_STD


779 #ifde‡
__USE_ISOC99


780 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

781 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

785 
__BEGIN_NAMESPACE_STD


789 
div_t
 
	$div
 (
__numî
, 
__díom
)

790 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

791 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

792 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

793 
__END_NAMESPACE_STD


795 #ifde‡
__USE_ISOC99


796 
__BEGIN_NAMESPACE_C99


797 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

798 
__díom
)

799 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

800 
__END_NAMESPACE_C99


804 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

805 || 
deföed
 
__USE_SVID


812 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

813 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

818 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

819 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

824 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

825 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

828 #ifde‡
__USE_MISC


830 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

831 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

832 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

833 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

834 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

835 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

836 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

837 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

842 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

843 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

844 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

846 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

847 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

853 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

854 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

855 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

856 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

860 
__BEGIN_NAMESPACE_STD


863 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

866 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

867 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

870 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

874 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

875 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

877 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

878 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

879 
__THROW
;

880 
__END_NAMESPACE_STD


883 #ifde‡
__USE_SVID


888 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

892 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


899 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

900 *c⁄° *
__ª°ri˘
 
__tokís
,

901 **
__ª°ri˘
 
__vÆuï
)

902 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

906 #ifde‡
__USE_XOPEN


908 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

914 #ifde‡
__USE_XOPEN2KXSI


916 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

919 #ifde‡
__USE_XOPEN


924 
	$gø¡±
 (
__fd
Ë
__THROW
;

928 
	$u∆ock±
 (
__fd
Ë
__THROW
;

933 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

936 #ifde‡
__USE_GNU


940 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

941 
__THROW
 
	`__n⁄nuŒ
 ((2));

944 
	`gë±
 ();

947 #ifde‡
__USE_BSD


951 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

952 
__THROW
 
	`__n⁄nuŒ
 ((1));

955 
	~<bôs/°dlib-Êﬂt.h
>

958 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


959 
	~<bôs/°dlib.h
>

961 #ifde‡
__LDBL_COMPAT


962 
	~<bôs/°dlib-ldbl.h
>

966 #unde‡
__√ed_mÆloc_™d_ˇŒoc


968 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

39 #i‡
deföed
 
__˝lu•lus
 && (__˝lu•lu†>199711L || 
__GNUC_PREREQ
 (4, 4))

40 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

44 
__BEGIN_NAMESPACE_STD


46 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

47 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

50 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

51 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

52 
__END_NAMESPACE_STD


57 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


58 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

59 
__c
, 
size_t
 
__n
)

60 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

64 
__BEGIN_NAMESPACE_STD


66 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

69 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

70 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

73 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


76 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

77 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

79 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #ifde‡
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


85  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


91  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

94 
	}
}

96 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

99 
__END_NAMESPACE_STD


101 #ifde‡
__USE_GNU


104 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


105 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

106 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

107 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

108 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

110 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

111 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

115 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


116 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

117 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

118 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

119 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

121 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

122 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

127 
__BEGIN_NAMESPACE_STD


129 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

132 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

133 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

137 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

138 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

141 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

144 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

151 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

154 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

155 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

156 
__THROW
 
	`__n⁄nuŒ
 ((2));

157 
__END_NAMESPACE_STD


159 #ifde‡
__USE_XOPEN2K8


163 
	~<xloˇÀ.h
>

166 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

167 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

169 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

170 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

173 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

174 || 
deföed
 
__USE_XOPEN2K8


176 *
	$°rdup
 (c⁄° *
__s
)

177 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

183 #i‡
deföed
 
__USE_XOPEN2K8


184 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

185 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

188 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


190 
	#°rdu∑
(
s
) \

191 (
__exãnsi⁄__
 \

193 c⁄° *
__ﬁd
 = (
s
); \

194 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

195 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

196 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

197 
	}
}))

	)

200 
	#°∫du∑
(
s
, 
n
) \

201 (
__exãnsi⁄__
 \

203 c⁄° *
__ﬁd
 = (
s
); \

204 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

205 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

206 
__√w
[
__Àn
] = '\0'; \

207 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

208 }))

	)

211 
	g__BEGIN_NAMESPACE_STD


213 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


216 *
°rchr
 (*
__s
, 
__c
)

217 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

218 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

219 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

221 #ifde‡
__OPTIMIZE__


222 
__exã∫_Æways_ölöe
 *

223 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


225  
__buûtö_°rchr
 (
__s
, 
__c
);

228 
__exã∫_Æways_ölöe
 const *

229 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


231  
__buûtö_°rchr
 (
__s
, 
__c
);

236 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

237 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

240 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


243 *
	`°ºchr
 (*
__s
, 
__c
)

244 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

245 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

246 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

248 #ifde‡
__OPTIMIZE__


249 
__exã∫_Æways_ölöe
 *

250 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


252  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

255 
__exã∫_Æways_ölöe
 const *

256 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


258  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

261 
	}
}

263 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

264 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

266 
__END_NAMESPACE_STD


268 #ifde‡
__USE_GNU


271 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


272 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

273 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

274 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

275 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

278 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

282 
__BEGIN_NAMESPACE_STD


285 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

286 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

289 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

290 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

292 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


295 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

296 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

297 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

298 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

300 #ifde‡
__OPTIMIZE__


301 
__exã∫_Æways_ölöe
 *

302 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


304  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

307 
__exã∫_Æways_ölöe
 const *

308 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


310  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

313 
	}
}

315 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

316 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

319 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


322 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

323 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

324 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 const *

335 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 c⁄° *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

370 c⁄° *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (c⁄° *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 const *

482 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (c⁄° *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 const *

510 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (c⁄° *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

530 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

534 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

535 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

538 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

539 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

542 #ifdef 
__USE_GNU


545 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

546 
__loˇÀ_t
 
__loc
)

547 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

549 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

550 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

554 #ifdef 
__USE_BSD


557 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

558 c⁄° *
__ª°ri˘
 
__dñim
)

559 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

562 #ifdef 
__USE_XOPEN2K8


564 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

567 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

568 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

574 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

575 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

576 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

578 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

582 #ifdef 
__USE_GNU


584 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

585 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

588 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 #i‚de‡
ba£«me


598 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


599 "C++" *
	$ba£«me
 (*
__fûíame
)

600 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

601 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

604 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

610 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

611 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

612 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


632 
	~<bôs/°rög.h
>

635 
	~<bôs/°rög2.h
>

638 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


640 
	~<bôs/°rög3.h
>

644 
__END_DECLS


	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_SVID


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

71 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

75 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

79 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

83 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

86 #ifde‡
__USE_XOPEN2K8


87 
	#_XOPEN_VERSION
 700

	)

88 #ñi‡
deföed
 
__USE_XOPEN2K


89 
	#_XOPEN_VERSION
 600

	)

90 #ñi‡
deföed
 
__USE_UNIX98


91 
	#_XOPEN_VERSION
 500

	)

93 
	#_XOPEN_VERSION
 4

	)

97 
	#_XOPEN_XCU_VERSION
 4

	)

100 
	#_XOPEN_XPG2
 1

	)

101 
	#_XOPEN_XPG3
 1

	)

102 
	#_XOPEN_XPG4
 1

	)

105 
	#_XOPEN_UNIX
 1

	)

108 
	#_XOPEN_CRYPT
 1

	)

112 
	#_XOPEN_ENH_I18N
 1

	)

115 
	#_XOPEN_LEGACY
 1

	)

202 
	~<bôs/posix_›t.h
>

205 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


206 
	~<bôs/ívú⁄míts.h
>

210 
	#STDIN_FILENO
 0

	)

211 
	#STDOUT_FILENO
 1

	)

212 
	#STDERR_FILENO
 2

	)

217 
	~<bôs/ty≥s.h
>

219 #i‚def 
__ssize_t_deföed


220 
__ssize_t
 
	tssize_t
;

221 
	#__ssize_t_deföed


	)

224 
	#__√ed_size_t


	)

225 
	#__√ed_NULL


	)

226 
	~<°ddef.h
>

228 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


231 #i‚de‡
__gid_t_deföed


232 
__gid_t
 
	tgid_t
;

233 
	#__gid_t_deföed


	)

236 #i‚de‡
__uid_t_deföed


237 
__uid_t
 
	tuid_t
;

238 
	#__uid_t_deföed


	)

241 #i‚de‡
__off_t_deföed


242 #i‚de‡
__USE_FILE_OFFSET64


243 
__off_t
 
	toff_t
;

245 
__off64_t
 
	toff_t
;

247 
	#__off_t_deföed


	)

249 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


250 
__off64_t
 
	toff64_t
;

251 
	#__off64_t_deföed


	)

254 #i‚de‡
__u£c⁄ds_t_deföed


255 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

256 
	#__u£c⁄ds_t_deföed


	)

259 #i‚de‡
__pid_t_deföed


260 
__pid_t
 
	tpid_t
;

261 
	#__pid_t_deföed


	)

265 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


266 #i‚de‡
__öçå_t_deföed


267 
__öçå_t
 
	töçå_t
;

268 
	#__öçå_t_deföed


	)

272 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


273 #i‚de‡
__sockÀn_t_deföed


274 
__sockÀn_t
 
	tsockÀn_t
;

275 
	#__sockÀn_t_deföed


	)

281 
	#R_OK
 4

	)

282 
	#W_OK
 2

	)

283 
	#X_OK
 1

	)

284 
	#F_OK
 0

	)

287 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

289 #ifde‡
__USE_GNU


292 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1));

300 #ifde‡
__USE_ATFILE


304 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

305 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

310 #i‚def 
_STDIO_H


311 
	#SEEK_SET
 0

	)

312 
	#SEEK_CUR
 1

	)

313 
	#SEEK_END
 2

	)

314 #ifde‡
__USE_GNU


315 
	#SEEK_DATA
 3

	)

316 
	#SEEK_HOLE
 4

	)

320 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


322 
	#L_SET
 
SEEK_SET


	)

323 
	#L_INCR
 
SEEK_CUR


	)

324 
	#L_XTND
 
SEEK_END


	)

333 #i‚de‡
__USE_FILE_OFFSET64


334 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

336 #ifde‡
__REDIRECT_NTH


337 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

338 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

339 
l£ek64
);

341 
	#l£ek
 
l£ek64


	)

344 #ifde‡
__USE_LARGEFILE64


345 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

346 
__THROW
;

353 
	`˛o£
 (
__fd
);

360 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

366 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

368 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


369 #i‚de‡
__USE_FILE_OFFSET64


376 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

377 
__off_t
 
__off£t
Ë
__wur
;

384 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

385 
__off_t
 
__off£t
Ë
__wur
;

387 #ifde‡
__REDIRECT


388 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

389 
__off64_t
 
__off£t
),

390 
¥ód64
Ë
__wur
;

391 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

392 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

393 
pwrôe64
Ë
__wur
;

395 
	#¥ód
 
¥ód64


	)

396 
	#pwrôe
 
pwrôe64


	)

400 #ifde‡
__USE_LARGEFILE64


404 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

405 
__off64_t
 
__off£t
Ë
__wur
;

408 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

409 
__off64_t
 
__off£t
Ë
__wur
;

417 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

419 #ifde‡
__USE_GNU


422 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

432 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

444 
	`¶ìp
 (
__£c⁄ds
);

446 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

447 || 
deföed
 
__USE_BSD


452 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

453 
__THROW
;

460 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

469 
	`∑u£
 ();

473 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

474 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

476 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


478 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

483 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

484 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

488 #ifde‡
__USE_ATFILE


491 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

492 
__gid_t
 
__group
, 
__Êag
)

493 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

497 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

499 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


501 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

511 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

513 #ifdef 
__USE_GNU


517 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

520 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

521 || 
deföed
 
__USE_BSD


525 *
	$gëwd
 (*
__buf
)

526 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

531 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

534 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

536 #ifde‡
__USE_GNU


539 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

543 **
__ívú⁄
;

544 #ifde‡
__USE_GNU


545 **
ívú⁄
;

551 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

552 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

554 #ifde‡
__USE_XOPEN2K8


557 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

558 
__THROW
 
	`__n⁄nuŒ
 ((2));

563 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

564 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

568 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

569 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

573 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

578 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

585 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 #ifde‡
__USE_GNU


590 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

591 *c⁄° 
__ívp
[])

592 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

596 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


598 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

603 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

609 
	~<bôs/c⁄‚ame.h
>

612 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

613 
__THROW
 
	`__n⁄nuŒ
 ((1));

616 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

619 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

621 #ifdef 
__USE_POSIX2


623 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

628 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

631 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

637 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

638 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


639 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

646 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

648 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


660 
	$£çgΩ
 (Ë
__THROW
;

667 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

669 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


671 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

675 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

678 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

681 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

689 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

691 #ifdef 
__USE_GNU


693 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

700 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

702 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


705 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

708 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


710 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

717 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

719 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


722 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

725 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


727 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

730 #ifde‡
__USE_GNU


733 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

734 
__THROW
;

738 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

739 
__THROW
;

743 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

744 
__THROW
 
__wur
;

748 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

749 
__THROW
 
__wur
;

756 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

758 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

759 || 
deföed
 
__USE_BSD


764 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

770 *
	$ây«me
 (
__fd
Ë
__THROW
;

774 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

775 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

779 
	$ißây
 (
__fd
Ë
__THROW
;

781 #i‡
deföed
 
__USE_BSD
 \

782 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

785 
	$ây¶Ÿ
 (Ë
__THROW
;

790 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

793 #ifde‡
__USE_ATFILE


796 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

797 c⁄° *
__to
, 
__Êags
)

798 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

801 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


803 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

804 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

809 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

810 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

811 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

814 #ifde‡
__USE_ATFILE


816 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

817 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

820 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

821 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

822 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

826 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

828 #ifde‡
__USE_ATFILE


830 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

831 
__THROW
 
	`__n⁄nuŒ
 ((2));

835 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

839 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

842 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

849 *
	`gëlogö
 ();

850 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


857 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

860 #ifdef 
__USE_BSD


862 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

866 #ifdef 
__USE_POSIX2


870 
	#__√ed_gë›t


	)

871 
	~<gë›t.h
>

875 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


879 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

883 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

886 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

887 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

891 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

897 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

898 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

899 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

900 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

906 
	$vh™gup
 (Ë
__THROW
;

909 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

917 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

918 
size_t
 
__off£t
, 
__sˇÀ
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1));

925 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

929 *
	$gëu£rshñl
 (Ë
__THROW
;

930 
	$ídu£rshñl
 (Ë
__THROW
;

931 
	$£tu£rshñl
 (Ë
__THROW
;

937 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

941 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

944 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

948 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

956 
	`fsync
 (
__fd
);

959 #ifde‡
__USE_GNU


962 
	$syncfs
 (
__fd
Ë
__THROW
;

966 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


969 
	`gëho°id
 ();

972 
	$sync
 (Ë
__THROW
;

975 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


978 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

983 
	$gëdèbÀsize
 (Ë
__THROW
;

989 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


992 #i‚de‡
__USE_FILE_OFFSET64


993 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

994 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

996 #ifde‡
__REDIRECT_NTH


997 
	`__REDIRECT_NTH
 (
åunˇã
,

998 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

999 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1001 
	#åunˇã
 
åunˇã64


	)

1004 #ifde‡
__USE_LARGEFILE64


1005 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1006 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1011 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_POSIX199309
 \

1012 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1015 #i‚de‡
__USE_FILE_OFFSET64


1016 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1018 #ifde‡
__REDIRECT_NTH


1019 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1020 
·runˇã64
Ë
__wur
;

1022 
	#·runˇã
 
·runˇã64


	)

1025 #ifde‡
__USE_LARGEFILE64


1026 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1032 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1033 || 
deföed
 
__USE_MISC


1037 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1043 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1047 #ifde‡
__USE_MISC


1058 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1063 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1075 
	#F_ULOCK
 0

	)

1076 
	#F_LOCK
 1

	)

1077 
	#F_TLOCK
 2

	)

1078 
	#F_TEST
 3

	)

1080 #i‚de‡
__USE_FILE_OFFSET64


1081 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1083 #ifde‡
__REDIRECT


1084 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1085 
lockf64
Ë
__wur
;

1087 
	#lockf
 
lockf64


	)

1090 #ifde‡
__USE_LARGEFILE64


1091 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1096 #ifde‡
__USE_GNU


1101 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1102 (
__exãnsi⁄__
 \

1103 ({ 
__ªsu…
; \

1104 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1105 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1106 
__ªsu…
; 
	}
}))

	)

1109 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1112 
fd©async
 (
__fûdes
);

1118 #ifdef 
__USE_XOPEN


1120 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1121 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1125 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

1126 
__THROW
 
	`__n⁄nuŒ
 ((1));

1133 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1134 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1140 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1142 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1147 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1148 
	~<bôs/uni°d.h
>

1151 
__END_DECLS


	@/usr/include/uuid/uuid.h

35 #i‚de‡
_UUID_UUID_H


36 
	#_UUID_UUID_H


	)

38 
	~<sys/ty≥s.h
>

39 #i‚de‡
_WIN32


40 
	~<sys/time.h
>

42 
	~<time.h
>

44 
	tuuid_t
[16];

47 
	#UUID_VARIANT_NCS
 0

	)

48 
	#UUID_VARIANT_DCE
 1

	)

49 
	#UUID_VARIANT_MICROSOFT
 2

	)

50 
	#UUID_VARIANT_OTHER
 3

	)

53 
	#UUID_TYPE_DCE_TIME
 1

	)

54 
	#UUID_TYPE_DCE_RANDOM
 4

	)

57 #ifde‡
__GNUC__


58 
	#UUID_DEFINE
(
«me
,
u0
,
u1
,
u2
,
u3
,
u4
,
u5
,
u6
,
u7
,
u8
,
u9
,
u10
,
u11
,
u12
,
u13
,
u14
,
u15
) \

59 c⁄° 
uuid_t
 
«me
 
	`__©åibuã__
 ((
unu£d
)Ë{
u0
,
u1
,
u2
,
u3
,
u4
,
u5
,
u6
,
u7
,
u8
,
u9
,
u10
,
u11
,
u12
,
u13
,
u14
,
u15
}

	)

61 
	#UUID_DEFINE
(
«me
,
u0
,
u1
,
u2
,
u3
,
u4
,
u5
,
u6
,
u7
,
u8
,
u9
,
u10
,
u11
,
u12
,
u13
,
u14
,
u15
) \

62 c⁄° 
uuid_t
 
«me
 = {
u0
,
u1
,
u2
,
u3
,
u4
,
u5
,
u6
,
u7
,
u8
,
u9
,
u10
,
u11
,
u12
,
u13
,
u14
,
u15
}

	)

65 #ifde‡
__˝lu•lus


70 
uuid_˛ór
(
uuid_t
 
uu
);

73 
uuid_com∑ª
(c⁄° 
uuid_t
 
uu1
, c⁄° uuid_à
uu2
);

76 
uuid_c›y
(
uuid_t
 
d°
, c⁄° uuid_à
§c
);

79 
uuid_gíî©e
(
uuid_t
 
out
);

80 
uuid_gíî©e_øndom
(
uuid_t
 
out
);

81 
uuid_gíî©e_time
(
uuid_t
 
out
);

82 
uuid_gíî©e_time_ß„
(
uuid_t
 
out
);

85 
uuid_is_nuŒ
(c⁄° 
uuid_t
 
uu
);

88 
uuid_∑r£
(c⁄° *
ö
, 
uuid_t
 
uu
);

91 
uuid_u≈¨£
(c⁄° 
uuid_t
 
uu
, *
out
);

92 
uuid_u≈¨£_lowî
(c⁄° 
uuid_t
 
uu
, *
out
);

93 
uuid_u≈¨£_uµî
(c⁄° 
uuid_t
 
uu
, *
out
);

96 
time_t
 
uuid_time
(c⁄° 
uuid_t
 
uu
, 
timevÆ
 *
ªt_tv
);

97 
uuid_ty≥
(c⁄° 
uuid_t
 
uu
);

98 
uuid_v¨ü¡
(c⁄° 
uuid_t
 
uu
);

100 #ifde‡
__˝lu•lus


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

101 #unde‡
__USE_ISOC11


102 #unde‡
__USE_ISOC99


103 #unde‡
__USE_ISOC95


104 #unde‡
__USE_ISOCXX11


105 #unde‡
__USE_POSIX


106 #unde‡
__USE_POSIX2


107 #unde‡
__USE_POSIX199309


108 #unde‡
__USE_POSIX199506


109 #unde‡
__USE_XOPEN


110 #unde‡
__USE_XOPEN_EXTENDED


111 #unde‡
__USE_UNIX98


112 #unde‡
__USE_XOPEN2K


113 #unde‡
__USE_XOPEN2KXSI


114 #unde‡
__USE_XOPEN2K8


115 #unde‡
__USE_XOPEN2K8XSI


116 #unde‡
__USE_LARGEFILE


117 #unde‡
__USE_LARGEFILE64


118 #unde‡
__USE_FILE_OFFSET64


119 #unde‡
__USE_BSD


120 #unde‡
__USE_SVID


121 #unde‡
__USE_MISC


122 #unde‡
__USE_ATFILE


123 #unde‡
__USE_GNU


124 #unde‡
__USE_REENTRANT


125 #unde‡
__USE_FORTIFY_LEVEL


126 #unde‡
__KERNEL_STRICT_NAMES


130 #i‚de‡
_LOOSE_KERNEL_NAMES


131 
	#__KERNEL_STRICT_NAMES


	)

141 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


142 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

143 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

145 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

150 #ifde‡
_GNU_SOURCE


151 #unde‡
_ISOC95_SOURCE


152 
	#_ISOC95_SOURCE
 1

	)

153 #unde‡
_ISOC99_SOURCE


154 
	#_ISOC99_SOURCE
 1

	)

155 #unde‡
_ISOC11_SOURCE


156 
	#_ISOC11_SOURCE
 1

	)

157 #unde‡
_POSIX_SOURCE


158 
	#_POSIX_SOURCE
 1

	)

159 #unde‡
_POSIX_C_SOURCE


160 
	#_POSIX_C_SOURCE
 200809L

	)

161 #unde‡
_XOPEN_SOURCE


162 
	#_XOPEN_SOURCE
 700

	)

163 #unde‡
_XOPEN_SOURCE_EXTENDED


164 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

165 #unde‡
_LARGEFILE64_SOURCE


166 
	#_LARGEFILE64_SOURCE
 1

	)

167 #unde‡
_DEFAULT_SOURCE


168 
	#_DEFAULT_SOURCE
 1

	)

169 #unde‡
_BSD_SOURCE


170 
	#_BSD_SOURCE
 1

	)

171 #unde‡
_SVID_SOURCE


172 
	#_SVID_SOURCE
 1

	)

173 #unde‡
_ATFILE_SOURCE


174 
	#_ATFILE_SOURCE
 1

	)

179 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

180 || (!
deföed
 
	g__STRICT_ANSI__
 \

181 && !
deföed
 
	g_ISOC99_SOURCE
 \

182 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

183 && !
deföed
 
	g_XOPEN_SOURCE
 \

184 && !
deföed
 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
))

185 #unde‡
_DEFAULT_SOURCE


186 
	#_DEFAULT_SOURCE
 1

	)

187 #unde‡
_BSD_SOURCE


188 
	#_BSD_SOURCE
 1

	)

189 #unde‡
_SVID_SOURCE


190 
	#_SVID_SOURCE
 1

	)

194 #i‡(
deföed
 
_ISOC11_SOURCE
 \

195 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

196 
	#__USE_ISOC11
 1

	)

200 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

201 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

202 
	#__USE_ISOC99
 1

	)

206 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

207 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

208 
	#__USE_ISOC95
 1

	)

215 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

216 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

217 
	#__USE_ISOCXX11
 1

	)

223 #ifde‡
_DEFAULT_SOURCE


224 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


225 
	#__USE_POSIX_IMPLICITLY
 1

	)

227 #unde‡
_POSIX_SOURCE


228 
	#_POSIX_SOURCE
 1

	)

229 #unde‡
_POSIX_C_SOURCE


230 
	#_POSIX_C_SOURCE
 200809L

	)

232 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

233 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

234 
	#_POSIX_SOURCE
 1

	)

235 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

236 
	#_POSIX_C_SOURCE
 2

	)

237 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

238 
	#_POSIX_C_SOURCE
 199506L

	)

239 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

240 
	#_POSIX_C_SOURCE
 200112L

	)

242 
	#_POSIX_C_SOURCE
 200809L

	)

244 
	#__USE_POSIX_IMPLICITLY
 1

	)

247 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


248 
	#__USE_POSIX
 1

	)

251 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


252 
	#__USE_POSIX2
 1

	)

255 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

256 
	#__USE_POSIX199309
 1

	)

259 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

260 
	#__USE_POSIX199506
 1

	)

263 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

264 
	#__USE_XOPEN2K
 1

	)

265 #unde‡
__USE_ISOC95


266 
	#__USE_ISOC95
 1

	)

267 #unde‡
__USE_ISOC99


268 
	#__USE_ISOC99
 1

	)

271 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

272 
	#__USE_XOPEN2K8
 1

	)

273 #unde‡
_ATFILE_SOURCE


274 
	#_ATFILE_SOURCE
 1

	)

277 #ifdef 
_XOPEN_SOURCE


278 
	#__USE_XOPEN
 1

	)

279 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

280 
	#__USE_XOPEN_EXTENDED
 1

	)

281 
	#__USE_UNIX98
 1

	)

282 #unde‡
_LARGEFILE_SOURCE


283 
	#_LARGEFILE_SOURCE
 1

	)

284 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

285 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

286 
	#__USE_XOPEN2K8
 1

	)

287 
	#__USE_XOPEN2K8XSI
 1

	)

289 
	#__USE_XOPEN2K
 1

	)

290 
	#__USE_XOPEN2KXSI
 1

	)

291 #unde‡
__USE_ISOC95


292 
	#__USE_ISOC95
 1

	)

293 #unde‡
__USE_ISOC99


294 
	#__USE_ISOC99
 1

	)

297 #ifde‡
_XOPEN_SOURCE_EXTENDED


298 
	#__USE_XOPEN_EXTENDED
 1

	)

303 #ifde‡
_LARGEFILE_SOURCE


304 
	#__USE_LARGEFILE
 1

	)

307 #ifde‡
_LARGEFILE64_SOURCE


308 
	#__USE_LARGEFILE64
 1

	)

311 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

312 
	#__USE_FILE_OFFSET64
 1

	)

315 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


316 
	#__USE_MISC
 1

	)

319 #ifdef 
_BSD_SOURCE


320 
	#__USE_BSD
 1

	)

323 #ifdef 
_SVID_SOURCE


324 
	#__USE_SVID
 1

	)

327 #ifdef 
_ATFILE_SOURCE


328 
	#__USE_ATFILE
 1

	)

331 #ifdef 
_GNU_SOURCE


332 
	#__USE_GNU
 1

	)

335 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


336 
	#__USE_REENTRANT
 1

	)

339 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

340 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

341 #i‡
_FORTIFY_SOURCE
 > 1

342 
	#__USE_FORTIFY_LEVEL
 2

	)

344 
	#__USE_FORTIFY_LEVEL
 1

	)

347 
	#__USE_FORTIFY_LEVEL
 0

	)

352 
	~<°dc-¥edef.h
>

360 #unde‡
__GNU_LIBRARY__


361 
	#__GNU_LIBRARY__
 6

	)

365 
	#__GLIBC__
 2

	)

366 
	#__GLIBC_MINOR__
 19

	)

368 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

369 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

372 #i‚de‡
__ASSEMBLER__


373 #i‚de‡
_SYS_CDEFS_H


374 
	~<sys/cdefs.h
>

379 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


380 
	#__USE_LARGEFILE
 1

	)

381 
	#__USE_LARGEFILE64
 1

	)

387 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

388 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

389 && 
deföed
 
	g__exã∫_ölöe


390 
	#__USE_EXTERN_INLINES
 1

	)

398 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

19 #i‚de‡
_GETOPT_H


21 #i‚de‡
__√ed_gë›t


22 
	#_GETOPT_H
 1

	)

32 #i‡!
deföed
 
__GNU_LIBRARY__


33 
	~<˘y≥.h
>

36 #i‚de‡
__THROW


37 #i‚de‡
__GNUC_PREREQ


38 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

40 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

41 
	#__THROW
 
	`throw
 ()

	)

43 
	#__THROW


	)

47 #ifdef 
__˝lu•lus


57 *
›èrg
;

71 
›töd
;

76 
›ãº
;

80 
›t›t
;

82 #i‚de‡
__√ed_gë›t


104 
	s›ti⁄


106 c⁄° *
	g«me
;

109 
	ghas_¨g
;

110 *
	gÊag
;

111 
	gvÆ
;

116 
	#no_¨gumít
 0

	)

117 
	#ªquúed_¨gumít
 1

	)

118 
	#›ti⁄Æ_¨gumít
 2

	)

146 #ifde‡
__GNU_LIBRARY__


150 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

151 
__THROW
;

153 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

154 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


158 #ifde‡
__REDIRECT


159 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
),

161 
__posix_gë›t
);

163 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
Ë
__THROW
;

165 
	#gë›t
 
__posix_gë›t


	)

169 
gë›t
 ();

172 #i‚de‡
__√ed_gë›t


173 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

174 c⁄° *
__sh‹t›ts
,

175 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

176 
__THROW
;

177 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

178 c⁄° *
__sh‹t›ts
,

179 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

180 
__THROW
;

184 #ifdef 
__˝lu•lus


189 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

28 #i‚de‡
_IO_STDIO_H


29 
	#_IO_STDIO_H


	)

31 
	~<_G_c⁄fig.h
>

33 
	#_IO_Âos_t
 
_G_Âos_t


	)

34 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

35 
	#_IO_size_t
 
size_t


	)

36 
	#_IO_ssize_t
 
__ssize_t


	)

37 
	#_IO_off_t
 
__off_t


	)

38 
	#_IO_off64_t
 
__off64_t


	)

39 
	#_IO_pid_t
 
__pid_t


	)

40 
	#_IO_uid_t
 
__uid_t


	)

41 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

42 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

43 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

44 
	#_IO_va_li°
 
_G_va_li°


	)

45 
	#_IO_wöt_t
 
wöt_t


	)

48 
	#__√ed___va_li°


	)

49 
	~<°d¨g.h
>

50 #ifde‡
__GNUC_VA_LIST


51 #unde‡
_IO_va_li°


52 
	#_IO_va_li°
 
__gnuc_va_li°


	)

55 #i‚de‡
__P


56 
	~<sys/cdefs.h
>

59 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

61 #i‚de‡
EOF


62 
	#EOF
 (-1)

	)

64 #i‚de‡
NULL


65 #i‡
deföed
 
__GNUG__
 && \

66 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

67 
	#NULL
 (
__nuŒ
)

	)

69 #i‡!
deföed
(
__˝lu•lus
)

70 
	#NULL
 ((*)0)

	)

72 
	#NULL
 (0)

	)

77 
	#_IOS_INPUT
 1

	)

78 
	#_IOS_OUTPUT
 2

	)

79 
	#_IOS_ATEND
 4

	)

80 
	#_IOS_APPEND
 8

	)

81 
	#_IOS_TRUNC
 16

	)

82 
	#_IOS_NOCREATE
 32

	)

83 
	#_IOS_NOREPLACE
 64

	)

84 
	#_IOS_BIN
 128

	)

92 
	#_IO_MAGIC
 0xFBAD0000

	)

93 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

94 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

95 
	#_IO_USER_BUF
 1

	)

96 
	#_IO_UNBUFFERED
 2

	)

97 
	#_IO_NO_READS
 4

	)

98 
	#_IO_NO_WRITES
 8

	)

99 
	#_IO_EOF_SEEN
 0x10

	)

100 
	#_IO_ERR_SEEN
 0x20

	)

101 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

102 
	#_IO_LINKED
 0x80

	)

103 
	#_IO_IN_BACKUP
 0x100

	)

104 
	#_IO_LINE_BUF
 0x200

	)

105 
	#_IO_TIED_PUT_GET
 0x400

	)

106 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

107 
	#_IO_IS_APPENDING
 0x1000

	)

108 
	#_IO_IS_FILEBUF
 0x2000

	)

109 
	#_IO_BAD_SEEN
 0x4000

	)

110 
	#_IO_USER_LOCK
 0x8000

	)

112 
	#_IO_FLAGS2_MMAP
 1

	)

113 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

114 #ifde‡
_LIBC


115 
	#_IO_FLAGS2_FORTIFY
 4

	)

117 
	#_IO_FLAGS2_USER_WBUF
 8

	)

118 #ifde‡
_LIBC


119 
	#_IO_FLAGS2_SCANF_STD
 16

	)

120 
	#_IO_FLAGS2_NOCLOSE
 32

	)

121 
	#_IO_FLAGS2_CLOEXEC
 64

	)

125 
	#_IO_SKIPWS
 01

	)

126 
	#_IO_LEFT
 02

	)

127 
	#_IO_RIGHT
 04

	)

128 
	#_IO_INTERNAL
 010

	)

129 
	#_IO_DEC
 020

	)

130 
	#_IO_OCT
 040

	)

131 
	#_IO_HEX
 0100

	)

132 
	#_IO_SHOWBASE
 0200

	)

133 
	#_IO_SHOWPOINT
 0400

	)

134 
	#_IO_UPPERCASE
 01000

	)

135 
	#_IO_SHOWPOS
 02000

	)

136 
	#_IO_SCIENTIFIC
 04000

	)

137 
	#_IO_FIXED
 010000

	)

138 
	#_IO_UNITBUF
 020000

	)

139 
	#_IO_STDIO
 040000

	)

140 
	#_IO_DONT_CLOSE
 0100000

	)

141 
	#_IO_BOOLALPHA
 0200000

	)

144 
_IO_jump_t
; 
	g_IO_FILE
;

147 #ifde‡
_IO_MTSAFE_IO


148 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

149 
	~<bôs/°dio-lock.h
>

154 
	t_IO_lock_t
;

160 
	s_IO_m¨kî
 {

161 
_IO_m¨kî
 *
	m_√xt
;

162 
_IO_FILE
 *
	m_sbuf
;

166 
	m_pos
;

168 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

169 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

170 
	mpublic
:

171 
°ªamm¨kî
(
°ªambuf
 *
sb
);

172 ~
°ªamm¨kî
();

173 
ßvög
(Ë{  
	m_•os
 == -2; }

174 
dñè
(
°ªamm¨kî
&);

175 
dñè
();

180 
	e__codecvt_ªsu…


182 
	m__codecvt_ok
,

183 
	m__codecvt_∑πül
,

184 
	m__codecvt_îr‹
,

185 
	m__codecvt_noc⁄v


188 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


191 
	s_IO_codecvt


193 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

194 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

195 
	m__mb°©e_t
 *,

196 c⁄° 
	mwch¨_t
 *,

197 c⁄° 
	mwch¨_t
 *,

198 c⁄° 
	mwch¨_t
 **, *,

200 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

201 
	m__mb°©e_t
 *, *,

203 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

204 
	m__mb°©e_t
 *,

206 c⁄° **, 
	mwch¨_t
 *,

207 
	mwch¨_t
 *, wchar_t **);

208 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

209 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

210 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

211 c⁄° *, c⁄° *, 
	m_IO_size_t
);

212 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

214 
_IO_ic⁄v_t
 
	m__cd_ö
;

215 
_IO_ic⁄v_t
 
	m__cd_out
;

219 
	s_IO_wide_d©a


221 
wch¨_t
 *
	m_IO_ªad_±r
;

222 
wch¨_t
 *
	m_IO_ªad_íd
;

223 
wch¨_t
 *
	m_IO_ªad_ba£
;

224 
wch¨_t
 *
	m_IO_wrôe_ba£
;

225 
wch¨_t
 *
	m_IO_wrôe_±r
;

226 
wch¨_t
 *
	m_IO_wrôe_íd
;

227 
wch¨_t
 *
	m_IO_buf_ba£
;

228 
wch¨_t
 *
	m_IO_buf_íd
;

230 
wch¨_t
 *
	m_IO_ßve_ba£
;

231 
wch¨_t
 *
	m_IO_backup_ba£
;

233 
wch¨_t
 *
	m_IO_ßve_íd
;

235 
__mb°©e_t
 
	m_IO_°©e
;

236 
__mb°©e_t
 
	m_IO_œ°_°©e
;

237 
_IO_codecvt
 
	m_codecvt
;

239 
wch¨_t
 
	m_sh‹tbuf
[1];

241 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

245 
	s_IO_FILE
 {

246 
	m_Êags
;

247 
	#_IO_fûe_Êags
 
_Êags


	)

251 * 
	m_IO_ªad_±r
;

252 * 
	m_IO_ªad_íd
;

253 * 
	m_IO_ªad_ba£
;

254 * 
	m_IO_wrôe_ba£
;

255 * 
	m_IO_wrôe_±r
;

256 * 
	m_IO_wrôe_íd
;

257 * 
	m_IO_buf_ba£
;

258 * 
	m_IO_buf_íd
;

260 *
	m_IO_ßve_ba£
;

261 *
	m_IO_backup_ba£
;

262 *
	m_IO_ßve_íd
;

264 
_IO_m¨kî
 *
	m_m¨kîs
;

266 
_IO_FILE
 *
	m_chaö
;

268 
	m_fûío
;

270 
	m_blksize
;

272 
	m_Êags2
;

274 
_IO_off_t
 
	m_ﬁd_off£t
;

276 
	#__HAVE_COLUMN


	)

278 
	m_cur_cﬁumn
;

279 sig√d 
	m_vèbÀ_off£t
;

280 
	m_sh‹tbuf
[1];

284 
_IO_lock_t
 *
	m_lock
;

285 #ifde‡
_IO_USE_OLD_IO_FILE


288 
	s_IO_FILE_com∂ëe


290 
_IO_FILE
 
	m_fûe
;

292 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

293 
_IO_off64_t
 
	m_off£t
;

294 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


296 
_IO_codecvt
 *
	m_codecvt
;

297 
_IO_wide_d©a
 *
	m_wide_d©a
;

298 
_IO_FILE
 *
	m_‰ìªs_li°
;

299 *
	m_‰ìªs_buf
;

300 
size_t
 
	m_‰ìªs_size
;

302 *
	m__∑d1
;

303 *
	m__∑d2
;

304 *
	m__∑d3
;

305 *
	m__∑d4
;

306 
size_t
 
	m__∑d5
;

308 
	m_mode
;

310 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

314 #i‚de‡
__˝lu•lus


315 
_IO_FILE
 
	t_IO_FILE
;

318 
	g_IO_FILE_∂us
;

320 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

321 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

322 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

323 #i‚de‡
_LIBC


324 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

325 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

326 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

328 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

329 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

330 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

338 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

346 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

347 
	tsize_t
 
	t__n
);

355 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

358 
	t__io_˛o£_‚
 (*
	t__cookõ
);

361 #ifde‡
_GNU_SOURCE


363 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

364 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

365 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

366 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

371 
__io_ªad_‚
 *
	mªad
;

372 
__io_wrôe_‚
 *
	mwrôe
;

373 
__io_£ek_‚
 *
	m£ek
;

374 
__io_˛o£_‚
 *
	m˛o£
;

375 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

376 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

378 
	g_IO_cookõ_fûe
;

381 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

382 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

386 #ifde‡
__˝lu•lus


390 
__undîÊow
 (
_IO_FILE
 *);

391 
__uÊow
 (
_IO_FILE
 *);

392 
__ovîÊow
 (
_IO_FILE
 *, );

393 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


394 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

395 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

396 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

399 #i‡ 
__GNUC__
 >= 3

400 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

402 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

405 
	#_IO_gëc_u∆ocked
(
_Â
) \

406 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

407 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

408 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

409 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

410 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

411 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

412 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

413 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

414 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

415 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

417 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


418 
	#_IO_gëwc_u∆ocked
(
_Â
) \

419 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

420 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

421 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

422 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

423 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

424 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

425 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

426 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

427 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

428 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

431 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

432 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

434 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

435 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

436 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

437 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

439 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

442 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

443 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

445 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

446 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

447 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

449 #ifde‡
_IO_MTSAFE_IO


450 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

451 
	#_IO_Êockfûe
(
_Â
) \

452 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

453 
	#_IO_fu∆ockfûe
(
_Â
) \

454 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

456 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

457 
	#_IO_Êockfûe
(
_Â
Ë

	)

458 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

459 
	#_IO_·rylockfûe
(
_Â
Ë

	)

460 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

461 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

464 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

465 
_IO_va_li°
, *
__ª°ri˘
);

466 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

467 
_IO_va_li°
);

468 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

469 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

471 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

472 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

474 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

476 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


477 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

478 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

479 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

480 #i‡
__GNUC__
 >= 2

483 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


484 
	~<shlib-com∑t.h
>

485 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

486 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

487 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

488 c⁄° 
_IO_°dö_u£d
;

489 
wók_exã∫
 (
_IO_°dö_u£d
);

492 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


493 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

497 
	#_IO_fwide
(
__Â
, 
__mode
) \

498 ({ 
__ªsu…
 = (
__mode
); \

499 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

501 i‡((
__Â
)->
_mode
 == 0) \

503 (
__Â
)->
_mode
 = -1; \

504 
__ªsu…
 = (
__Â
)->
_mode
; \

506 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

507 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

509 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

510 
__ªsu…
; })

	)

513 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

514 
_IO_va_li°
, *
__ª°ri˘
);

515 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

516 
_IO_va_li°
);

517 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

518 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

521 #ifde‡
__LDBL_COMPAT


522 
	~<bôs/libio-ldbl.h
>

525 #ifde‡
__˝lu•lus


	@/usr/include/linux/ioctl.h

1 #i‚de‡
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/io˘l.h
>

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__FD_SETSIZE


22 
	#__FD_SETSIZE
 1024

	)

25 
	mfds_bôs
[
__FD_SETSIZE
 / (8 * ())];

26 } 
	t__kî√l_fd_£t
;

29 (*
	t__kî√l_sigh™dÀr_t
)();

32 
	t__kî√l_key_t
;

33 
	t__kî√l_mqd_t
;

35 
	~<asm/posix_ty≥s.h
>

	@/usr/include/paths.h

32 #i‚de‡
_PATHS_H_


33 
	#_PATHS_H_


	)

36 
	#_PATH_DEFPATH
 "/u§/bö:/bö"

	)

38 
	#_PATH_STDPATH
 \

39 "/u§/bö:/bö:/u§/sbö:/sbö"

	)

41 
	#_PATH_BSHELL
 "/bö/sh"

	)

42 
	#_PATH_CONSOLE
 "/dev/c⁄sﬁe"

	)

43 
	#_PATH_CSHELL
 "/bö/csh"

	)

44 
	#_PATH_DEVDB
 "/v¨/run/dev.db"

	)

45 
	#_PATH_DEVNULL
 "/dev/nuŒ"

	)

46 
	#_PATH_DRUM
 "/dev/drum"

	)

47 
	#_PATH_GSHADOW
 "/ëc/gshadow"

	)

48 
	#_PATH_KLOG
 "/¥oc/kmsg"

	)

49 
	#_PATH_KMEM
 "/dev/kmem"

	)

50 
	#_PATH_LASTLOG
 "/v¨/log/œ°log"

	)

51 
	#_PATH_MAILDIR
 "/v¨/maû"

	)

52 
	#_PATH_MAN
 "/u§/sh¨e/m™"

	)

53 
	#_PATH_MEM
 "/dev/mem"

	)

54 
	#_PATH_MNTTAB
 "/ëc/f°ab"

	)

55 
	#_PATH_MOUNTED
 "/ëc/mèb"

	)

56 
	#_PATH_NOLOGIN
 "/ëc/nﬁogö"

	)

57 
	#_PATH_PRESERVE
 "/v¨/lib"

	)

58 
	#_PATH_RWHODIR
 "/v¨/•oﬁ/rwho"

	)

59 
	#_PATH_SENDMAIL
 "/u§/sbö/£ndmaû"

	)

60 
	#_PATH_SHADOW
 "/ëc/shadow"

	)

61 
	#_PATH_SHELLS
 "/ëc/shñls"

	)

62 
	#_PATH_TTY
 "/dev/ây"

	)

63 
	#_PATH_UNIX
 "/boŸ/vmlöux"

	)

64 
	#_PATH_UTMP
 "/v¨/run/utmp"

	)

65 
	#_PATH_VI
 "/u§/bö/vi"

	)

66 
	#_PATH_WTMP
 "/v¨/log/wtmp"

	)

69 
	#_PATH_DEV
 "/dev/"

	)

70 
	#_PATH_TMP
 "/tmp/"

	)

71 
	#_PATH_VARDB
 "/v¨/lib/misc/"

	)

72 
	#_PATH_VARRUN
 "/v¨/run/"

	)

73 
	#_PATH_VARTMP
 "/v¨/tmp/"

	)

	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 
	#SIZE_MAX
 (4294967295U)

	)

267 #i‚de‡
WCHAR_MIN


269 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

270 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

274 
	#WINT_MIN
 (0u)

	)

275 
	#WINT_MAX
 (4294967295u)

	)

278 
	#INT8_C
(
c
Ë
	)
c

279 
	#INT16_C
(
c
Ë
	)
c

280 
	#INT32_C
(
c
Ë
	)
c

281 #i‡
__WORDSIZE
 == 64

282 
	#INT64_C
(
c
Ë¯## 
L


	)

284 
	#INT64_C
(
c
Ë¯## 
LL


	)

288 
	#UINT8_C
(
c
Ë
	)
c

289 
	#UINT16_C
(
c
Ë
	)
c

290 
	#UINT32_C
(
c
Ë¯## 
U


	)

291 #i‡
__WORDSIZE
 == 64

292 
	#UINT64_C
(
c
Ë¯## 
UL


	)

294 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

298 #i‡
__WORDSIZE
 == 64

299 
	#INTMAX_C
(
c
Ë¯## 
L


	)

300 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

302 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

303 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

104 
__BEGIN_NAMESPACE_STD


110 
__ex˘y≥
 (
iß um
);

111 
__ex˘y≥
 (
ißÕha
);

112 
__ex˘y≥
 (
is˙ål
);

113 
__ex˘y≥
 (
isdigô
);

114 
__ex˘y≥
 (
i¶owî
);

115 
__ex˘y≥
 (
isgøph
);

116 
__ex˘y≥
 (
i•röt
);

117 
__ex˘y≥
 (
i•un˘
);

118 
__ex˘y≥
 (
is•a˚
);

119 
__ex˘y≥
 (
isuµî
);

120 
__ex˘y≥
 (
isxdigô
);

124 
	$tﬁowî
 (
__c
Ë
__THROW
;

127 
	$touµî
 (
__c
Ë
__THROW
;

129 
__END_NAMESPACE_STD


133 #ifdef 
__USE_ISOC99


134 
__BEGIN_NAMESPACE_C99


136 
	`__ex˘y≥
 (
isbœnk
);

138 
__END_NAMESPACE_C99


141 #ifde‡
__USE_GNU


143 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

146 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


150 
	$ißscii
 (
__c
Ë
__THROW
;

154 
	$tﬂscii
 (
__c
Ë
__THROW
;

158 
	`__ex˘y≥
 (
_touµî
);

159 
	`__ex˘y≥
 (
_tﬁowî
);

163 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

164 (
__exãnsi⁄__
 \

165 ({ 
__ªs
; \

166 i‡( (
c
) > 1) \

168 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

170 
__c
 = (
c
); \

171 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

174 
__ªs
 = 
f
 
¨gs
; \

177 
__ªs
 = (
a
)[(Ë(
c
)]; \

178 
__ªs
; 
	}
}))

	)

180 #i‡!
deföed
 
__NO_CTYPE


181 #ifde‡
__is˘y≥_f


182 
	$__is˘y≥_f
 (
Ænum
)

183 
	$__is˘y≥_f
 (
Æpha
)

184 
	$__is˘y≥_f
 (
˙ål
)

185 
	$__is˘y≥_f
 (
digô
)

186 
	$__is˘y≥_f
 (
lowî
)

187 
	$__is˘y≥_f
 (
gøph
)

188 
	$__is˘y≥_f
 (
¥öt
)

189 
	$__is˘y≥_f
 (
pun˘
)

190 
	$__is˘y≥_f
 (
•a˚
)

191 
	$__is˘y≥_f
 (
uµî
)

192 
	$__is˘y≥_f
 (
xdigô
)

193 #ifde‡
__USE_ISOC99


194 
	$__is˘y≥_f
 (
bœnk
)

196 #ñi‡
deföed
 
__is˘y≥


197 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

198 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

199 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

200 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

201 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

202 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

203 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

204 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

205 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

206 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

207 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

208 #ifde‡
__USE_ISOC99


209 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

213 #ifde‡
__USE_EXTERN_INLINES


214 
__exã∫_ölöe
 

215 
	`__NTH
 (
	$tﬁowî
 (
__c
))

217  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

218 
	}
}

220 
__exã∫_ölöe
 

221 
__NTH
 (
	$touµî
 (
__c
))

223  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

224 
	}
}

227 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


228 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

229 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

232 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


233 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

234 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

236 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

237 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

243 #ifde‡
__USE_XOPEN2K8


257 
	~<xloˇÀ.h
>

261 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

262 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

264 
	#__ex˘y≥_l
(
«me
) \

265 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

271 
__ex˘y≥_l
 (
iß um_l
);

272 
__ex˘y≥_l
 (
ißÕha_l
);

273 
__ex˘y≥_l
 (
is˙ål_l
);

274 
__ex˘y≥_l
 (
isdigô_l
);

275 
__ex˘y≥_l
 (
i¶owî_l
);

276 
__ex˘y≥_l
 (
isgøph_l
);

277 
__ex˘y≥_l
 (
i•röt_l
);

278 
__ex˘y≥_l
 (
i•un˘_l
);

279 
__ex˘y≥_l
 (
is•a˚_l
);

280 
__ex˘y≥_l
 (
isuµî_l
);

281 
__ex˘y≥_l
 (
isxdigô_l
);

283 
__ex˘y≥_l
 (
isbœnk_l
);

287 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

288 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

291 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


295 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

296 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

297 
	#__touµî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

299 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

300 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

304 #i‚de‡
__NO_CTYPE


305 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

306 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

307 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

308 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

309 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

310 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

311 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

312 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

313 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

314 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

315 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

317 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


320 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

321 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

324 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

325 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

326 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

327 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

328 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

329 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

330 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

331 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

332 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

333 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

334 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

336 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

338 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


339 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

340 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

347 
__END_DECLS


	@/usr/include/linux/stddef.h

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

54 
	#__STDC_ISO_10646__
 201103L

	)

57 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_BSD


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_BSD
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
) (*, const *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
) (const *, const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 c⁄° *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

150 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

151 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
;

155 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

158 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

159 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

160 
__THROW
;

163 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

164 
__THROW
 
__©åibuã_puª__
;

166 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

167 
__THROW
 
__©åibuã_puª__
;

168 
__END_NAMESPACE_STD


170 #ifde‡
__USE_XOPEN2K8


172 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

175 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

176 
size_t
 
__n
Ë
__THROW
;

180 
	~<xloˇÀ.h
>

182 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

183 
__loˇÀ_t
 
__loc
Ë
__THROW
;

185 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


192 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

196 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

197 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

198 
__END_NAMESPACE_STD


200 #ifde‡
__USE_XOPEN2K8


206 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

207 
__loˇÀ_t
 
__loc
Ë
__THROW
;

212 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

213 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

216 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

219 
__BEGIN_NAMESPACE_STD


221 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


222 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

223 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
__©åibuã_puª__
;

231 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


232 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

233 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
__©åibuã_puª__
;

240 
__END_NAMESPACE_STD


242 #ifde‡
__USE_GNU


245 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

246 
__THROW
 
__©åibuã_puª__
;

249 
__BEGIN_NAMESPACE_STD


252 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

253 
__THROW
 
__©åibuã_puª__
;

256 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

257 
__THROW
 
__©åibuã_puª__
;

259 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


260 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

262 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

263 c⁄° 
wch¨_t
 *
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

266 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

267 
__THROW
 
__©åibuã_puª__
;

270 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


271 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

273 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

274 c⁄° 
wch¨_t
 *
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

277 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

278 
__THROW
 
__©åibuã_puª__
;

282 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

283 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

284 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

287 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

288 
__END_NAMESPACE_STD


290 #ifde‡
__USE_XOPEN


292 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


293 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

295 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

296 c⁄° 
wch¨_t
 *
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

299 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

300 
__THROW
 
__©åibuã_puª__
;

304 #ifde‡
__USE_XOPEN2K8


306 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

307 
__THROW
 
__©åibuã_puª__
;

311 
__BEGIN_NAMESPACE_STD


313 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


314 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

316 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

317 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

320 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

321 
__THROW
 
__©åibuã_puª__
;

325 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

326 
__THROW
 
__©åibuã_puª__
;

329 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

330 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

334 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

335 
__THROW
;

338 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

339 
__END_NAMESPACE_STD


341 #ifde‡
__USE_GNU


344 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

345 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

346 
__THROW
;

350 
__BEGIN_NAMESPACE_STD


353 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

357 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

361 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

365 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

366 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

367 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

370 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

371 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

377 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

378 
__END_NAMESPACE_STD


380 #ifde‡
__USE_EXTERN_INLINES


386 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

387 
__exã∫_ölöe
 
wöt_t


388 
	`__NTH
 (
	$btowc
 (
__c
))

389 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

390 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

392 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

393 
__exã∫_ölöe
 

394 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

395 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

396 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

398 
__exã∫_ölöe
 
size_t


399 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

400 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

401 {  (
__ps
 !
NULL


402 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

405 
__BEGIN_NAMESPACE_STD


408 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

409 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

410 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

414 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

415 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

416 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
__END_NAMESPACE_STD


420 #ifdef 
__USE_XOPEN2K8


423 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

424 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

425 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

429 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

430 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

431 
size_t
 
__nwc
, size_à
__Àn
,

432 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

437 #ifde‡
__USE_XOPEN


439 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

443 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

447 
__BEGIN_NAMESPACE_STD


450 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

451 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

452 
__END_NAMESPACE_STD


454 #ifde‡
__USE_ISOC99


455 
__BEGIN_NAMESPACE_C99


457 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

460 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

461 
__END_NAMESPACE_C99


465 
__BEGIN_NAMESPACE_STD


468 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

469 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

473 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

474 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

475 
__THROW
;

476 
__END_NAMESPACE_STD


478 #ifde‡
__USE_ISOC99


479 
__BEGIN_NAMESPACE_C99


482 
__exãnsi⁄__


483 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

484 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

485 
__THROW
;

489 
__exãnsi⁄__


490 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

491 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

492 
__ba£
Ë
__THROW
;

493 
__END_NAMESPACE_C99


496 #ifde‡
__USE_GNU


499 
__exãnsi⁄__


500 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

501 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

502 
__THROW
;

506 
__exãnsi⁄__


507 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

508 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

509 
__ba£
Ë
__THROW
;

512 #ifde‡
__USE_GNU


526 
	~<xloˇÀ.h
>

530 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

531 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

532 
__loˇÀ_t
 
__loc
Ë
__THROW
;

534 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

535 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

536 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

538 
__exãnsi⁄__


539 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

540 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

541 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

543 
__exãnsi⁄__


544 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

545 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

546 
__ba£
, 
__loˇÀ_t
 
__loc
)

547 
__THROW
;

549 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

550 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
;

553 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

554 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

555 
__THROW
;

557 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

558 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

559 
__loˇÀ_t
 
__loc
Ë
__THROW
;

563 #ifde‡
__USE_XOPEN2K8


566 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

567 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

571 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

572 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

573 
__THROW
;

580 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

583 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


584 
__BEGIN_NAMESPACE_STD


587 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

594 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

595 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

601 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

605 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

606 
__THROW
 ;

612 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

613 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

614 
__gnuc_va_li°
 
__¨g
)

620 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

621 
__gnuc_va_li°
 
__¨g
)

625 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

626 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

627 
__gnuc_va_li°
 
__¨g
)

628 
__THROW
 ;

635 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

636 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

642 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

646 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

647 
__THROW
 ;

649 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

650 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

651 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

652 #ifde‡
__REDIRECT


656 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

657 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

658 
__isoc99_fwsˇnf
)

660 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_wsˇnf
)

663 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

664 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

665 ...), 
__isoc99_swsˇnf
)

668 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

669 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

670 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

671 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

673 
__THROW
;

674 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

675 
	#wsˇnf
 
__isoc99_wsˇnf


	)

676 
	#swsˇnf
 
__isoc99_swsˇnf


	)

680 
__END_NAMESPACE_STD


683 #ifde‡
__USE_ISOC99


684 
__BEGIN_NAMESPACE_C99


689 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

690 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

691 
__gnuc_va_li°
 
__¨g
)

697 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

698 
__gnuc_va_li°
 
__¨g
)

701 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

702 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

703 
__gnuc_va_li°
 
__¨g
)

704 
__THROW
 ;

706 #i‡!
deföed
 
__USE_GNU
 \

707 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

708 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

709 #ifde‡
__REDIRECT


710 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

711 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

712 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

714 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

717 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

718 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

719 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

722 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

723 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

726 
__gnuc_va_li°
 
__¨g
);

727 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

728 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

730 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

731 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

732 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

736 
__END_NAMESPACE_C99


740 
__BEGIN_NAMESPACE_STD


745 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

746 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

752 
wöt_t
 
	`gëwch¨
 ();

759 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

760 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

766 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

774 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

775 
__FILE
 *
__ª°ri˘
 
__°ªam
);

781 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

782 
__FILE
 *
__ª°ri˘
 
__°ªam
);

789 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

790 
__END_NAMESPACE_STD


793 #ifde‡
__USE_GNU


801 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

802 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

810 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

818 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

827 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

828 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

837 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

838 
__FILE
 *
__ª°ri˘
 
__°ªam
);

846 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

847 
__FILE
 *
__ª°ri˘
 
__°ªam
);

851 
__BEGIN_NAMESPACE_C99


855 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

856 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

857 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

858 
__END_NAMESPACE_C99


860 #ifde‡
__USE_GNU


861 
	~<xloˇÀ.h
>

865 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

866 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

867 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

868 
__loˇÀ_t
 
__loc
Ë
__THROW
;

877 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


878 
	#__√ed_iswxxx


	)

879 
	~<w˘y≥.h
>

883 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


884 
	~<bôs/wch¨2.h
>

887 #ifde‡
__LDBL_COMPAT


888 
	~<bôs/wch¨-ldbl.h
>

891 
__END_DECLS


899 #unde‡
__√ed_mb°©e_t


900 #unde‡
__√ed_wöt_t


	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@
1
.
1
/usr/include
54
1138
config.h
fsck/dump.c
fsck/f2fs.h
fsck/fsck.c
fsck/fsck.h
fsck/main.c
fsck/mount.c
include/f2fs_fs.h
include/list.h
lib/libf2fs.c
lib/libf2fs_io.c
mkfs/f2fs_format.c
mkfs/f2fs_format_main.c
mkfs/f2fs_format_utils.c
mkfs/f2fs_format_utils.h
tools/f2fs_io_parse.c
tools/f2fstat.c
tools/fibmap.c
/usr/include/assert.h
/usr/include/byteswap.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/inttypes.h
/usr/include/libgen.h
/usr/include/linux/falloc.h
/usr/include/linux/fs.h
/usr/include/linux/hdreg.h
/usr/include/linux/types.h
/usr/include/locale.h
/usr/include/mntent.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/uuid/uuid.h
/usr/include/alloca.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/linux/ioctl.h
/usr/include/linux/limits.h
/usr/include/linux/posix_types.h
/usr/include/paths.h
/usr/include/stdint.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/ctype.h
/usr/include/linux/stddef.h
/usr/include/stdc-predef.h
/usr/include/endian.h
/usr/include/gconv.h
/usr/include/wchar.h
/usr/include/wctype.h
